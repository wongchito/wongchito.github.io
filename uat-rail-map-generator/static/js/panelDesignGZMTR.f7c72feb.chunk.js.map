{"version":3,"file":"static/js/panelDesignGZMTR.f7c72feb.chunk.js","mappings":"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","sources":["panels/design/list-gzmtr.tsx"],"sourcesContent":["import React, { useState, useMemo, ChangeEvent } from 'react';\nimport { useTranslation } from 'react-i18next';\n\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    TextField,\n    ListItemText,\n    makeStyles,\n    createStyles,\n    Collapse,\n    Divider,\n    List,\n    ListItemSecondaryAction,\n    IconButton,\n    Typography,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogActions,\n    Button,\n    Menu,\n    MenuItem,\n    Slider,\n    Switch,\n    Select,\n} from '@material-ui/core';\n\nimport { PanelTypeGZMTR, Note } from '../../constants/constants';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { addNote, removeNote, setLineNum, setPanelType, setPsdNum, updateNote } from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n    })\n);\n\nconst DesignListGZMTR = () => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const lineNum = useAppSelector(store => store.param.line_num);\n    const psdNum = useAppSelector(store => store.param.psd_num);\n\n    const handleLineNumChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setLineNum(value));\n    };\n\n    const handlePsdNumChange = ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n        dispatch(setPsdNum(value));\n    };\n\n    return (\n        <>\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.lineNum')} />\n                <TextField value={lineNum} onChange={handleLineNumChange} />\n            </ListItem>\n            <Divider />\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.psd')} />\n                <TextField value={psdNum} onChange={handlePsdNumChange} />\n            </ListItem>\n            <Divider />\n            <PanelTypeLi />\n            <Divider />\n            <NotesLi />\n        </>\n    );\n};\n\nexport default DesignListGZMTR;\n\nconst PanelTypeLi = () => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const panelType = useAppSelector(store => store.param.info_panel_type);\n\n    return useMemo(() => {\n        const handleChange = ({ target: { value } }: ChangeEvent<{ name?: string; value: unknown }>) => {\n            dispatch(setPanelType(value as PanelTypeGZMTR));\n        };\n\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon style={{ transform: 'rotate(180deg)' }}>credit_card</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.panelType.button')} />\n                <Select native value={panelType} onChange={handleChange} style={{ width: 166 }}>\n                    {Object.values(PanelTypeGZMTR).map(type => (\n                        <option key={type} value={type}>\n                            {t('design.panelType.' + type)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        );\n    }, [panelType, t, dispatch]);\n};\n\nconst NotesLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const notes = useAppSelector(store => store.param.notesGZMTR);\n\n    const [isCollapse, setIsCollapse] = useState(false);\n    const [isDialogOpen, setIsDialogOpen] = useState(false);\n    const [noteSelected, setNoteSelected] = useState(0);\n\n    const handleAdd = () => {\n        setNoteSelected(notes.length);\n        dispatch(addNote());\n        setIsDialogOpen(true);\n    };\n\n    const handleUpdate = (idx: number) => () => {\n        setNoteSelected(idx);\n        setIsDialogOpen(true);\n    };\n\n    return (\n        <>\n            <ListItem button onClick={() => setIsCollapse(prevOpen => !prevOpen)}>\n                <ListItemIcon>\n                    <Icon>notes</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.notesGZMTR.text')} />\n                {isCollapse ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n            </ListItem>\n            <Collapse in={isCollapse} unmountOnExit>\n                <List component=\"div\" disablePadding className={classes.nestedList}>\n                    {notes.map((_, i) => (\n                        <NotesEntry key={i} idx={i} onEdit={handleUpdate(i)} />\n                    ))}\n                    <ListItem>\n                        <ListItemText disableTypography>\n                            <Typography color=\"primary\" style={{ cursor: 'pointer' }} onClick={handleAdd}>\n                                {t('design.notesGZMTR.addNote')}\n                            </Typography>\n                        </ListItemText>\n                    </ListItem>\n                    {isDialogOpen && (\n                        <NoteEditDialog open={isDialogOpen} onClose={() => setIsDialogOpen(false)} idx={noteSelected} />\n                    )}\n                </List>\n            </Collapse>\n        </>\n    );\n};\n\nconst NotesEntry = (props: { idx: number; onEdit: () => void }) => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const notes = useAppSelector(store => store.param.notesGZMTR);\n    const selectedNote = notes[props.idx];\n\n    const [toggleEl, setToggleEl] = useState<null | HTMLElement>(null);\n\n    const handleEdit = () => {\n        setToggleEl(null);\n        props.onEdit();\n    };\n\n    const handleSlide = (i: number) => (_event: React.ChangeEvent<{}>, value: number | number[]) => {\n        if (typeof value === 'number') {\n            const updatedNote = selectedNote.map((val, j) => (j === i ? value : val)) as Note;\n            dispatch(updateNote(props.idx, updatedNote));\n        }\n    };\n\n    const handleChangeBorder = (_: ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        const updatedNote = selectedNote.map((val, i) => (i === 4 ? checked : val)) as Note;\n        dispatch(updateNote(props.idx, updatedNote));\n    };\n\n    const handleRemove = () => {\n        setToggleEl(null);\n        dispatch(removeNote(props.idx));\n    };\n\n    return useMemo(\n        () => (\n            <>\n                <ListItem>\n                    <ListItemText\n                        primary={selectedNote[0]}\n                        secondary={selectedNote[1]}\n                        style={{ overflow: 'hidden', textOverflow: 'ellipsis', whiteSpace: 'nowrap' }}\n                    />\n                    <ListItemSecondaryAction>\n                        <IconButton size=\"small\" onClick={e => setToggleEl(e.currentTarget)}>\n                            <Icon>more_vert</Icon>\n                        </IconButton>\n                        <Menu anchorEl={toggleEl} open={Boolean(toggleEl)} onClose={() => setToggleEl(null)}>\n                            <MenuItem onClick={handleEdit}>{t('design.notesGZMTR.edit')}</MenuItem>\n\n                            <ListItem component=\"div\">\n                                <Slider\n                                    value={selectedNote[2]}\n                                    onChange={handleSlide(2)}\n                                    step={0.01}\n                                    marks={[\n                                        { value: 0, label: t('layout.directionGZ.left') },\n                                        { value: 100, label: t('layout.directionGZ.right') },\n                                    ]}\n                                    style={{ width: 200, marginLeft: 5, marginRight: 5 }}\n                                    valueLabelDisplay=\"auto\"\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <Slider\n                                    value={selectedNote[3]}\n                                    onChange={handleSlide(3)}\n                                    step={0.01}\n                                    marks={[\n                                        { value: 0, label: t('layout.directionGZ.top') },\n                                        { value: 100, label: t('layout.directionGZ.bottom') },\n                                    ]}\n                                    style={{ width: 200, marginLeft: 5, marginRight: 5 }}\n                                    valueLabelDisplay=\"auto\"\n                                />\n                            </ListItem>\n                            <ListItem>\n                                <ListItemText primary={t('design.notesGZMTR.border')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        edge=\"end\"\n                                        color=\"primary\"\n                                        checked={selectedNote[4]}\n                                        onChange={handleChangeBorder}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n\n                            <MenuItem onClick={handleRemove}>{t('design.notesGZMTR.remove')}</MenuItem>\n                        </Menu>\n                    </ListItemSecondaryAction>\n                </ListItem>\n                <Divider variant=\"middle\" />\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [selectedNote.toString(), toggleEl]\n    );\n};\n\ninterface AddNoteDialogProps {\n    open: boolean;\n    onClose: () => void;\n    idx: number;\n}\n\nconst NoteEditDialog = (props: AddNoteDialogProps) => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const notes = useAppSelector(store => store.param.notesGZMTR);\n    const selectedNote = notes[props.idx] || ['', '', 0, 0, false];\n\n    const [noteZH, setNoteZH] = useState(selectedNote[0] || '');\n    const [noteEN, setNoteEN] = useState(selectedNote[1] || '');\n\n    const handleClick = () => {\n        const updatedNote: Note = [noteZH, noteEN, selectedNote[2], selectedNote[3], selectedNote[4]];\n        dispatch(updateNote(props.idx, updatedNote));\n        props.onClose();\n    };\n\n    return useMemo(\n        () => (\n            <Dialog open={true} onClose={props.onClose}>\n                <DialogTitle>{t('design.notesGZMTR.editNote')}</DialogTitle>\n                <DialogContent>\n                    <TextField\n                        variant=\"outlined\"\n                        label={t('editor.zh')}\n                        margin=\"dense\"\n                        multiline\n                        autoFocus\n                        value={noteZH}\n                        onChange={e => setNoteZH(e.target.value)}\n                        style={{ width: '100%' }}\n                        helperText={t('editor.enterToWrap')}\n                    />\n                    <TextField\n                        variant=\"outlined\"\n                        label={t('editor.en')}\n                        margin=\"dense\"\n                        multiline\n                        value={noteEN}\n                        onChange={e => setNoteEN(e.target.value)}\n                        style={{ width: '100%' }}\n                        helperText={t('editor.enterToWrap')}\n                    />\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"contained\" onClick={handleClick} color=\"primary\">\n                        {t('dialog.done')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [noteZH, noteEN]\n    );\n};\n"],"names":["useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","t","useTranslation","dispatch","useAppDispatch","lineNum","useAppSelector","store","param","line_num","psdNum","psd_num","primary","value","onChange","target","setLineNum","setPsdNum","PanelTypeLi","NotesLi","panelType","info_panel_type","useMemo","style","transform","native","setPanelType","width","Object","values","PanelTypeGZMTR","map","type","classes","notes","notesGZMTR","useState","isCollapse","setIsCollapse","isDialogOpen","setIsDialogOpen","noteSelected","setNoteSelected","button","onClick","prevOpen","color","in","unmountOnExit","component","disablePadding","className","_","i","NotesEntry","idx","onEdit","disableTypography","cursor","length","addNote","NoteEditDialog","open","onClose","props","selectedNote","toggleEl","setToggleEl","handleEdit","handleSlide","_event","updatedNote","val","j","updateNote","handleChangeBorder","checked","handleRemove","removeNote","secondary","overflow","textOverflow","whiteSpace","size","e","currentTarget","anchorEl","Boolean","step","marks","label","marginLeft","marginRight","valueLabelDisplay","edge","variant","toString","noteZH","setNoteZH","noteEN","setNoteEN","handleClick","margin","multiline","autoFocus","helperText"],"sourceRoot":""}