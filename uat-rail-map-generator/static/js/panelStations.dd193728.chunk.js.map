{"version":3,"file":"static/js/panelStations.dd193728.chunk.js","mappings":"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","sources":["panels/stations/station-list.tsx","methods.ts","redux/param/station-list-util.ts","panels/stations/add-diag.tsx","redux/param/add-station-action.ts","panels/stations/edit-diag/dialog.tsx","panels/stations/edit-diag/index.ts","panels/stations/delete-diags.tsx","redux/param/remove-station-action.ts","panels/stations/fabs.tsx","panels/stations/auto-num-diag.tsx","panels/stations/panel2.tsx","panels/stations/index.ts"],"sourcesContent":["import React, { useState } from 'react';\nimport {\n    createStyles,\n    Divider,\n    Icon,\n    IconButton,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Menu,\n    MenuItem,\n    Paper,\n    Typography,\n} from '@material-ui/core';\nimport { useTranslation } from 'react-i18next';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\nimport { setCurrentStation } from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        listItemNum: {\n            marginRight: theme.spacing(1),\n            fontSize: '1.2rem',\n        },\n        listItemText: {\n            display: 'flex',\n            alignItems: 'baseline',\n            whiteSpace: 'nowrap',\n            overflow: 'hidden',\n            '& .MuiListItemText-primary': {\n                marginRight: theme.spacing(1),\n            },\n        },\n        selectedItem: {\n            background: theme.palette.action.hover,\n        },\n    })\n);\n\ninterface Props {\n    selectedId: string;\n    onAction: (stnId: string) => (action: 'edit' | 'remove') => void;\n}\n\nconst StationList = (props: Props) => {\n    const tpo = useAppSelector(store => store.helper.tpo);\n\n    return (\n        <Paper>\n            <List dense disablePadding>\n                {tpo.map(stnId => (\n                    <React.Fragment key={stnId}>\n                        <StationEntry\n                            stnId={stnId}\n                            isSelected={stnId === props.selectedId}\n                            onAction={props.onAction(stnId)}\n                        />\n                        <Divider />\n                    </React.Fragment>\n                ))}\n            </List>\n        </Paper>\n    );\n};\n\nexport default StationList;\n\nconst StationEntry = (props: { stnId: string; isSelected: boolean; onAction: (action: 'edit' | 'remove') => void }) => {\n    const { stnId, isSelected, onAction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const stationInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const name = stationInfo?.name || ['', ''];\n    const num = stationInfo?.num || '00';\n\n    const [toggleEl, setToggleEl] = useState<null | HTMLElement>(null);\n\n    const handleCurrent = () => {\n        dispatch(setCurrentStation(stnId));\n        setToggleEl(null);\n    };\n\n    const handleAction = (action: 'edit' | 'remove') => () => {\n        onAction(action);\n        setToggleEl(null);\n    };\n\n    return (\n        <ListItem className={isSelected ? classes.selectedItem : ''}>\n            {rmgStyle === RmgStyle.GZMTR && <Typography className={classes.listItemNum}>{num}</Typography>}\n            <ListItemText primary={name[0]} secondary={name[1].replace('\\\\', ' ')} className={classes.listItemText} />\n            <ListItemSecondaryAction>\n                <IconButton size=\"small\" onClick={e => setToggleEl(e.currentTarget)}>\n                    <Icon>more_vert</Icon>\n                </IconButton>\n                <Menu anchorEl={toggleEl} open={Boolean(toggleEl)} onClose={() => setToggleEl(null)}>\n                    <MenuItem onClick={handleCurrent}>{t('stations.current')}</MenuItem>\n                    <MenuItem onClick={handleAction('edit')}>{t('stations.edit.button')}</MenuItem>\n                    <MenuItem onClick={handleAction('remove')}>{t('stations.remove.button')}</MenuItem>\n                </Menu>\n            </ListItemSecondaryAction>\n        </ListItem>\n    );\n};\n","import { StationDict } from './constants/constants';\n\n/**\n * Vertical position (in shares) of station icon if using MTR style (for consistency of method `RMGLine.newStnPossibleLoc()`).\n */\nexport const getYShareMTR = (stnId: string, stnList: StationDict): -1 | 0 | 1 => {\n    if (\n        ['linestart', 'lineend'].includes(stnId) ||\n        stnList[stnId].parents.length > 1 ||\n        stnList[stnId].children.length > 1\n    ) {\n        return 0;\n    }\n    var stnPred = stnList[stnId].parents[0];\n    if (stnPred) {\n        // parent exist\n        if (stnList[stnPred].children.length === 1) {\n            // no sibling, then y same as parent\n            return getYShareMTR(stnPred, stnList);\n        } else {\n            // sibling exists, then y depends on its idx of being children\n            return stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n        }\n    } else {\n        // no parent, must be linestart\n        return 0;\n    }\n};\n","export const getRandomId = () =>\n    Math.floor(Math.random() * Math.pow(36, 4))\n        .toString(36)\n        .padStart(4, '0');\n","import React, { useMemo, useEffect } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    DialogActions,\n    Button,\n    makeStyles,\n    createStyles,\n    ListItemText,\n    Select,\n    Divider,\n} from '@material-ui/core';\nimport { formatStnName } from '../../utils';\nimport { getYShareMTR } from '../../methods';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { StationDict, StationInfo } from '../../constants/constants';\nimport { addStation } from '../../redux/param/add-station-action';\n\nconst newBranchPossibleEnd = (prep: 'before' | 'after', pivot: string, stnList: StationDict) => {\n    let res: string[] = [];\n    if (prep === 'before') {\n        while (stnList[pivot].parents.length === 1) {\n            pivot = stnList[pivot].parents[0];\n            res.unshift(pivot);\n        }\n        res.pop();\n    } else {\n        while (stnList[pivot].children.length === 1) {\n            pivot = stnList[pivot].children[0];\n            res.push(pivot);\n        }\n        res.shift();\n    }\n    return res;\n};\n\nconst newStnPossibleLoc = (\n    prep: 'before' | 'after',\n    pivot: string,\n    stnList: { [stnId: string]: StationInfo }\n): [number, number, number, string[], string[]] => {\n    let deg = stnList[pivot] ? stnList[pivot][prep === 'before' ? 'parents' : 'children'].length : 0;\n    switch (deg) {\n        case 2:\n            // 1 -> 2\n            return [1, 1, 1, [], []];\n        case 1:\n            let y = getYShareMTR(pivot, stnList);\n            if (y === 0) {\n                // 1 -> 1\n                let state: string[] | 0 = newBranchPossibleEnd(prep, pivot, stnList);\n                state = state.length ? state : [];\n                return [1, 0, 0, state, state];\n                // [1,0,0,1,1];\n            } else if (y < 0) {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 0, 1, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 0, 1, [], []];\n                }\n            } else {\n                if (prep === 'before') {\n                    return [stnList[stnList[pivot].parents[0]].children.length - 1, 1, 0, [], []];\n                } else {\n                    return [stnList[stnList[pivot].children[0]].parents.length - 1, 1, 0, [], []];\n                }\n            }\n    }\n    return [0, 0, 0, [], []];\n};\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        dialogContent: {\n            padding: 8,\n        },\n        select: {\n            width: 166,\n            marginLeft: 8,\n        },\n    })\n);\n\ninterface StationAddDialogProps {\n    open: boolean;\n    onClose: (action: 'close' | string) => void;\n}\n\nexport default React.memo(\n    function StationAddDialog(props: StationAddDialogProps) {\n        const { t } = useTranslation();\n        const classes = useStyles();\n        const dispatch = useAppDispatch();\n\n        const rmgStyle = useAppSelector(store => store.param.style);\n        const stnList = useAppSelector(store => store.param.stn_list);\n        const { tpo } = useAppSelector(store => store.helper);\n\n        const allLocs = {\n            centre: t('stations.add.centre'),\n            upper: t('stations.add.upper'),\n            lower: t('stations.add.lower'),\n            newupper: t('stations.add.newUpper'),\n            newlower: t('stations.add.newLower'),\n        };\n\n        const [prep, setPrep] = React.useState('before' as 'before' | 'after');\n        const [pivot, setPivot] = React.useState(tpo[0]);\n        const [loc, setLoc] = React.useState(Object.keys(allLocs)[0]);\n        const [locOK, setLocOK] = React.useState(Array(5).fill(true) as boolean[]);\n\n        const [end, setEnd] = React.useState('');\n        const [endList, setEndList] = React.useState([] as string[]);\n\n        // Hook for updating loc list and end lists when pivot changed\n        const newLocs = useMemo(() => newStnPossibleLoc(prep, pivot, stnList), [prep, pivot, stnList]);\n        useEffect(\n            () => {\n                setLocOK(newLocs.map(p => (typeof p === 'number' ? Boolean(p) : Boolean(p.length))));\n                setEndList(newLocs[3]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [newLocs.toString()]\n        );\n\n        // Hook for updating loc selection (first available) when locOK list changed\n        useEffect(\n            () => setLoc(Object.keys(allLocs)[locOK.indexOf(true)]),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [locOK]\n        );\n\n        // Hook for updating end selection when end list changed\n        useEffect(() => {\n            if (endList.length === 0) return;\n            setEnd(endList[0]);\n        }, [endList]);\n\n        // Hook for setting new pivot in case of previous one being deleted\n        useEffect(\n            () => {\n                if (!(pivot in stnList)) setPivot(tpo[0]);\n            },\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [Object.keys(stnList).toString()]\n        );\n\n        const handleClick = (action: string) => {\n            if (action === 'close') {\n                props.onClose('close');\n            } else {\n                const newId = dispatch(addStation(prep, pivot, loc as any, end));\n                props.onClose(newId);\n            }\n        };\n\n        return (\n            <Dialog open={props.open} onClose={() => handleClick('close')}>\n                <DialogTitle>{t('stations.add.title')}</DialogTitle>\n                <DialogContent className={classes.dialogContent}>\n                    <List component=\"div\" disablePadding>\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>control_camera</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.prep')} />\n                            <Select\n                                native\n                                onChange={e => setPrep(e.target.value as 'before' | 'after')}\n                                value={prep}\n                                className={classes.select}\n                            >\n                                {['before', 'after'].map(p => (\n                                    <option key={p} value={p}>\n                                        {t('stations.add.' + p)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>near_me</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.pivot')} />\n                            <Select\n                                native\n                                onChange={e => setPivot(e.target.value as string)}\n                                value={pivot}\n                                className={classes.select}\n                            >\n                                {tpo.map(stnId => (\n                                    <option key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemIcon>\n                                <Icon>share</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.loc')} />\n                            <Select\n                                native\n                                onChange={e => setLoc(e.target.value as string)}\n                                value={loc}\n                                className={classes.select}\n                            >\n                                {(Object.keys(allLocs) as (keyof typeof allLocs)[]).map((key, idx) => (\n                                    <option key={key} value={key} disabled={!locOK[idx]}>\n                                        {allLocs[key]}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                        <Divider\n                            variant=\"middle\"\n                            style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}\n                        />\n                        <ListItem style={{ display: ['newupper', 'newlower'].includes(loc) ? 'flex' : 'none' }}>\n                            <ListItemIcon>\n                                <Icon>undo</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('stations.add.end')} />\n                            <Select\n                                native\n                                onChange={e => setEnd(e.target.value as string)}\n                                value={end}\n                                className={classes.select}\n                            >\n                                {endList.map(stnId => (\n                                    <option key={stnId} value={stnId}>\n                                        {formatStnName(stnList[stnId], rmgStyle)}\n                                    </option>\n                                ))}\n                            </Select>\n                        </ListItem>\n                    </List>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={() => handleClick('close')} color=\"primary\">\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('accept')} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import { AppDispatch, RootState } from '../index';\nimport { getRandomId } from './station-list-util';\nimport { BranchStyle, Facilities, Services, ShortDirection, StationDict, StationInfo } from '../../constants/constants';\nimport { getYShareMTR } from '../../methods';\nimport { setStationsBulk } from './action';\n\nexport const addStation = (\n    prep: 'before' | 'after',\n    pivotStationId: string,\n    loc: 'centre' | 'upper' | 'lower' | 'newupper' | 'newlower',\n    end: string\n) => {\n    // return new station id\n    return (dispatch: AppDispatch, getState: () => RootState): string => {\n        const stationList = getState().param.stn_list;\n        // get new id\n        let newId = getRandomId();\n        while (Object.keys(stationList).includes(newId)) {\n            newId = getRandomId();\n        }\n        let newInfo: StationInfo = {\n            name: ['未命名 ' + newId, 'Unnamed ' + newId],\n            secondaryName: false,\n            num: '00',\n            services: [Services.local],\n            parents: [],\n            children: [],\n            branch: {\n                left: [],\n                right: [],\n            },\n            transfer: {\n                info: [[]],\n                // type: 'none',\n                tick_direc: ShortDirection.right,\n                paid_area: true,\n                osi_names: [],\n            },\n            facility: Facilities.none,\n        };\n\n        let newStnList = JSON.parse(JSON.stringify(stationList)) as StationDict;\n\n        if (prep === 'before') {\n            if (loc === 'centre') {\n                newInfo.parents = stationList[pivotStationId].parents;\n                if (\n                    stationList[pivotStationId].parents.length === 0 &&\n                    getYShareMTR(pivotStationId, stationList) !== 0\n                ) {\n                    // todo: is this case really exist?\n                    newInfo.children = stationList.linestart.children;\n                } else if (getYShareMTR(pivotStationId, stationList) !== 0) {\n                    // pivot on branch\n                    newInfo.children = stationList[stationList[pivotStationId].parents[0]].children.slice();\n                    newInfo.branch.right = stationList[newInfo.parents[0]].branch.right;\n                    newStnList[newInfo.parents[0]].branch.right = [];\n                } else {\n                    // pivot on main\n                    newInfo.children = [pivotStationId];\n                    newInfo.branch.left = stationList[pivotStationId].branch.left;\n                    newStnList[pivotStationId].branch.left = [];\n                }\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n            } else if (loc === 'upper') {\n                if (stationList[pivotStationId].parents.length === 2) {\n                    if (stationList[pivotStationId].branch.left[1] === stationList[pivotStationId].parents[0]) {\n                        newStnList[pivotStationId].branch.left[1] = newId;\n                    }\n\n                    newInfo.parents = stationList[pivotStationId].parents.slice(0, 1);\n                    newInfo.children = [pivotStationId];\n                    newInfo.parents.forEach(par => {\n                        newStnList[par].children = [newId];\n                    });\n                    newStnList[pivotStationId].parents[0] = newId;\n                } else {\n                    // already on branch\n                    newInfo.parents = stationList[pivotStationId].parents;\n                    newInfo.children = [pivotStationId];\n                    newInfo.parents.forEach(par => {\n                        newStnList[par].children[0] = newId;\n\n                        if (stationList[par].branch.right[1] === pivotStationId) {\n                            newStnList[par].branch.right[1] = newId;\n                        }\n                    });\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents = [newId];\n                    });\n                }\n            } else if (loc === 'lower') {\n                if (stationList[pivotStationId].parents.length === 2) {\n                    if (stationList[pivotStationId].branch.left[1] === stationList[pivotStationId].parents[1]) {\n                        newStnList[pivotStationId].branch.left[1] = newId;\n                    }\n\n                    newInfo.parents = stationList[pivotStationId].parents.slice(1);\n                    newInfo.children = [pivotStationId];\n                    newInfo.parents.forEach(par => {\n                        newStnList[par].children = [newId];\n                    });\n                    newStnList[pivotStationId].parents[1] = newId;\n                } else {\n                    // already on branch\n                    newInfo.parents = stationList[pivotStationId].parents;\n                    newInfo.children = [pivotStationId];\n                    newInfo.parents.forEach(par => {\n                        let parChildLen = stationList[par].children.length;\n                        newStnList[par].children[parChildLen - 1] = newId;\n\n                        if (stationList[par].branch.right[1] === pivotStationId) {\n                            newStnList[par].branch.right[1] = newId;\n                        }\n                    });\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents = [newId];\n                    });\n                }\n            } else {\n                newStnList[pivotStationId].branch.left = [BranchStyle.through, newId];\n                newStnList[end].branch.right = [BranchStyle.through, newId];\n                newInfo.parents = [end];\n                newInfo.children = [pivotStationId];\n\n                if (loc === 'newupper') {\n                    newStnList[end].children.unshift(newId);\n                    newStnList[pivotStationId].parents.unshift(newId);\n                } else {\n                    newStnList[end].children.push(newId);\n                    newStnList[pivotStationId].parents.push(newId);\n                }\n            }\n        } else {\n            if (loc === 'centre') {\n                newInfo.children = stationList[pivotStationId].children;\n                if (\n                    stationList[pivotStationId].children.length === 0 &&\n                    getYShareMTR(pivotStationId, stationList) !== 0\n                ) {\n                    newInfo.parents = stationList.lineend.parents;\n                } else if (getYShareMTR(pivotStationId, stationList) !== 0) {\n                    // pivot on branch\n                    newInfo.parents = stationList[stationList[pivotStationId].children[0]].parents;\n                    newInfo.branch.left = stationList[newInfo.children[0]].branch.left;\n                    newStnList[newInfo.children[0]].branch.left = [];\n                } else {\n                    // pivot on main\n                    newInfo.parents = [pivotStationId];\n                    newInfo.branch.right = stationList[pivotStationId].branch.right;\n                    newStnList[pivotStationId].branch.right = [];\n                }\n                newInfo.children.forEach(child => {\n                    newStnList[child].parents = [newId];\n                });\n                newInfo.parents.forEach(par => {\n                    newStnList[par].children = [newId];\n                });\n            } else if (loc === 'upper') {\n                if (stationList[pivotStationId].children.length === 2) {\n                    if (stationList[pivotStationId].branch.right[1] === stationList[pivotStationId].children[0]) {\n                        newStnList[pivotStationId].branch.right[1] = newId;\n                    }\n\n                    newInfo.children = stationList[pivotStationId].children.slice(0, 1);\n                    newInfo.parents = [pivotStationId];\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents = [newId];\n                    });\n                    newStnList[pivotStationId].children[0] = newId;\n                } else {\n                    // already on branch\n                    newInfo.children = stationList[pivotStationId].children;\n                    newInfo.parents = [pivotStationId];\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents[0] = newId;\n\n                        if (stationList[child].branch.left[1] === pivotStationId) {\n                            newStnList[child].branch.left[1] = newId;\n                        }\n                    });\n                    newInfo.parents.forEach(par => {\n                        newStnList[par].children = [newId];\n                    });\n                }\n            } else if (loc === 'lower') {\n                if (stationList[pivotStationId].children.length === 2) {\n                    if (stationList[pivotStationId].branch.right[1] === stationList[pivotStationId].children[1]) {\n                        newStnList[pivotStationId].branch.right[1] = newId;\n                    }\n\n                    newInfo.children = stationList[pivotStationId].children.slice(1);\n                    newInfo.parents = [pivotStationId];\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents = [newId];\n                    });\n                    newStnList[pivotStationId].children[1] = newId;\n                } else {\n                    // already on branch\n                    newInfo.children = stationList[pivotStationId].children;\n                    newInfo.parents = [pivotStationId];\n                    newInfo.children.forEach(child => {\n                        newStnList[child].parents[stationList[child].parents.length === 1 ? 0 : 1] = newId;\n\n                        if (stationList[child].branch.left[1] === pivotStationId) {\n                            newStnList[child].branch.left[1] = newId;\n                        }\n                    });\n                    newInfo.parents.forEach(par => {\n                        newStnList[par].children = [newId];\n                    });\n                }\n            } else {\n                newStnList[pivotStationId].branch.right = [BranchStyle.through, newId];\n                newStnList[end].branch.left = [BranchStyle.through, newId];\n\n                newInfo.children = [end];\n                newInfo.parents = [pivotStationId];\n\n                if (loc === 'newupper') {\n                    newStnList[end].parents.unshift(newId);\n                    newStnList[pivotStationId].children.unshift(newId);\n                } else {\n                    newStnList[end].parents.push(newId);\n                    newStnList[pivotStationId].children.push(newId);\n                }\n            }\n        }\n\n        dispatch(\n            setStationsBulk({\n                ...newStnList,\n                [newId]: newInfo,\n            })\n        );\n        return newId;\n    };\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    Tabs,\n    Tab,\n    Icon,\n    Typography,\n    CircularProgress,\n    DialogActions,\n    Button,\n    useTheme,\n    useMediaQuery,\n    makeStyles,\n    createStyles,\n    Paper,\n} from '@material-ui/core';\n\nconst NameTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsName\" */ './name-tab'));\nconst InterchangeTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsInterchange\" */ './interchange-tab'));\nconst BranchTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsBranch\" */ './branch-tab'));\nconst MoreTab = React.lazy(() => import(/* webpackChunkName: \"panelStationsMore\" */ './more-tab'));\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        tab: {\n            padding: '6px 24px',\n            height: 48,\n            minWidth: 'calc(100% / 4)',\n            '& .MuiTab-wrapper': {\n                flexDirection: 'row',\n            },\n            '&.MuiTab-labelIcon': {\n                minHeight: 'unset',\n                '& .MuiTab-wrapper': {\n                    '& > *:first-child': {\n                        marginBottom: 0,\n                    },\n                    '& > *:not(first-child)': {\n                        paddingLeft: 8,\n                    },\n                },\n            },\n        },\n    })\n);\n\ninterface StationEditDialogProps {\n    onClose: () => void;\n    open: boolean;\n    stnId: string;\n}\n\nexport default function StationEditDialog(props: StationEditDialogProps) {\n    const { t } = useTranslation();\n\n    const [tabIndex, setTabIndex] = React.useState(0);\n\n    const classes = useStyles();\n\n    const tabNav = React.useMemo(\n        () => (\n            <Tabs\n                value={tabIndex}\n                indicatorColor=\"primary\"\n                textColor=\"primary\"\n                onChange={(_, val) => setTabIndex(val)}\n                variant=\"scrollable\"\n                scrollButtons=\"off\"\n            >\n                {[\n                    ['name', 'title'],\n                    ['interchange', 'transfer_within_a_station'],\n                    ['branch', 'share'],\n                    ['more', 'more_horiz'],\n                ].map((val, i) => (\n                    <Tab\n                        label={<span>{t('stations.edit.tab.' + val[0])}</span>}\n                        icon={<Icon>{val[1]}</Icon>}\n                        key={i}\n                        className={classes.tab}\n                    />\n                ))}\n            </Tabs>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [tabIndex, classes.tab]\n    );\n\n    return (\n        <DialogWrapper {...props}>\n            {tabNav}\n            <Typography component=\"div\" role=\"tabpanel\">\n                <React.Suspense fallback={<CircularProgress />}>\n                    {(idx => {\n                        switch (idx) {\n                            case 0:\n                                return <NameTab stnId={props.stnId} />;\n                            case 1:\n                                return <InterchangeTab stnId={props.stnId} />;\n                            case 2:\n                                return <BranchTab stnId={props.stnId} />;\n                            case 3:\n                                return <MoreTab stnId={props.stnId} />;\n                        }\n                    })(tabIndex)}\n                </React.Suspense>\n            </Typography>\n        </DialogWrapper>\n    );\n}\n\nconst DialogWrapper = (props: { children: React.ReactNode } & StationEditDialogProps) => {\n    const { t } = useTranslation();\n\n    const theme = useTheme();\n    const isMobile = useMediaQuery(theme.breakpoints.down('xs'));\n    const isDialog = useMediaQuery(theme.breakpoints.down('sm'));\n\n    return isDialog ? (\n        <Dialog onClose={props.onClose} open={props.open} fullScreen={isMobile}>\n            <DialogTitle>{t('stations.edit.title')}</DialogTitle>\n            <DialogContent dividers style={{ padding: '0 16px' }}>\n                {props.children}\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose} color=\"primary\">\n                    {t('dialog.done')}\n                </Button>\n            </DialogActions>\n        </Dialog>\n    ) : (\n        <Paper>{props.children}</Paper>\n    );\n};\n","import Dialog from './dialog';\n\nexport default Dialog;\n","import React, { useState, memo } from 'react';\nimport { useTranslation, Trans } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { setCurrentStation } from '../../redux/param/action';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { removeStation } from '../../redux/param/remove-station-action';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nexport default function StationDeleteDialog(props: Props & { stnId: string }) {\n    const { stnId, open, onClose } = props;\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const stnList = useAppSelector(store => store.param.stn_list);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n\n    const [isError, setIsError] = useState(false);\n\n    const handleClick = (action: 'close' | 'accept') => () => {\n        if (action === 'accept') {\n            let res = dispatch(removeStation(stnId));\n            if (!res) {\n                setIsError(true);\n            } else {\n                if (currentStationIndex === stnId) {\n                    let newCurrentId = Object.keys(stnList).filter(id => !['linestart', 'lineend'].includes(id))[0];\n                    dispatch(setCurrentStation(newCurrentId));\n                }\n            }\n        }\n        onClose();\n    };\n    return (\n        <>\n            <Dialog open={open} onClose={handleClick('close')}>\n                <DialogTitle>{t('stations.remove.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>\n                        <Trans i18nKey=\"stations.remove.msg\">{{ name: stnList[props.stnId]?.name.join() }}</Trans>\n                    </DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={handleClick('close')} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={handleClick('accept')} color=\"primary\">\n                        {t('stations.remove.button')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n            <ErrorDialog open={isError} onClose={() => setIsError(false)} />\n        </>\n    );\n}\n\nconst ErrorDialog = memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        return (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('stations.remove.error.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('stations.remove.error.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.ok')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        );\n    },\n    (prevProps, nextProps) => prevProps.open === nextProps.open\n);\n","import { AppDispatch, RootState } from '../index';\nimport { getYShareMTR } from '../../methods';\nimport { StationDict } from '../../constants/constants';\nimport { setStationsBulk } from './action';\n\nexport const removeStation = (stationId: string) => {\n    // return is successfully removed station\n    return (dispatch: AppDispatch, getState: () => RootState): boolean => {\n        const stationList = getState().param.stn_list;\n\n        const { parents, children } = stationList[stationId];\n\n        if (Object.keys(stationList).length === 4) {\n            console.log('removeStation():: failed as only 2 stations remaining');\n            return false;\n        } else if (parents.length === 2 && children.length === 2) {\n            // Todo: rewrite, join two branches rather than reject?\n            console.log('removeStation():: failed as branches on both sides cannot be combined');\n            return false;\n        }\n\n        // reject if station is the last one on main branch\n        const isNotLastMainBranchStn = Object.keys(stationList).some(\n            id => ![stationId, 'linestart', 'lineend'].includes(id) && getYShareMTR(id, stationList) === 0\n        );\n        if (!isNotLastMainBranchStn) {\n            console.log('removeStation():: failed as selected station is the only station without siblings');\n            return false;\n        }\n\n        let newStnList = JSON.parse(JSON.stringify(stationList)) as StationDict;\n\n        if (parents.length === 2 || children.length === 2) {\n            /**\n             * stn1 - stn2 - stn3\n             *         ^   \\\n             *               stn4\n             */\n            parents.forEach(parId => {\n                newStnList[parId].children = children;\n            });\n            children.forEach(childId => {\n                newStnList[childId].parents = parents;\n            });\n            if (parents.length === 1) {\n                newStnList[parents[0]].branch.right = newStnList[stationId].branch.right;\n            }\n            if (children.length === 1) {\n                newStnList[children[0]].branch.left = newStnList[stationId].branch.left;\n            }\n        } else if (stationList[parents[0]].children.length === 2 && stationList[children[0]].parents.length === 2) {\n            /**\n             * stn1 -     stn2    - stn3\n             *      \\      ^      /\n             *        stn4 - stn5\n             */\n            newStnList = {\n                ...stationList,\n                [parents[0]]: {\n                    ...stationList[parents[0]],\n                    children: stationList[parents[0]].children.filter(id => id !== stationId),\n                    branch: {\n                        ...stationList[parents[0]].branch,\n                        right: [],\n                    },\n                },\n                [children[0]]: {\n                    ...stationList[children[0]],\n                    parents: stationList[children[0]].parents.filter(id => id !== stationId),\n                    branch: {\n                        ...stationList[children[0]].branch,\n                        left: [],\n                    },\n                },\n            };\n        } else {\n            /**\n             * stn1 - stn2\n             *      \\\n             *        stn3 - stn4\n             *         ^\n             */\n\n            // parents have length 1\n            parents.forEach(parId => {\n                var idx = newStnList[parId].children.indexOf(stationId);\n                if (children.length) {\n                    newStnList[parId].children[idx] = children[0];\n                } else {\n                    // Right dest\n                    newStnList[parId].children.splice(idx, 1);\n                }\n\n                if (newStnList[parId].branch.right[1] === stationId) {\n                    newStnList[parId].branch.right[1] = children[0];\n                }\n            });\n\n            // children have length 1\n            children.forEach(childId => {\n                var idx = newStnList[childId].parents.indexOf(stationId);\n                if (parents.length) {\n                    newStnList[childId].parents[idx] = parents[0];\n                } else {\n                    // Left dest\n                    newStnList[childId].parents.splice(idx, 1);\n                }\n\n                if (newStnList[childId].branch.left[1] === stationId) {\n                    newStnList[childId].branch.left[1] = parents[0];\n                }\n            });\n        }\n\n        delete newStnList[stationId];\n        dispatch(setStationsBulk(newStnList));\n\n        return true;\n    };\n};\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    createStyles,\n    Fab,\n    Icon,\n    ListItemIcon,\n    ListItemText,\n    makeStyles,\n    Menu,\n    MenuItem,\n    Tooltip,\n} from '@material-ui/core';\nimport { useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        fab: {\n            position: 'fixed',\n            right: theme.spacing(2),\n            bottom: theme.spacing(2),\n        },\n    })\n);\n\ninterface Props {\n    onAction: (action: string) => void;\n}\n\nconst StationFabs = React.memo(\n    (props: Props) => {\n        const { t } = useTranslation();\n        const rmgStyle = useAppSelector(store => store.param.style);\n        const classes = useStyles();\n        const [fabEl, setFabEl] = React.useState<null | HTMLElement>(null);\n\n        const handleAction = (action: string) => () => {\n            setFabEl(null);\n            props.onAction(action);\n        };\n\n        return (\n            <>\n                <Tooltip title={t('stations.fabs.tooltip') || ''} aria-label=\"options\">\n                    <Fab color=\"primary\" className={classes.fab} onClick={e => setFabEl(e.target as HTMLElement)}>\n                        <Icon>more_vert</Icon>\n                    </Fab>\n                </Tooltip>\n\n                <Menu anchorEl={fabEl} open={Boolean(fabEl)} onClose={() => setFabEl(null)}>\n                    <MenuItem onClick={handleAction('add')}>\n                        <ListItemIcon>\n                            <Icon>add_box</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.add')} />\n                    </MenuItem>\n                    <MenuItem onClick={handleAction('reverse')}>\n                        <ListItemIcon>\n                            <Icon>cached</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('stations.fabs.reverse')} />\n                    </MenuItem>\n                    {rmgStyle === RmgStyle.GZMTR && (\n                        <MenuItem onClick={handleAction('autonum')}>\n                            <ListItemIcon>\n                                <Icon>filter_1</Icon>\n                            </ListItemIcon>\n                            <ListItemText primary={t('design.autoNum.button')} />\n                        </MenuItem>\n                    )}\n                </Menu>\n            </>\n        );\n    },\n    () => true\n);\n\nexport default StationFabs;\n","import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogTitle, DialogContent, DialogContentText, DialogActions, Button } from '@material-ui/core';\nimport { updateStationNum } from '../../redux/param/action';\nimport { useAppDispatch, useAppSelector } from '../../redux';\n\ninterface Props {\n    open: boolean;\n    onClose: () => void;\n}\n\nconst AutoNumDialog = (props: Props) => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const { branches } = useAppSelector(store => store.helper);\n\n    const handleClick = (action: 'ascend' | 'descend') => {\n        let branch0 = branches[0];\n        branch0.forEach((stnId, i) => {\n            let num: string;\n            if (action === 'ascend') {\n                num = i.toString().padStart(2, '0');\n            } else {\n                num = (branch0.length - 1 - i).toString().padStart(2, '0');\n            }\n            dispatch(updateStationNum(stnId, num));\n            // (window.myLine as RMGLineGZ).updateStnNum(stnId, num);\n        });\n        // props.paramUpdate('stn_list', getParams().stn_list);\n        props.onClose();\n    };\n\n    return React.useMemo(\n        () => (\n            <Dialog onClose={props.onClose} open={props.open}>\n                <DialogTitle>{t('design.autoNum.title')}</DialogTitle>\n                <DialogContent>\n                    <DialogContentText>{t('design.autoNum.msg')}</DialogContentText>\n                </DialogContent>\n                <DialogActions>\n                    <Button onClick={props.onClose} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                    <Button onClick={() => handleClick('ascend')} color=\"primary\">\n                        {t('design.autoNum.ascend')}\n                    </Button>\n                    <Button onClick={() => handleClick('descend')} color=\"primary\">\n                        {t('design.autoNum.descend')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open]\n    );\n};\n\nexport default AutoNumDialog;\n","import React, { useState } from 'react';\nimport { createStyles, Grid, makeStyles } from '@material-ui/core';\nimport StationList from './station-list';\nimport StationAddDialog from './add-diag';\nimport StationEditDialog from './edit-diag';\nimport StationDeleteDialog from './delete-diags';\nimport StationFabs from './fabs';\nimport AutoNumDialog from './auto-num-diag';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { RmgStyle } from '../../constants/constants';\nimport { reverseStations } from '../../redux/param/action';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        gridContainer: {\n            height: '100%',\n            overflow: 'hidden',\n        },\n        gridItem: {\n            height: '100%',\n            overflow: 'auto',\n        },\n    })\n);\n\nconst PanelStations2 = () => {\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n\n    const [stnSelected, setStnSelected] = useState('');\n    const [isOpen, setIsOpen] = useState(false);\n\n    const [isAddDialogOpen, setIsAddDialogOpen] = useState(false);\n    const [isAutoNumDialogOpen, setIsAutoNumDialogOpen] = useState(false);\n\n    const [stnToRemove, setStnToRemove] = useState('');\n    const [isDeleteDialogOpen, setIsDeleteDialogOpen] = useState(false);\n\n    const handleAction = (stnId: string) => (action: 'edit' | 'remove') => {\n        if (action === 'edit') {\n            setStnSelected(stnId);\n            setIsOpen(true);\n        }\n        if (action === 'remove') {\n            if (stnSelected === stnId) setStnSelected('');\n            setStnToRemove(stnId);\n            setIsDeleteDialogOpen(true);\n        }\n    };\n\n    const fabsAction = (action: string) => {\n        if (action === 'add') {\n            setIsAddDialogOpen(true);\n        }\n        if (action === 'reverse') {\n            dispatch(reverseStations());\n        }\n        if (action === 'autonum') {\n            setIsAutoNumDialogOpen(true);\n        }\n    };\n\n    const stnAddDialogClose = (action: 'close' | string) => {\n        setIsAddDialogOpen(false);\n        if (action !== 'close') {\n            setStnSelected(action);\n            setIsOpen(true);\n        }\n    };\n\n    return (\n        <>\n            <Grid container spacing={1} className={classes.gridContainer}>\n                <Grid item xs={12} md={4} className={classes.gridItem}>\n                    <StationList selectedId={stnSelected} onAction={handleAction} />\n                </Grid>\n                <Grid item xs={8} className={classes.gridItem}>\n                    {stnSelected && (\n                        <StationEditDialog open={isOpen} stnId={stnSelected} onClose={() => setIsOpen(false)} />\n                    )}\n                </Grid>\n            </Grid>\n\n            <StationFabs onAction={fabsAction} />\n\n            <StationAddDialog open={isAddDialogOpen} onClose={stnAddDialogClose} />\n            <StationDeleteDialog\n                open={isDeleteDialogOpen}\n                onClose={() => setIsDeleteDialogOpen(false)}\n                stnId={stnToRemove}\n            />\n            {rmgStyle === RmgStyle.GZMTR && (\n                <AutoNumDialog open={isAutoNumDialogOpen} onClose={() => setIsAutoNumDialogOpen(false)} />\n            )}\n        </>\n    );\n};\n\nexport default PanelStations2;\n","import Panel from './panel2';\n\nexport default Panel;\n"],"names":["useStyles","makeStyles","theme","createStyles","listItemNum","marginRight","spacing","fontSize","listItemText","display","alignItems","whiteSpace","overflow","selectedItem","background","palette","action","hover","props","tpo","useAppSelector","store","helper","Paper","List","dense","disablePadding","map","stnId","StationEntry","isSelected","selectedId","onAction","Divider","t","useTranslation","classes","dispatch","useAppDispatch","rmgStyle","param","style","stationInfo","stn_list","name","num","useState","toggleEl","setToggleEl","handleAction","ListItem","className","RmgStyle","Typography","ListItemText","primary","secondary","replace","ListItemSecondaryAction","IconButton","size","onClick","e","currentTarget","Icon","Menu","anchorEl","open","Boolean","onClose","MenuItem","setCurrentStation","getYShareMTR","stnList","includes","parents","length","children","stnPred","indexOf","getRandomId","Math","floor","random","pow","toString","padStart","dialogContent","padding","select","width","marginLeft","React","allLocs","centre","upper","lower","newupper","newlower","prep","setPrep","pivot","setPivot","Object","keys","loc","setLoc","Array","fill","locOK","setLocOK","end","setEnd","endList","setEndList","newLocs","useMemo","y","state","res","unshift","pop","push","shift","newBranchPossibleEnd","newStnPossibleLoc","useEffect","p","handleClick","newId","pivotStationId","getState","stationList","newInfo","secondaryName","services","Services","branch","left","right","transfer","info","tick_direc","ShortDirection","paid_area","osi_names","facility","Facilities","newStnList","JSON","parse","stringify","linestart","slice","forEach","par","child","parChildLen","BranchStyle","lineend","setStationsBulk","addStation","Dialog","DialogTitle","DialogContent","component","ListItemIcon","Select","native","onChange","target","value","variant","formatStnName","key","idx","disabled","DialogActions","Button","color","autoFocus","prevProps","nextProps","NameTab","InterchangeTab","BranchTab","MoreTab","tab","height","minWidth","flexDirection","minHeight","marginBottom","paddingLeft","DialogWrapper","useTheme","isMobile","useMediaQuery","breakpoints","down","fullScreen","dividers","tabIndex","setTabIndex","tabNav","Tabs","indicatorColor","textColor","_","val","scrollButtons","i","Tab","label","icon","role","fallback","CircularProgress","StationDeleteDialog","currentStationIndex","current_stn_idx","isError","setIsError","stationId","console","log","some","id","parId","childId","filter","splice","newCurrentId","DialogContentText","Trans","i18nKey","join","ErrorDialog","memo","fab","position","bottom","fabEl","setFabEl","Tooltip","title","Fab","branches","branch0","updateStationNum","gridContainer","gridItem","stnSelected","setStnSelected","isOpen","setIsOpen","isAddDialogOpen","setIsAddDialogOpen","isAutoNumDialogOpen","setIsAutoNumDialogOpen","stnToRemove","setStnToRemove","isDeleteDialogOpen","setIsDeleteDialogOpen","Grid","container","item","xs","md","reverseStations"],"sourceRoot":""}