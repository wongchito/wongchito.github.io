{"version":3,"file":"static/js/railmapMTR.d30d1039.chunk.js","mappings":"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","sources":["svgs/railmap/methods/mtr.ts","svgs/railmap/methods/share.ts","svgs/mtr/station-name/station-name.tsx","svgs/mtr/station-name/station-name-wrapper.tsx","svgs/railmap/main/station/station-mtr.tsx","svgs/railmap/main/main-mtr.tsx","svgs/railmap/railmap-mtr.tsx","svgs/strip/strip-mtr.tsx"],"sourcesContent":["import { Stations } from './share';\n\nexport class StationsMTR extends Stations {\n    protected leftWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'l') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].parents.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n        return res;\n    };\n\n    protected rightWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'r') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].children.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n        return res;\n    };\n}\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Direction, Name } from '../../../constants/constants';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    align?: Direction;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate, align } = props;\n\n        const nameEl = useRef<SVGGElement>(null);\n\n        useEffect(() => {\n            document.fonts.ready.then(() => onUpdate?.(nameEl.current!.getBBox()));\n        }, [stnName.toString(), align]);\n\n        const getTextAnchor = (direction?: Direction) => {\n            switch (direction) {\n                case Direction.left:\n                    return 'start';\n                case Direction.right:\n                    return 'end';\n                default:\n                    return 'middle';\n            }\n        };\n\n        const getDy = (index: number) => 17 + 11 * index;\n\n        return (\n            <g ref={nameEl} textAnchor={getTextAnchor(align)}>\n                <text className=\"rmg-name__zh rmg-name__mtr--station\">{stnName[0]}</text>\n\n                {stnName[1].split('\\\\').map((txt, i) => (\n                    <text key={i} className=\"rmg-name__en rmg-name__mtr--station\" dy={getDy(i)}>\n                        {txt}\n                    </text>\n                ))}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.stnName.toString() === nextProps.stnName.toString() && prevProps.align === nextProps.align\n);\n","import React, { SVGProps, useState } from 'react';\nimport { Direction, Facilities, Name, StationState } from '../../../constants/constants';\nimport StationName from './station-name';\n\n/**\n * Top (in pixels) of station's Chinese name.\n */\nconst NAME_ZH_TOP = -10.8125;\n/**\n * Height (in pixels) of station's Chinese name.\n */\n// const NAME_ZH_HEIGHT = 21.625;\n/**\n * Top (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_TOP = -8;\n/**\n * Height (in pixels) of station's English name (1 line).\n */\nconst NAME_EN_HEIGHT = 13.21875;\n/**\n * Difference of `y`s of station's Chinese name and English name (1 line). (This number should used as the `dy` of the English `text` element after Chinese `text` elements. )\n */\nconst NAME_ZH_EN_GAP = 17;\n/**\n * Height (in pixels) from the top of station's Chinese name to the bottom of English name (1 line).\n */\nexport const NAME_FULL_HEIGHT = -NAME_ZH_TOP + NAME_ZH_EN_GAP + NAME_EN_HEIGHT + NAME_EN_TOP;\n/**\n * Height (in pixels) of the gap between the centre of the line and the top of station's Chinese name.\n */\nconst STN_NAME_LINE_GAP = 14;\n\ninterface StationNameWrapperProps extends SVGProps<SVGGElement> {\n    stationName: Name;\n    stationState: StationState;\n    facility: Facilities;\n    lower?: boolean;\n    align?: Direction;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { stationName, stationState, lower, align, facility, ...others } = props;\n\n    /**\n     * align = undefined: { x: -40, width: 80 }\n     * align = left: { x: 0, width: 80 }\n     * align = right: { x: -80, width: 80 }\n     */\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return 'var(--rmg-grey)';\n            case StationState.CURRENT:\n                return '#fff';\n            case StationState.FUTURE:\n                return 'var(--rmg-black)';\n        }\n    };\n\n    const nameEnRows = stationName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: align ? (align === Direction.right ? -3 : 3) : 0,\n            y:\n                (lower\n                    ? STN_NAME_LINE_GAP - NAME_ZH_TOP\n                    : -STN_NAME_LINE_GAP - NAME_ZH_TOP - NAME_FULL_HEIGHT - 11 * (nameEnRows - 1)) +\n                (align ? (lower ? 10 : -10) : 0),\n        },\n        rect: {\n            x:\n                bBox.x -\n                3 +\n                (facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? -3 - NAME_FULL_HEIGHT\n                        : 0\n                    : (NAME_FULL_HEIGHT + 5) / 2 - 3 - NAME_FULL_HEIGHT),\n            y: NAME_ZH_TOP - 1,\n            width: bBox.width + 6 + (facility === Facilities.none ? 0 : NAME_FULL_HEIGHT + 3),\n            height: NAME_FULL_HEIGHT + 2 + 11 * (nameEnRows - 1),\n        },\n        use: {\n            x: align\n                ? align === Direction.right\n                    ? -(NAME_FULL_HEIGHT + 2) / 2 - bBox.width - 3\n                    : (NAME_FULL_HEIGHT + 2) / 2 - 2\n                : -(bBox.width + 3) / 2,\n            y: NAME_ZH_TOP - 1 + 5.5 * (nameEnRows - 1),\n        },\n        StationName: {\n            x:\n                facility === Facilities.none\n                    ? 0\n                    : align\n                    ? align === Direction.right\n                        ? 0\n                        : NAME_FULL_HEIGHT + 3\n                    : (NAME_FULL_HEIGHT + 5) / 2,\n            y: 0,\n        },\n    };\n\n    return (\n        <g {...others}>\n            <g fill={getFill(stationState)} transform={`translate(${transforms.g.x},${transforms.g.y})`}>\n                {stationState === StationState.CURRENT && (\n                    <rect\n                        x={transforms.rect.x}\n                        y={transforms.rect.y}\n                        width={transforms.rect.width}\n                        height={transforms.rect.height}\n                        fill=\"var(--rmg-black)\"\n                    />\n                )}\n\n                {facility !== Facilities.none && (\n                    <use\n                        xlinkHref={`#${facility}`}\n                        fill={stationState === StationState.PASSED ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                        x={transforms.use.x}\n                        y={transforms.use.y}\n                    />\n                )}\n\n                <g transform={`translate(${transforms.StationName.x},${transforms.StationName.y})`}>\n                    <StationName stnName={stationName} onUpdate={setBBox} align={align} />\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { useMemo } from 'react';\nimport { Direction, InterchangeInfo, Name, ShortDirection, StationTransfer } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\nimport StationNameWrapper from '../../../mtr/station-name/station-name-wrapper';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    namePos: boolean;\n    stnY?: number;\n}\n\nconst StationMTR = (props: Props) => {\n    const { stnId, stnState, namePos } = props;\n    const stnInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    /**\n     * Arrays of directions of the branches a station has.\n     */\n    const branchPos = useMemo(\n        () => {\n            let pos: ('SE' | 'NE' | 'SW' | 'NW')[] = [];\n            if (stnInfo.branch.right.length) {\n                pos.push(stnInfo.children.indexOf(stnInfo.branch.right[1]) === 1 ? 'SE' : 'NE');\n            }\n            if (stnInfo.branch.left.length) {\n                pos.push(stnInfo.parents.indexOf(stnInfo.branch.left[1]) === 1 ? 'SW' : 'NW');\n            }\n            return pos;\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnInfo.parents.toString(), stnInfo.children.toString(), JSON.stringify(stnInfo.branch)]\n    );\n\n    /**\n     * Affix added to station icon's `href`.\n     */\n    const branchAffix = useMemo(\n        () => {\n            let pos = branchPos;\n            if (pos.length === 0) {\n                return '';\n            }\n            if (pos.includes('NW') && pos.includes('SE')) {\n                return '_bb';\n            }\n            if (pos.includes('NE') && pos.includes('SW')) {\n                return '_bb';\n            }\n            return '_b';\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branchPos.toString()]\n    );\n\n    /**\n     * Changes of vertical position of station icon due to branching shift (11px/line width). Icon rotation should also be applied when using this property.\n     */\n    const branchDy = useMemo(\n        () => {\n            let affix = branchAffix;\n            if (affix === '') {\n                return 0;\n            } else if (affix === '_bb') {\n                return namePos ? 9.68 : -9.68;\n            } else {\n                let pos = branchPos;\n                if (pos.includes('SE') || pos.includes('SW')) {\n                    return namePos ? 9.68 : 0;\n                }\n                if (pos.includes('NE') || pos.includes('NW')) {\n                    return namePos ? 0 : -9.68;\n                }\n            }\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branchPos.toString(), branchAffix, namePos]\n    );\n\n    /**\n     * Changes of vertical position of other elements such as intTick or intName. The result of the ternary operator is the opposite of `this._branchDy`\n     */\n    const branchElDy = useMemo(() => {\n        let affix = branchAffix;\n        if (affix === '') {\n            return 0;\n        } else if (affix === '_bb') {\n            return namePos ? -9.68 : 9.68;\n        } else {\n            let pos = branchPos;\n            if (pos.includes('SE') || pos.includes('SW')) {\n                return namePos ? 0 : 9.68;\n            }\n            if (pos.includes('NE') || pos.includes('NW')) {\n                return namePos ? -9.68 : 0;\n            }\n        }\n    }, [branchAffix, namePos, branchPos]);\n\n    const stnIcon = ((l: number[]) => {\n        const fallback = (n: number) => (n < 11 ? 'int' + (n + 1) : 'int12');\n        if (!l[1]) {\n            if (!l[0]) {\n                return 'stn';\n            } else if (l[0] === 1) {\n                return 'int';\n            } else {\n                return fallback(l[0]);\n            }\n        } else if (l[1] === 1) {\n            return l[0] <= 1 ? 'osi11' : fallback(l[0]);\n        } else if (l[1] === 2) {\n            if (l[0] === 0) {\n                return 'osi12';\n            } else if (l[0] === 1) {\n                if (stnInfo.parents[0] === 'linestart' || stnInfo.children[0] === 'lineend') {\n                    return 'osi22end';\n                } else {\n                    return 'osi22';\n                }\n            } else {\n                return fallback(l[0]);\n            }\n        } else {\n            if (!l[0] || l[0] === 1) {\n                return 'osi12';\n            } else {\n                return fallback(l[0]);\n            }\n        }\n    })(stnInfo.transfer.info.map(val => val.length));\n\n    return (\n        <>\n            <g transform={`translate(0,${branchElDy})`}>\n                <IntTickGroup\n                    variant={stnIcon}\n                    stnTrans={stnInfo.transfer}\n                    stnState={stnState}\n                    namePos={namePos}\n                    end={\n                        stnIcon === 'osi22end'\n                            ? stnInfo.parents[0] === 'linestart'\n                                ? Direction.left\n                                : Direction.right\n                            : undefined\n                    }\n                />\n                {stnIcon.includes('osi') && (\n                    <OSIName\n                        name={stnInfo.transfer.osi_names[0]}\n                        stnState={stnState}\n                        variant={stnIcon}\n                        tickDirec={stnInfo.transfer.tick_direc}\n                        namePos={namePos}\n                        end={\n                            stnIcon === 'osi22end'\n                                ? stnInfo.parents[0] === 'linestart'\n                                    ? Direction.left\n                                    : Direction.right\n                                : undefined\n                        }\n                    />\n                )}\n            </g>\n            <use\n                xlinkHref={'#' + stnIcon + branchAffix}\n                stroke={stnState === -1 ? 'var(--rmg-grey)' : 'var(--rmg-black)'}\n                className={stnInfo.transfer.paid_area ? 'rmg-stn__mtr--paid-osi' : 'rmg-stn__mtr--unpaid-osi'}\n                transform={\n                    `translate(0,${branchDy})` +\n                    `scale(${stnInfo.children[0] === 'lineend' ? 1 : -1},${namePos ? -1 : 1})`\n                }\n            />\n            <StationNameWrapper\n                stationName={stnInfo.name}\n                stationState={stnState}\n                facility={stnInfo.facility}\n                lower={namePos}\n                align={\n                    stnIcon === 'osi22'\n                        ? stnInfo.transfer.tick_direc === ShortDirection.left\n                            ? Direction.left\n                            : Direction.right\n                        : undefined\n                }\n                transform={`translate(0,${branchDy})`}\n            />\n        </>\n    );\n};\n\nexport default StationMTR;\n\ninterface IntTickGroupProps {\n    variant: string;\n    stnTrans: StationTransfer;\n    stnState: -1 | 0 | 1;\n    namePos: boolean;\n    end?: Direction;\n}\n\nconst IntTickGroup = (props: IntTickGroupProps) => {\n    const { variant, stnTrans, stnState, namePos, end } = props;\n    switch (variant) {\n        case 'int':\n            return (\n                <g>\n                    <IntTick intInfo={stnTrans.info[0][0]} stnState={stnState} rotation={namePos ? 180 : 0} />\n                </g>\n            );\n\n        case 'osi11':\n            return (\n                <g transform={`translate(0,${namePos ? -26 : 26})`}>\n                    <IntTick intInfo={stnTrans.info[1][0]} stnState={stnState} rotation={namePos ? 180 : 0} />\n                </g>\n            );\n        case 'osi12':\n            return (\n                <>\n                    {stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            transform={`translate(0,${\n                                !namePos ? 8 + 18 * (i + 1) : -8 - 18 * (stnTrans.info[1].length - i)\n                            })`}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={stnState}\n                                rotation={stnTrans.tick_direc === ShortDirection.right ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi22':\n            return (\n                <>\n                    <g>\n                        <IntTick\n                            intInfo={stnTrans.info[0][0]}\n                            stnState={stnState}\n                            rotation={namePos ? 0 : 180}\n                            nameDX={stnTrans.tick_direc === ShortDirection.right ? 3 : -3}\n                        />\n                    </g>\n                    {stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            transform={`translate(0,${\n                                !namePos ? 8 + 18 * (i + 1) : -8 - 18 * (stnTrans.info[1].length - i)\n                            })`}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={stnState}\n                                rotation={stnTrans.tick_direc === ShortDirection.right ? -90 : 90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        case 'osi22end':\n            return (\n                <>\n                    <g>\n                        <IntTick intInfo={stnTrans.info[0][0]} stnState={stnState} rotation={namePos ? 180 : 0} />\n                    </g>\n                    {stnTrans.info[1].map((intInfo, i) => (\n                        <g\n                            key={i}\n                            transform={`translate(${end === Direction.left ? -41 : 41},${\n                                namePos ? 18 * i : -18 * (stnTrans.info[1].length - 1 - i)\n                            })`}\n                        >\n                            <IntTick\n                                intInfo={intInfo}\n                                stnState={stnState}\n                                rotation={end === Direction.left ? 90 : -90}\n                            />\n                        </g>\n                    ))}\n                </>\n            );\n        default:\n            if (variant.includes('int')) {\n                return (\n                    <>\n                        {stnTrans.info[0].map((intInfo, i) => (\n                            <g\n                                key={i}\n                                style={{\n                                    transform: `translateY(${\n                                        !namePos ? 18 * (i + 1) : -18 * (stnTrans.info[0].length - i)\n                                    }px)`,\n                                }}\n                            >\n                                <IntTick\n                                    intInfo={intInfo}\n                                    stnState={stnState}\n                                    rotation={stnTrans.tick_direc === ShortDirection.right ? -90 : 90}\n                                />\n                            </g>\n                        ))}\n                    </>\n                );\n            } else {\n                return <></>;\n            }\n    }\n};\n\ninterface IntTickProps {\n    intInfo: InterchangeInfo;\n    stnState: -1 | 0 | 1;\n    rotation: 0 | 90 | 180 | -90;\n    nameDX?: number;\n}\n\nconst IntTick = (props: IntTickProps) => {\n    const { intInfo, stnState, rotation, nameDX } = props;\n\n    const nameZHLns = intInfo[4].split('\\\\').length;\n    const nameENLns = intInfo[5].split('\\\\').length;\n\n    const x = (rotation => {\n        switch (rotation) {\n            case 90:\n                return -24;\n            case -90:\n                return 24;\n            default:\n                return 0;\n        }\n    })(rotation);\n\n    const y = (rotation => {\n        switch (rotation) {\n            case 0:\n                return 25 + 5.953125;\n            case 180:\n                return -25 + 5.953125 - 18.65625 - 10 * (nameZHLns - 1) - 7 * (nameENLns - 1);\n            default:\n                return 5.953125 - (19.65625 + 10 * (nameZHLns - 1) + 7 * (nameENLns - 1) - 1) / 2;\n        }\n    })(rotation);\n\n    const textAnchor = (rotation => {\n        switch (rotation) {\n            case 90:\n                return 'end';\n            case -90:\n                return 'start';\n            default:\n                if (!nameDX) {\n                    return 'middle';\n                } else if (nameDX > 0) {\n                    return 'start';\n                } else {\n                    return 'end';\n                }\n        }\n    })(rotation);\n\n    return useMemo(\n        () => (\n            <>\n                <use\n                    xlinkHref=\"#inttick\"\n                    stroke={intInfo[2]}\n                    transform={`rotate(${rotation})`}\n                    className={'rmg-line rmg-line__mtr rmg-line__change' + (stnState === -1 ? ' rmg-line__pass' : '')}\n                />\n                <g\n                    textAnchor={textAnchor}\n                    transform={`translate(${x + (nameDX || 0)},${y})`}\n                    className={`Name ${stnState === -1 ? 'Pass' : 'Future'}`}\n                >\n                    {intInfo[4].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__zh IntName\" dy={10 * i}>\n                            {txt}\n                        </text>\n                    ))}\n                    {intInfo[5].split('\\\\').map((txt, i) => (\n                        <text key={nameZHLns + i} className=\"rmg-name__en IntName\" dy={nameZHLns * 10 - 1 + 7 * i}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [intInfo.toString(), rotation, stnState]\n    );\n};\n\ninterface OSINameProps {\n    name: Name;\n    stnState: -1 | 0 | 1;\n    variant: string;\n    tickDirec: ShortDirection;\n    namePos: boolean;\n    end?: Direction;\n}\n\nconst OSIName = (props: OSINameProps) => {\n    const { name, stnState, variant, tickDirec, namePos, end } = props;\n\n    const textAnchor = (variant => {\n        switch (variant) {\n            case 'osi11':\n                return tickDirec === ShortDirection.left ? 'end' : 'start';\n            case 'osi22':\n                return tickDirec === ShortDirection.left ? 'start' : 'end';\n            default:\n                return 'middle';\n        }\n    })(variant);\n\n    const x = (variant => {\n        switch (variant) {\n            case 'osi11':\n                return tickDirec === ShortDirection.left ? -13 : 13;\n            case 'osi22':\n                return tickDirec === ShortDirection.left ? 13 : -13;\n            case 'osi22end':\n                return end === Direction.left ? -41 : 41;\n            default:\n                return 0;\n        }\n    })(variant);\n\n    const y = (variant => {\n        switch (variant) {\n            case 'osi11':\n                return (\n                    (!namePos ? 26 : -26) +\n                    8.34375 -\n                    25.03125 / 2 -\n                    (!namePos ? 0 : 10 * (name?.[1]?.split('\\\\').length - 1))\n                );\n            case 'osi12':\n                return !namePos\n                    ? 26 + 18 + 10 + 8.34375\n                    : -(26 + 18 + 10) + 8.34375 - 25.03125 - 10 * (name?.[1]?.split('\\\\').length - 1);\n            case 'osi22':\n                return (\n                    (!namePos ? 26 - 18 : -8) -\n                    (namePos ? 18 + 9 : -27) +\n                    8.34375 -\n                    25.03125 / 2 -\n                    5 * (name?.[1]?.split('\\\\').length - 1)\n                );\n            case 'osi22end':\n                return !namePos ? 10 + 8.34375 : -10 + 8.34375 - 25.03125 - 10 * (name?.[1]?.split('\\\\').length - 1);\n            default:\n                return 0;\n        }\n    })(variant);\n\n    return (\n        <g\n            textAnchor={textAnchor}\n            transform={`translate(${x},${y})`}\n            className={`Name ${stnState === -1 ? 'Pass' : 'Future'}`}\n        >\n            <text className=\"rmg-name__zh rmg-name__mtr--osi\">{name?.[0]}</text>\n            {name?.[1]?.split('\\\\').map((txt, i) => (\n                <text key={i} className=\"rmg-name__en rmg-name__mtr--osi\" dy={12 + 10 * i}>\n                    {txt}\n                </text>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport { adjacencyList, criticalPathMethod, getXShareMTR, getStnState } from '../methods/share';\nimport { StationsMTR } from '../methods/mtr';\nimport StationMTR from './station/station-mtr';\nimport { CanvasType, RMGParam, StationDict } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => {\n    var res = 0;\n    let { transfer } = stnList[stnId];\n    let ls = transfer.info.map(val => val.length);\n    if (transfer.tick_direc === 'l') {\n        // int3 or above\n        if (!ls[1] && ls[0] > 1) res += 0.8;\n        // osi except osi22\n        if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n    }\n    if (ls[0] === 1 && ls[1] === 2) {\n        // osi22 not end\n        if (stnList[stnId].parents[0] !== 'linestart' && stnList[stnId].children[0] !== 'lineend') res += 0.8;\n    }\n    // let { type, tick_direc } = stnList[stnId].transfer;\n    // if (tick_direc === 'l' && ['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) res += 0.8;\n    // if (type === 'osi22') res += 0.8;\n    if (stnList[stnId].parents.length === 2) res += 0.4;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n    return res * 2;\n};\n\nconst rightWideFactor = (stnList: StationDict, stnId: string) => {\n    var res = 0;\n    let { transfer } = stnList[stnId];\n    let ls = transfer.info.map(val => val.length);\n    if (transfer.tick_direc === 'r') {\n        // int3 or above\n        if (!ls[1] && ls[0] > 1) res += 0.8;\n        // osi except osi22\n        if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n    }\n    if (ls[0] === 1 && ls[1] === 2) {\n        if (stnList[stnId].parents[0] !== 'linestart' && stnList[stnId].children[0] !== 'lineend') res += 0.8;\n    }\n    // let { type, tick_direc } = stnList[stnId].transfer;\n    // if (tick_direc === 'r' && ['int3', 'osi11', 'osi12', 'osi21', 'osi31'].includes(type)) res += 0.8;\n    // if (type === 'osi22') res += 0.8;\n    if (stnList[stnId].children.length === 2) res += 0.4;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n    return res;\n};\n\nconst getNamePos = (stnId: string, branches: string[][], { isStagger, isFlip }: RMGParam['namePosMTR']) => {\n    if (!isStagger) return isFlip;\n    let res: number;\n    if (branches[0].includes(stnId)) {\n        res = branches[0].indexOf(stnId) % 2;\n    } else {\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        res = (branches[0].indexOf(branchOfStn[0]) + branchOfStn.indexOf(stnId) + 1) % 2;\n    }\n    return res === 0 ? isFlip : !isFlip;\n};\n\nconst MainMTR = () => {\n    const { branches, routes, depsStr: deps } = useAppSelector(store => store.helper);\n\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const yPercentage = useAppSelector(store => store.param.y_pc);\n    const paddingPercentage = useAppSelector(store => store.param.padding);\n    const branchSpacing = useAppSelector(store => store.param.branch_spacing);\n    const direction = useAppSelector(store => store.param.direction);\n    const namePosition = useAppSelector(store => store.param.namePosMTR);\n\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const adjMat = adjacencyList(stationList, leftWideFactor, rightWideFactor);\n\n    const criticalPath = useMemo(\n        () => criticalPathMethod('linestart', 'lineend', adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n    const realCP = useMemo(\n        () => criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [JSON.stringify(adjMat)]\n    );\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n        svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => StationsMTR.getYShares(stationList, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: -yShares[cur] * branchSpacing + (branches[0].includes(cur) ? 0 : yShares[cur] > 0 ? -9.68 : 9.68),\n        }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const namePoss = Object.keys(stationList).reduce<{ [stnId: string]: boolean }>(\n        (acc, id) => ({ ...acc, [id]: getNamePos(id, branches, namePosition) }),\n        {}\n    );\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        stationList,\n        lineXs,\n        xs,\n        ys,\n        branchSpacing,\n        criticalPath\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Lines paths={linePaths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} namePoss={namePoss} />\n        </g>\n    );\n};\n\nexport default MainMTR;\n\nconst Lines = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => {\n        return (\n            <g fill=\"none\" strokeWidth={9.68}>\n                <g stroke=\"var(--rmg-grey)\">\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n                <g stroke=\"var(--rmg-theme-colour)\">\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    namePoss: { [stnId: string]: boolean };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates, namePoss } = props;\n\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationMTR stnId={stnId} stnState={stnStates[stnId]} namePos={namePoss[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React, { memo } from 'react';\n\nimport StripMTR from '../strip/strip-mtr';\nimport MainMTR from './main/main-mtr';\n\nexport default memo(function RailMapMTR() {\n    return (\n        <>\n            <DefsMTR />\n\n            <StripMTR stripPc={90} />\n            <MainMTR />\n        </>\n    );\n});\n\nconst DefsMTR = React.memo(() => {\n    return (\n        <defs>\n            <g id=\"airport\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} height={58.67798} width={58.67798} />\n                <path\n                    id=\"airport\"\n                    d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                    transform=\"translate(-28.9697,0.14347)\"\n                    fill=\"white\"\n                />\n            </g>\n            <g id=\"disney\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <path\n                    fill=\"white\"\n                    d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                    transform=\"translate(-28.9697 0.13398)\"\n                />\n            </g>\n            <clipPath id=\"hsr-clip-path\" transform=\"translate(-0.00057 0.01643)\">\n                <path\n                    fill=\"none\"\n                    d=\"M5.1606.89861a3.67176,3.67176,0,0,0-3.676,3.667v48.966a3.67842,3.67842,0,0,0,3.676,3.692h48.443a3.67892,3.67892,0,0,0,3.678-3.692V4.5656a3.67227,3.67227,0,0,0-3.678-3.667Z\"\n                />\n            </clipPath>\n            <g id=\"hsr\" transform=\"scale(0.5970084519)\">\n                <rect x={-29.33899} width={58.67798} height={58.67798} />\n                <g clipPath=\"url(#hsr-clip-path)\" transform=\"translate(-29.33899,0)\">\n                    <rect\n                        x={-3.25242}\n                        y={24.74141}\n                        width={61.75879}\n                        height={0.98008}\n                        transform=\"translate(-8.93747 17.31321) rotate(-30.16134)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M5.77169,48.97289c-2.17407-3.89294,2.56994-10.525,4.85-13.724l.173-.248a83.00826,83.00826,0,0,1,7.39294-9.285,97.384,97.384,0,0,1,11.082-9.958c7.051-6.045,15.832-5.876,16.447-5.894l11.785-.957.276,17.42-11.5271,10.586c-.36.39405-5.553,5.863-18.10193,11.035-6.752,2.783-11.877,4.146-15.66,4.146-3.301,0-5.561-1.049-6.71692-3.121\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"57.453 29.614 32.426 58.31 35.582 58.509 57.584 30.433 57.453 29.614\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M49.04708,11.61364a.94277.94277,0,0,0-.17407-.227c-.752-.93695-2.988-1.259-5.933-.793a25.98382,25.98382,0,0,0-9.99695,3.032A98.52916,98.52916,0,0,0,20.723,23.69768c-3.1759,3.487-4.645,6.388-3.62292,7.584,1.84,2.166,13.7539.716,22.00793-6.066,9.035-7.42,10.718-11.577,9.93909-13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M34.65255,13.81182c5.65991-2.842,11.28088-2.856,12.1499-1.213.88306,1.652-2.99792,5.303-8.656,8.128-5.648,2.837-10.9469,3.805-11.81994,2.15-.873-1.641,2.668-6.237,8.326-9.065\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M58.10958,25.03454c-16.832,20.708-40.7301,26.038-40.7301,26.038,11-6.73,12.769-8.111,18.968-18.01,8.364-13.351,21.77808-21.549,21.912-21.63,0,0-.068,13.5-.1499,13.602\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M27.1877,26.69561l9.705-2.814a6.22768,6.22768,0,0,1-1.994,2.759,25.57277,25.57277,0,0,1-6.697,3.405,11.78221,11.78221,0,0,1-5.5.783Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M19.59005,25.97692a18.37656,18.37656,0,0,1,3.891-3.976,6.66452,6.66452,0,0,0-.30908,2.213l-4.391,4.829a6.18212,6.18212,0,0,1,.80908-3.066\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <polygon\n                        points=\"23.156 58.311 57.463 26.746 57.396 25.857 21.582 58.607 23.156 58.311\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M60.15645,12.35973a68.6782,68.6782,0,0,0-12.602,9.542c-8.15,7.745-12.109,15.259-9.855,16.091,2.24793.816,10.678-4.782,18.83594-12.543,1.828-1.74,3.48-3.424,4.926-5.024Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                        fill=\"white\"\n                    />\n                    <path\n                        d=\"M63.07638,11.82653a40.86955,40.86955,0,0,0-10,7.096c-5.90406,5.437-9.48609,11.105-7.848,11.742,1.657.631,8.28894-3.955,14.188-9.401a61.76591,61.76591,0,0,0,4.61694-4.705Z\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                    <path\n                        d=\"M12.67989,42.93969a9.87,9.87,0,0,0-5.754-1.895c-.113.22-.223.439-.33008.662a9.45046,9.45046,0,0,1,5.69507,1.749,6.27885,6.27885,0,0,1,2.61,6.305,10.16524,10.16524,0,0,1-.598,2.228c.238-.023.481-.053.725-.087.78308-2.249,1.394-6.184-2.3479-8.962\"\n                        transform=\"translate(-0.00057 0.01643)\"\n                    />\n                </g>\n            </g>\n\n            <circle id=\"stn\" r={8} className=\"rmg-stn__mtr\" />\n            <path\n                id=\"stn_b\"\n                className=\"rmg-stn__mtr\"\n                d=\"M-6.369803765,4.84a8,8,0,1,1,12.73960753,0a8,8,0,1,1-12.73960758,0Z\"\n            />\n            <path\n                id=\"stn_bb\"\n                d=\"M-6.369803765,4.84a8,8,0,1,1,12.73960753,0a8,8,0,0,1,0,9.68a8,8,0,1,1-12.73960753,0a8,8,0,0,1,0,-9.68Z\"\n                className=\"rmg-stn__mtr\"\n            />\n            <use id=\"int\" xlinkHref=\"#stn\" />\n            <use id=\"int_b\" xlinkHref=\"#stn_b\" />\n            <use id=\"int_bb\" xlinkHref=\"#stn_bb\" />\n            <path id=\"int2\" d=\"M -8,0 v 18 a 8,8 0 0,0 16,0 v -18 a 8,8 0 0,0 -16,0 Z\" className=\"rmg-stn__mtr\" />\n\n            {[3, 4, 5, 6, 7, 8, 9, 10, 11, 12].map(n => {\n                let h = 18 * (n - 1);\n                return (\n                    <React.Fragment key={n}>\n                        <path\n                            id={`int${n}`}\n                            d={`M-8,0v${h}a8,8,0,0,0,16,0v-${h}a8,8,0,0,0-16,0Z`}\n                            className=\"rmg-stn__mtr\"\n                        />\n                        <path\n                            id={`int${n}_b`}\n                            className=\"rmg-stn__mtr\"\n                            d={`M-8,9.68v${h}a8,8,0,0,0,16,0v-${h}a8,8,0,0,0-1.630196235-4.84a8,8,0,1,0-12.73960758,0a8,8,0,0,0-1.630196235,4.84Z`}\n                        />\n                        <path\n                            id={`int${n}_bb`}\n                            className=\"rmg-stn__mtr\"\n                            d={`M-8,19.36v${h}a8,8,0,0,0,16,0v-${h}a8,8,0,0,0-1.630196235-4.84a8,8,0,0,0,0-9.68a8,8,0,1,0-12.73960758,0a8,8,0,0,0,0,9.68a8,8,0,0,0-1.630196235,4.84Z`}\n                        />\n                    </React.Fragment>\n                );\n            })}\n\n            <g id=\"osi11\">\n                <path d=\"M0,0V26\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#stn\" y={26} />\n            </g>\n            <g id=\"osi11_b\">\n                <path d=\"M0,0V35.68\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#stn\" y={35.68} />\n            </g>\n            <g id=\"osi11_bb\">\n                <path d=\"M0,0V45.36\" />\n                <use xlinkHref=\"#stn_bb\" />\n                <use xlinkHref=\"#stn\" y={45.36} />\n            </g>\n\n            <g id=\"osi12\">\n                <path d=\"M0,0V26\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#int2\" y={26} />\n            </g>\n            <g id=\"osi12_b\">\n                <path d=\"M0,11V35.68\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#int2\" y={35.68} />\n            </g>\n            <g id=\"osi12_bb\">\n                <path d=\"M0,11V45.36\" />\n                <use xlinkHref=\"#stn_bb\" />\n                <use xlinkHref=\"#int2\" y={45.36} />\n            </g>\n            <use id=\"osi22\" xlinkHref=\"#osi12\" />\n            <use id=\"osi22_b\" xlinkHref=\"#osi12_b\" />\n            <use id=\"osi22_bb\" xlinkHref=\"#osi12_bb\" />\n\n            <g id=\"osi22end\">\n                <path d=\"M0,0H41\" />\n                <use xlinkHref=\"#stn\" />\n                <use xlinkHref=\"#int2\" x={41} y={-18} />\n            </g>\n            <g id=\"osi22end_b\">\n                <path d=\"M0,9.68H41\" />\n                <use xlinkHref=\"#stn_b\" />\n                <use xlinkHref=\"#int2\" x={41} y={-8.32} />\n            </g>\n\n            <path id=\"inttick\" d=\"M0,0v17\" strokeLinecap=\"round\" />\n        </defs>\n    );\n});\n","import React, { memo } from 'react';\n\nexport default memo(function StripMTR(props: { stripPc: number }) {\n    return (\n        <rect\n            fill=\"var(--rmg-theme-colour)\"\n            height={20}\n            style={{\n                width: 'var(--rmg-svg-width)',\n                ['--strip-percentage' as any]: props.stripPc,\n                transform: `translateY(calc(var(--strip-percentage, 95) * var(--rmg-svg-height) / 100 - 10px))`,\n            }}\n        />\n    );\n});\n"],"names":["StationsMTR","leftWideFactor","stnId","res","transfer","stnList","ls","info","map","val","length","tick_direc","parents","children","rightWideFactor","Stations","adjacencyList","leftW","rightW","Object","keys","reduce","acc","cur","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","indexOf","getXShareMTR","branches","criticalPath","includes","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","data","yShares","xShares","namePoss","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","stnPred","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","i","lineMainStns","linePassStns","_linePath","drawLine","memo","props","stnName","onUpdate","align","nameEl","useRef","useEffect","document","fonts","ready","then","current","getBBox","toString","ref","textAnchor","Direction","getTextAnchor","className","split","txt","dy","index","prevProps","nextProps","StationNameWrapper","stationName","stationState","lower","facility","others","useState","width","bBox","setBBox","nameEnRows","transforms","g","STN_NAME_LINE_GAP","rect","Facilities","NAME_ZH_TOP","NAME_FULL_HEIGHT","height","use","StationName","fill","state","StationState","getFill","transform","xlinkHref","stnState","namePos","stnInfo","useAppSelector","store","param","stn_list","branchPos","useMemo","pos","right","left","JSON","stringify","branchAffix","branchDy","branchElDy","stnIcon","l","fallback","n","IntTickGroup","variant","stnTrans","end","undefined","OSIName","name","osi_names","tickDirec","stroke","paid_area","IntTick","intInfo","rotation","nameDX","style","nameZHLns","nameENLns","helper","deps","depsStr","svgWidths","svgWidth","yPercentage","y_pc","paddingPercentage","padding","branch_spacing","namePosition","namePosMTR","currentStationIndex","current_stn_idx","stationList","realCP","CanvasType","id","isStagger","isFlip","getNamePos","Lines","paths","StationGroup","React","strokeWidth","d","DefsMTR","stripPc","clipPath","points","r","h","strokeLinecap"],"sourceRoot":""}