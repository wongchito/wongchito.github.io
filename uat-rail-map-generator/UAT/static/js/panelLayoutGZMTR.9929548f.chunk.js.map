{"version":3,"file":"static/js/panelLayoutGZMTR.9929548f.chunk.js","mappings":"sSAkBMA,GAAYC,EAAAA,EAAAA,IAAW,SAAAC,GAAK,OAC9BC,EAAAA,EAAAA,GAAa,CACTC,WAAY,CACRC,YAAaH,EAAMI,QAAQ,IAE/BC,OAAQ,CACJC,MAAO,IACPC,WAAY,EACZC,YAAa,QAKzB,UAAeC,EAAAA,MAAW,WACtB,OACI,iCACI,SAAC,IAAD,KACA,SAACC,EAAD,UAKZ,IAAMA,EAAgB,WAClB,IAAQC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,EAAUf,IACVgB,GAAWC,EAAAA,EAAAA,MAEXC,GAAsBC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,kBAC1DC,GAAsBJ,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMG,kBAEhE,EAA4Bb,EAAAA,UAAe,GAA3C,eAAOc,EAAP,KAAeC,EAAf,KAEA,OAAOf,EAAAA,SAAc,WASjB,OACI,iCACI,UAAC,IAAD,CAAUgB,QAAM,EAACC,QAAS,kBAAMF,GAAU,SAAAG,GAAQ,OAAKA,MAAvD,WACI,SAAC,IAAD,WACI,SAAC,IAAD,2BAEJ,SAAC,IAAD,CAAcC,QAASjB,EAAE,8BACxBY,GAAS,SAAC,IAAD,CAAMM,MAAM,SAAZ,0BAA0C,SAAC,IAAD,CAAMA,MAAM,SAAZ,6BAExD,SAAC,IAAD,CAAUC,GAAIP,EAAQQ,eAAa,EAAnC,UACI,UAAC,IAAD,CAAMC,UAAU,MAAMC,gBAAc,EAACC,UAAWrB,EAAQX,WAAxD,WACI,UAAC,IAAD,YACI,SAAC,IAAD,CAAc0B,QAASjB,EAAE,oCACzB,SAAC,IAAD,CACIuB,UAAWrB,EAAQR,OACnB8B,MAAOnB,EACPoB,SAxBF,SAACC,EAAoBF,GACvCrB,GAASwB,EAAAA,EAAAA,IAAuBH,KAwBZI,KAAM,IACNC,MAAO,CACH,CAAEL,MAAO,EAAGM,MAAO9B,EAAE,4BACrB,CAAEwB,MAAO,IAAKM,MAAO9B,EAAE,8BAE3B+B,kBAAkB,aAG1B,SAAC,IAAD,CAASC,QAAQ,YACjB,UAAC,IAAD,YACI,SAAC,IAAD,CAAcf,QAASjB,EAAE,kCACzB,SAAC,IAAD,CACIuB,UAAWrB,EAAQR,OACnB8B,MAAOd,EACPe,SAnCF,SAACC,EAAoBF,GACvCrB,GAAS8B,EAAAA,EAAAA,IAAuBT,KAmCZI,KAAM,IACNC,MAAO,CACH,CAAEL,MAAO,EAAGM,MAAO9B,EAAE,2BACrB,CAAEwB,MAAO,IAAKM,MAAO9B,EAAE,+BAE3B+B,kBAAkB,sBAO3C,CAAC1B,EAAqBK,EAAqBE,EAAQV,EAAQX,WAAYW,EAAQR,OAAQM,EAAGG","sources":["panels/layout/gzmtr.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Slider,\n    ListItem,\n    ListItemText,\n    Icon,\n    Collapse,\n    makeStyles,\n    createStyles,\n    List,\n    ListItemIcon,\n    Divider,\n} from '@material-ui/core';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { ChangeEvent } from 'react';\nimport { setDirectionIndicatorX, setDirectionIndicatorY } from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        nestedList: {\n            paddingLeft: theme.spacing(5),\n        },\n        slider: {\n            width: 168,\n            marginLeft: 8,\n            marginRight: 8,\n        },\n    })\n);\n\nexport default React.memo(function LayoutGZMTR() {\n    return (\n        <>\n            <Divider />\n            <DirectionGZLi />\n        </>\n    );\n});\n\nconst DirectionGZLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const directionIndicatorX = useAppSelector(store => store.param.direction_gz_x);\n    const directionIndicatorY = useAppSelector(store => store.param.direction_gz_y);\n\n    const [isOpen, setIsOpen] = React.useState(false);\n\n    return React.useMemo(() => {\n        const handleXChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch(setDirectionIndicatorX(value as number));\n        };\n\n        const handleYChange = (_: ChangeEvent<{}>, value: number | number[]) => {\n            dispatch(setDirectionIndicatorY(value as number));\n        };\n\n        return (\n            <>\n                <ListItem button onClick={() => setIsOpen(prevOpen => !prevOpen)}>\n                    <ListItemIcon>\n                        <Icon>open_with</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('layout.directionGZ.title')} />\n                    {isOpen ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n                </ListItem>\n                <Collapse in={isOpen} unmountOnExit>\n                    <List component=\"div\" disablePadding className={classes.nestedList}>\n                        <ListItem>\n                            <ListItemText primary={t('layout.directionGZ.horizontal')} />\n                            <Slider\n                                className={classes.slider}\n                                value={directionIndicatorX}\n                                onChange={handleXChange}\n                                step={0.01}\n                                marks={[\n                                    { value: 0, label: t('layout.directionGZ.left') },\n                                    { value: 100, label: t('layout.directionGZ.right') },\n                                ]}\n                                valueLabelDisplay=\"auto\"\n                            />\n                        </ListItem>\n                        <Divider variant=\"middle\" />\n                        <ListItem>\n                            <ListItemText primary={t('layout.directionGZ.vertical')} />\n                            <Slider\n                                className={classes.slider}\n                                value={directionIndicatorY}\n                                onChange={handleYChange}\n                                step={0.01}\n                                marks={[\n                                    { value: 0, label: t('layout.directionGZ.top') },\n                                    { value: 100, label: t('layout.directionGZ.bottom') },\n                                ]}\n                                valueLabelDisplay=\"auto\"\n                            />\n                        </ListItem>\n                    </List>\n                </Collapse>\n            </>\n        );\n    }, [directionIndicatorX, directionIndicatorY, isOpen, classes.nestedList, classes.slider, t, dispatch]);\n};\n"],"names":["useStyles","makeStyles","theme","createStyles","nestedList","paddingLeft","spacing","slider","width","marginLeft","marginRight","React","DirectionGZLi","t","useTranslation","classes","dispatch","useAppDispatch","directionIndicatorX","useAppSelector","store","param","direction_gz_x","directionIndicatorY","direction_gz_y","isOpen","setIsOpen","button","onClick","prevOpen","primary","color","in","unmountOnExit","component","disablePadding","className","value","onChange","_","setDirectionIndicatorX","step","marks","label","valueLabelDisplay","variant","setDirectionIndicatorY"],"sourceRoot":""}