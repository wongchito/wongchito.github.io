{"version":3,"file":"static/js/panelSave.d7f2bd2a.chunk.js","mappings":"4cAqBe,SAASA,IACpB,IAAQC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWC,EAAAA,EAAAA,MAETC,GAAiBC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,OAA/CH,aAER,EAAwBI,EAAAA,UAAe,GAAvC,eAAOC,EAAP,KAAaC,EAAb,KACA,EAA0CF,EAAAA,SAAe,IAAzD,eAAOG,EAAP,KAAsBC,EAAtB,KAwCA,OACI,iCACI,UAACC,EAAA,EAAD,CAAUC,QAAM,EAACC,UAAU,QAAQC,QAAQ,eAA3C,WACI,SAACC,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,6BAEJ,SAACC,EAAA,EAAD,CAAcC,QAASpB,EAAE,0BAE7B,kBACIqB,KAAK,OACLC,OAAO,mBACPC,MAAO,CAAEC,QAAS,QAClBC,GAAG,eACHC,SAnDS,SAACC,GAClBC,QAAQC,IAAIF,EAAMG,OAAOC,MAAO,IACd,IAAIC,SAAQ,SAACC,GAC3B,IAAIC,EAAS,IAAIC,WACjBD,EAAOE,UAAYH,EACnBC,EAAOG,WAAWV,EAAMG,OAAOC,MAAO,OAGrCO,MAAK,SAAAC,GAAC,OAAIC,KAAKC,MAAMF,EAAET,OAAQY,WAC/BJ,MAAK,SAAAK,GACF/B,EAAiB+B,GACjBjC,GAAQ,UA0CZ,SAACkC,EAAD,CAAcnC,KAAMA,EAAMoC,QAtCd,SAACC,GAAD,wBAAoB,yFACrB,UAAXA,EADgC,uBAE/BC,SAASC,eAAe,gBAAqCC,MAAQ,GACtEvC,GAAQ,GAHwB,6BAMrB,WAAXoC,EANgC,iCAQtBI,GAAeC,EAAAA,EAAAA,IAAYxC,GARL,SAStByC,OAAOC,WAAWC,UAAU,WAAYd,KAAKe,UAAUL,IATjC,OAYtBM,EAASC,EAAAA,GAAa9C,EAAcY,OAAOmC,MAAK,SAAAC,GAAC,OAAIA,IAAMvD,KAC3DA,EACAwD,EAAAA,GACN1D,GAAS2D,EAAAA,EAAAA,IAAaL,KACtBM,EAAAA,EAAAA,GAAYZ,GAhBgB,kDAkB5BtB,QAAQmC,MAAR,MAlB4B,2DAsCgBC,QAASrD,OAWrE,SAASiC,EAAaqB,GAClB,IAEwBtB,EAFhB3C,GAAMC,EAAAA,EAAAA,KAAND,EAWR,OACI,UAACkE,EAAA,EAAD,CAAQrB,QAASoB,EAAMpB,QAAQ,SAAUpC,KAAMwD,EAAMxD,KAArD,WACI,SAAC0D,EAAA,EAAD,kCACA,SAACC,EAAA,EAAD,CAAeC,UAAQ,EAAvB,UACI,SAACC,EAAA,EAAD,CAAmB/C,MAAO,CAAEgD,WAAY,YAAxC,SAC2C,IAAtCC,OAAOC,KAAKR,EAAMD,SAASU,OAAe,SAdnC/B,EAc4DsB,EAAMD,QAbhF,uBAAN,OAA8BQ,OAAOC,KAAK9B,EAAMgC,UAAUD,OAAS,EAAnE,6BACUF,OAAOI,QAAQjC,EAAMgC,UAClBE,KAAI,SAAAC,GAAC,MAAK,CAAC,YAAa,WAAWC,SAASD,EAAE,IAAM,GAAKA,EAAE,GAAGE,KAAKC,KAAK,UACxEA,KAAK,QACLC,OACAC,QAAQ,KAAM,YAWvB,UAACC,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CAAQC,QAASrB,EAAMpB,QAAQ,SAAU0C,MAAM,UAA/C,SACKvF,EAAE,oBAEP,SAACqF,EAAA,EAAD,CAAQC,QAASrB,EAAMpB,QAAQ,UAAW0C,MAAM,UAAUC,WAAS,EAAnE,0B,2HCtHT,SAAeC,EAAtB,iDAAO,OAAP,oBAAO,WAAoBC,EAAsBC,GAA1C,oFACCC,EAAOF,EAAMG,QAAQC,QAAQC,MAC7BC,EAAON,EAAMG,QAAQC,QAAQG,QAI7BzC,EAAST,SAASmD,iBAAiB,UAAU,IAC1CH,MAAQI,OAAOP,GAAQxC,OAAOgD,iBAAmBT,EACxDnC,EAAOyC,OAASE,OAAOH,GAAQ5C,OAAOgD,iBAAmBT,EAEzDD,EAAMW,aAAa,QAAS7C,EAAOuC,MAAMO,YACzCZ,EAAMW,aAAa,SAAU7C,EAAOyC,OAAOK,aAEvCC,EAAM/C,EAAOgD,WAAW,OACxBC,UAAU,EAAG,EAAGjD,EAAOuC,MAAOvC,EAAOyC,QAIzCP,EAAMQ,iBAAiB,wCAAwCQ,SAAQ,SAAAC,GAAE,OAAIA,EAAGN,aAAa,YAAa,WAE1GX,EAAMQ,iBAAiB,yBAAyBQ,SAAQ,SAAAC,GAAE,OAAIA,EAAGN,aAAa,YAAa,WAE3FX,EAAMQ,iBAAiB,oCAAoCQ,SAAQ,SAAAC,GAAE,OAAIA,EAAGN,aAAa,YAAa,UAEtGX,EACKQ,iBAAiB,6CACjBQ,SAAQ,SAAAC,GAAE,OAAIA,EAAGN,aAAa,YAAa,YAEhDX,EAAMQ,iBAAiB,yBAAyBQ,SAAQ,SAAAC,GAAE,OAAIA,EAAGN,aAAa,YAAa,UAM3FX,EAAMQ,iBAAiB,eAAeQ,SAAQ,SAAAC,GAC1C,IAAIC,EAAUxD,OAAOyD,iBAAiBF,GACtCA,EAAGN,aAAa,cAAeO,EAAQE,YACvCH,EAAGN,aAAa,OAAQO,EAAQG,MAChCJ,EAAGN,aAAa,oBAAqBO,EAAQI,kBAC7CL,EAAGN,aAAa,cAAeO,EAAQK,YAAc,OAvCtD,kBA4CI,IAAIjF,SAAQ,SAACC,EAASiF,GACzB,IAAMC,EAAM,IAAIC,MAChBD,EAAIE,OAAS,WAET,OADAd,EAAIe,UAAUH,EAAK,EAAG,EAAG3D,EAAOuC,MAAOvC,EAAOyC,QACvChE,EAAQuB,EAAO+D,UAAU,eAEpCJ,EAAIK,QAAUN,EACdC,EAAIM,IAAM,6BAA+BC,KAAKC,SAASC,mBAAmBlC,EAAMmC,iBAnDjF,mEAuDA,SAASC,EAAOC,EAAaC,GAChC,IAAIC,EAAOlF,SAASmF,cAAc,KAEL,kBAAlBD,EAAKE,UACZF,EAAKG,KAAOL,EACZE,EAAKE,SAAWH,EAEhBjF,SAASsF,KAAKC,YAAYL,GAE1BA,EAAKM,QAELxF,SAASsF,KAAKG,YAAYP,IAE1B7E,OAAO3C,KAAKsH,G,aCzCdU,GAAYC,EAAAA,EAAAA,IAAW,SAAAC,GAAK,OAC9BC,EAAAA,EAAAA,GAAa,CACTC,gBAAe,QACXrH,QAAS,OACTsH,SAAU,SACVC,WAAYJ,EAAMK,QAAQ,GAC1BC,cAAeN,EAAMK,QAAQ,GAC7BE,YAAaP,EAAMK,QAAQ,GAC3BG,aAAcR,EAAMK,QAAQ,IAC3BL,EAAMS,YAAYC,KAAK,MAAQ,CAC5BC,cAAe,WAGvBC,cAAe,CACXC,KAAM,GAEVC,eAAgB,CACZC,SAAU,EACVC,WAAY,EACZnI,QAAS,OACT8H,cAAe,SACfM,SAAU,KAEdC,cAAe,CACXrI,QAAS,OACTsI,UAAW,OAEfC,YAAa,CACTC,QAAS,QACT,gBAAiB,CACbjB,WAAY,UAGpBkB,sBAAuB,CACnBzI,QAAS,OACT8H,cAAe,SACfY,eAAgB,iBAEpBC,gBAAiB,CACbC,OAAQ,QAWL,SAASC,EAAcpG,GAClC,IAAQjE,GAAMC,EAAAA,EAAAA,KAAND,EACFsK,EAAU7B,IACVvI,GAAWqK,EAAAA,EAAAA,MAEX5F,GAAWtE,EAAAA,EAAAA,KAAe,SAAAmK,GAAK,OAAIA,EAAM7H,MAAMgC,YAC/C8F,GAAYpK,EAAAA,EAAAA,KAAe,SAAAmK,GAAK,OAAIA,EAAM7H,MAAM8H,aAChDC,GAAsBrK,EAAAA,EAAAA,KAAe,SAAAmK,GAAK,OAAIA,EAAM7H,MAAMgI,mBAC1DC,GAAWvK,EAAAA,EAAAA,KAAe,SAAAmK,GAAK,OAAIA,EAAM7H,MAAMpB,SAErD,GAA0BsJ,EAAAA,EAAAA,UAAS9H,SAASmF,cAAc,QAA1D,eAAOxC,EAAP,KAAcoF,EAAd,KACA,GAAgCD,EAAAA,EAAAA,WAAS,GAAzC,eAAOE,EAAP,KAAiBC,EAAjB,KAEA,GAAoCH,EAAAA,EAAAA,WAAS,GAA7C,eAAOI,EAAP,KAAmBC,EAAnB,KACA,GAA0CL,EAAAA,EAAAA,WAAS,GAAnD,eAAOM,EAAP,KAAsBC,GAAtB,KACA,IAA0BP,EAAAA,EAAAA,UAAS,GAAnC,iBAAOlF,GAAP,MAAc0F,GAAd,MACA,IAA4BR,EAAAA,EAAAA,UAAS,OAArC,iBAAOS,GAAP,MAAeC,GAAf,MAEA,IAAgCV,EAAAA,EAAAA,WAAS,GAAzC,iBAAOW,GAAP,MAAiBC,GAAjB,MACA,IAAkDZ,EAAAA,EAAAA,WAAS,GAA3D,iBAAOa,GAAP,MAA0BC,GAA1B,MAkBMC,GAAYpL,EAAAA,OAAoC,OAGtDqL,EAAAA,EAAAA,YACI,WACI,GAAqB,KAAjB5H,EAAMT,OAGN,OAFAsH,EAAS/H,SAASmF,cAAc,aAChC8C,GAAY,GAIhBc,KAAexJ,MAAK,SAAAyJ,GAChBjB,EAASiB,GACTf,GAAY,QAIpB,CAAC/G,EAAMT,SAQX,IAAMsI,GAAY,mCAAG,2GACO,CAAC,kBAAmB,oBACvCjH,KACG,SAAAmH,GAAG,OACEjJ,SAASkJ,cAAT,cAA8BhI,EAAMT,SAA4BjC,MAC5D2K,iBAAiBF,GACjBG,MAAM,QAAS,MAE3BtH,IAAIsB,QARQ,eACViG,EADU,MAcXL,EAAOhJ,SAASkJ,cAAT,cAA8BhI,EAAMT,SAAW6I,WAAU,IAEjEhG,aAAa,UAAW+F,EAAgBzG,IAAOW,YACpDyF,EAAKxK,MAAM+K,YAAY,MAAO,WAE9B,CAAC,QAASrI,EAAMT,QACXqB,KAAI,SAAA0H,GAAG,aACJ,QACO,WACC,OAAIxJ,SAASmD,iBAAiB,SAASsG,QAAO,SAAAC,GAAC,OAAIA,EAAEhL,KAAO,OAAS8K,KAAK,UAD3E,aACC,EACMG,OACRC,UAED9H,KAAI,SAAA+H,GAAI,OAAIA,EAAKC,WACjB5H,KAAK,QAEbyB,SAAQ,SAAAoG,GACL,IAAIC,EAAIhK,SAASmF,cAAc,SAC/B6E,EAAEC,YAAcF,EAChBf,EAAKkB,QAAQF,MAGrB,UAAAhB,EAAKE,cAAc,6BAAnB,SAA0C5F,aAAa,SAAU4E,EAAa,QAAU,QACxF,UAAAc,EAAKE,cAAc,yBAAnB,SAAsC5F,aAAa,OAAQ8E,EAAgB,OAAS,SAEhFP,IAAasC,EAAAA,GAAAA,IAvCA,2CAyC2B,8BAzC3B,wBAyCDC,EAzCC,EAyCDA,kBAzCC,UA0CUA,EAAkBpB,GA1C5B,QA0CHqB,EA1CG,QA2CHL,EAAIhK,SAASmF,cAAc,UAC/B8E,YAAcI,EAAKnI,KAAK,MAC1B8G,EAAKkB,QAAQF,GA7CJ,kDA+CTM,MAAM,+DACNzL,QAAQmC,MAAR,MAhDS,iCAoDVgI,GApDU,0DAAH,qDA6DZuB,GAAW,mCAAG,WAAOC,GAAP,yFACVC,EAAM,IAAIC,KADA,UAGIF,GAHJ,gEAGLG,EAHK,iBAKNxN,GAASyN,EAAAA,EAAAA,IAAkBD,IALrB,wBAOO5B,KAPP,WAONC,EAPM,OAWZhJ,SAASsF,KAAKC,YAAYyD,GAEpB/D,EAAW,cAAO0F,EAAP,YAAgB/I,EAAS+I,GAAO1I,KAAK,GAArC,YAA2CL,EAAS+I,GAAO1I,KAAK,IAAK4I,WAAW,IAAK,KACvF,QAAXtC,GAdQ,kCAeW7F,EAAKsG,EAAMpG,IAftB,WAeFkI,EAfE,QAgBJC,UAAUC,UAAUhJ,SAAS,WAAc+I,UAAUC,UAAUhJ,SAAS,UAhBpE,kCAiBE,IAAI/C,SAAc,SAAAC,GACpB+L,YAAW,WACPpM,QAAQC,IAAI,6BACZI,MACD,QArBH,QAyBJsL,EAAc7I,OAAS,EAGvB8I,EAAIS,KAAJ,UAAYjG,EAAZ,QAA4B6F,EAAKK,MAAM,WAAW,GAAI,CAAEC,QAAQ,IAEhErG,EAAO+F,EAAD,UAAU7F,EAAV,SA9BF,wBAgCU,QAAXsD,KACPS,EAAKqC,gBAAgB,UACfP,EAAO,6BAA+BnG,KAAKC,SAASC,mBAAmBmE,EAAKlE,aAE9E0F,EAAc7I,OAAS,EACvB8I,EAAIS,KAAJ,UAAYjG,EAAZ,QAA4B6F,EAAKK,MAAM,WAAW,GAAI,CAAEC,QAAQ,IAEhErG,EAAO+F,EAAD,UAAU7F,EAAV,UAvCF,QA4CZjF,SAASsF,KAAKG,YAAYuD,GA5Cd,oJAgDZwB,EAAc7I,OAAS,GAhDX,kCAiDU8I,EAAIa,cAAc,CAAEhN,KAAM,SAjDpC,QAiDNiN,EAjDM,OAkDNtG,EAAW,cAAOyC,EAAU,GAAjB,YAAuBA,EAAU,GAAjC,QAA0CmD,WAAW,IAAK,KAC3E9F,EAAOyG,IAAIC,gBAAgBF,GAAUtG,GAnDzB,yBAuDV9H,GAASyN,EAAAA,EAAAA,IAAkBjD,IAvDjB,gEAAH,sDA0DX+D,GAAc,SAAC3L,GAAD,OAAuE,WACvF,GAAe,2BAAXA,EAEAwK,GADsB,CAAC5C,SAEpB,GAAe,uBAAX5H,EAAiC,CACxC,IAAMyK,EAAgB/I,OAAOC,KAAKE,GAAU6H,QAAO,SAAAkB,GAAK,OAAK,CAAC,YAAa,WAAW3I,SAAS2I,MAC/FJ,GAAYC,GAGhBtJ,EAAMpB,QAAQ,WAGlB,OACI,UAACqB,EAAA,EAAD,CAAQrB,QAAS4L,GAAY,SAAUhO,KAAMwD,EAAMxD,KAAMiO,UAAU,EAAnE,WACI,SAACvK,EAAA,EAAD,UAAcnE,EAAE,yBAChB,iBAAK2O,UAAWrE,EAAQzB,eAAxB,WACI,SAACzE,EAAA,EAAD,CACIwK,wBAAyB,CAAEC,OAAQnJ,EAAMmC,WACzCiH,IAAKlD,GACL+C,UAAWrE,EAAQf,cACnBe,QAAS,CAAEyE,KAAMzE,EAAQP,gBAE7B,gBAAK4E,UAAWrE,EAAQb,eAAxB,UACI,UAACrF,EAAA,EAAD,CAAekG,QAAS,CAAEyE,KAAMzE,EAAQP,aAAe4E,UAAWrE,EAAQL,sBAA1E,WACI,UAAC+E,EAAA,EAAD,CAAMjO,UAAU,MAAMkO,gBAAc,EAApC,WACI,UAACpO,EAAA,EAAD,YACI,SAACM,EAAA,EAAD,CAAcC,QAASpB,EAAE,+BACzB,SAACkP,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CACI5J,MAAM,UACN6J,QAASjE,EACTzJ,SA1LV,SAAC2N,EAAwCD,GAAsB,IAAD,EACpF,UAAA1J,EAAMuG,cAAc,yBAApB,SAAuC5F,aAAa,OAAQ+I,EAAU,OAAS,SAC/EhE,GAAiBgE,IAyLeE,UAAWvE,UAIvB,SAACwE,EAAA,EAAD,CAASC,QAAQ,YACjB,UAAC3O,EAAA,EAAD,YACI,SAACM,EAAA,EAAD,CAAcC,QAASpB,EAAE,0BACzB,SAACkP,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CACI5J,MAAM,UACN6J,QAASnE,EACTvJ,SA3MX,SAAC2N,EAAwCD,GAAsB,IAAD,EACnF,UAAA1J,EAAMuG,cAAc,6BAApB,SAA2C5F,aAAa,SAAU+I,EAAU,QAAU,QACtFlE,EAAckE,IA0MkBE,UAAWvE,UAIvB,SAACwE,EAAA,EAAD,CAASC,QAAQ,YACjB,UAAC3O,EAAA,EAAD,YACI,SAACM,EAAA,EAAD,CAAcC,QAASpB,EAAE,yBACzB,SAACkP,EAAA,EAAD,WACI,SAACO,EAAA,EAAD,CAAQC,QAAM,EAACzM,MAAO0C,GAAOjE,SA1MnC,SAACC,GACvB,IAAIgO,EAAYhO,EAAMG,OAAOmB,MAC7ByC,EAAMW,aAAa,UAAYF,OAAOT,EAAMkK,aAAa,WAAajK,GAASgK,GAAWrJ,YAC1F+E,GAASsE,IAuM6EL,UAAWvE,EAArE,SACK,CACG,IAAM,IAAM,GAAK,IAAM,IAAM,GAAK,GAAK,EAAG,IAAK,KAAM,IAAK,KAAM,EAAG,IAAK,EACxE,EAAG,GACLlG,KAAI,SAAAgL,GAAK,OACP,mBAAoB5M,MAAO4M,EAA3B,UACc,IAARA,GAAaC,QAAQ,GAAK,KADnBD,cAO7B,SAACN,EAAA,EAAD,CAASC,QAAQ,YACjB,UAAC3O,EAAA,EAAD,YACI,SAACM,EAAA,EAAD,CAAcC,QAASpB,EAAE,0BACzB,SAACkP,EAAA,EAAD,WACI,UAACO,EAAA,EAAD,CACIC,QAAM,EACNzM,MAAOqI,GACP5J,SAAU,SAAAa,GAAC,OAAIgJ,GAAUhJ,EAAET,OAAOmB,QAClC1B,MAAO,CAAEwE,MAAO,IAChBuJ,UAAWvE,EALf,WAOI,mBAAQ9H,MAAM,MAAd,kBACA,mBAAQA,MAAM,MAAd,uCAKhB,UAACpC,EAAA,EAAD,CAAUU,MAAO,CAAEyI,QAAS,GAA5B,WACI,SAAC+F,EAAA,EAAD,CACIxK,MAAM,UACNyK,KAAK,QACLZ,QAAS5D,GACT9J,SAAU,SAAC2N,EAAGD,GAAJ,OAAgB3D,GAAY2D,OAE1C,UAACa,EAAA,EAAD,CAAYT,QAAQ,QAApB,UACKxP,EAAE,8BACH,SAACiQ,EAAA,EAAD,CACIlP,UAAU,IACVwE,MAAM,UACNiK,QAAQ,QACRjO,MAAO,CAAE2O,OAAQ,WACjB5K,QAAS,kBAAMqG,IAAqB,IALxC,SAOK3L,EAAE,kCAIX,SAACmQ,EAAD,CAAa1P,KAAMiL,GAAmB7I,QAAS,kBAAM8I,IAAqB,kBAK1F,gBAAKgD,UAAWrE,EAAQT,cAAxB,UACI,UAACzE,EAAA,EAAD,YACI,SAACC,EAAA,EAAD,CACImK,QAAQ,YACRlK,QAASmJ,GAAY,0BACrBlJ,MAAM,UACN+J,UAAWvE,IAAaS,GAJ5B,SAMKxL,EAAE,0CAEP,SAACqF,EAAA,EAAD,CACImK,QAAQ,YACRlK,QAASmJ,GAAY,sBACrBlJ,MAAM,UACN+J,UAAWvE,IAAaS,IAAYZ,IAAasC,EAAAA,GAAAA,MAJrD,SAMKlN,EAAE,uCAEP,SAACqF,EAAA,EAAD,CAAQmK,QAAQ,WAAWlK,QAASmJ,GAAY,SAAUlJ,MAAM,UAAUC,WAAS,EAAnF,SACKxF,EAAE,2BAQ3B,IAAMmQ,EAAc,SAAClM,GACjB,IAAQjE,GAAMC,EAAAA,EAAAA,KAAND,EACR,OAAOoQ,EAAAA,EAAAA,UACH,kBACI,UAAClM,EAAA,EAAD,CAAQzD,KAAMwD,EAAMxD,KAAMoC,QAASoB,EAAMpB,QAAzC,WACI,SAACsB,EAAA,EAAD,UAAcnE,EAAE,+BAChB,UAACoE,EAAA,EAAD,CAAeC,UAAQ,EAAvB,WACI,SAAC4L,EAAA,EAAD,CAAYlP,UAAU,IAAtB,2HAIA,UAACkP,EAAA,EAAD,CAAYlP,UAAU,KAAtB,WACI,UAACkP,EAAA,EAAD,CAAYlP,UAAU,KAAtB,+EACuE,KACnE,SAACkP,EAAA,EAAD,CAAYlP,UAAU,IAAIwE,MAAM,UAAU6C,KAAK,uBAAuBtG,OAAO,SAA7E,yCAFJ,IAKM,KACF,SAACmO,EAAA,EAAD,CAAYlP,UAAU,IAAIwE,MAAM,UAAU6C,KAAK,wBAAwBtG,OAAO,SAA9E,6BAEc,IARlB,KASO,KACH,SAACmO,EAAA,EAAD,CAAYlP,UAAU,IAAIwE,MAAM,UAAU6C,KAAK,yBAAyBtG,OAAO,SAA/E,2CAVJ,0MAiBA,UAACmO,EAAA,EAAD,CAAYlP,UAAU,KAAtB,8EACsE,KAClE,SAACkP,EAAA,EAAD,CACIlP,UAAU,IACVwE,MAAM,UACN6C,KAAK,+BACLtG,OAAO,SAJX,wBAOc,IATlB,MAUQ,KACJ,SAACmO,EAAA,EAAD,CACIlP,UAAU,IACVwE,MAAM,UACN6C,KAAK,mCACLtG,OAAO,SAJX,2BAXJ,6LAsBA,UAACmO,EAAA,EAAD,CAAYlP,UAAU,KAAtB,6EACqE,KACjE,SAACkP,EAAA,EAAD,CACIlP,UAAU,IACVwE,MAAM,UACN6C,KAAK,0CACLtG,OAAO,SAJX,uBAOc,IATlB,+LAcJ,SAACmO,EAAA,EAAD,CAAYlP,UAAU,IAAtB,4FAGA,SAACkP,EAAA,EAAD,CAAYlP,UAAU,IAAtB,iIACA,SAACkP,EAAA,EAAD,CAAYlP,UAAU,IAAIyO,QAAQ,QAAlC,uDAIJ,SAACpK,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,CAAQmK,QAAQ,WAAWjK,MAAM,UAAUD,QAASrB,EAAMpB,QAA1D,SACK7C,EAAE,yBAMnB,CAACiE,EAAMxD,QCtdf,MCWe,SAAsBwD,GACjC,IAAQjE,GAAMC,EAAAA,EAAAA,KAAND,EAEF4K,GAAWvK,EAAAA,EAAAA,KAAe,SAAAmK,GAAK,OAAIA,EAAM7H,MAAMpB,SAC/CnB,GAAeC,EAAAA,EAAAA,KAAe,SAAAmK,GAAK,OAAIA,EAAMjK,IAAIH,gBAEvD,EAAsDI,EAAAA,UAAe,GAArE,eAAO6P,EAAP,KAA4BC,EAA5B,KACA,EAA4B9P,EAAAA,SAAe,IAA3C,eAAOgD,EAAP,KAAe+M,EAAf,KAEM9B,EAAc,SAAC3L,GAAD,OAAoB,WACrB,UAAXA,IACAwN,GAAuB,GACvBC,EAAUzN,IAEdmB,EAAMpB,QAAQ,WAUlB,OACI,iCACI,UAACqB,EAAA,EAAD,CAAQrB,QAAS4L,EAAY,SAAUhO,KAAMwD,EAAMxD,KAAnD,WACI,SAAC0D,EAAA,EAAD,UAAcnE,EAAE,wBAChB,SAACoE,EAAA,EAAD,CAAeC,UAAQ,EAAvB,UACI,SAAC2K,EAAA,EAAD,WACM5O,IAAiBwD,EAAAA,GAAYH,EAAAA,GAAamH,GAAY,CAACxK,IAAeyE,KAAI,SAAAlB,GAAC,OACzE,SAAC9C,EAAA,EAAD,CAAUC,QAAM,EAASwE,QAASmJ,EAAY9K,GAA9C,UACI,SAACxC,EAAA,EAAD,CAAcC,QAASpB,EAAE,eAAiB2D,MADxBA,cAQtC,SAAC0G,EAAD,CAAe5J,KAAM4P,EAAqBxN,QAtBvB,SAACC,GACT,UAAXA,IACAwN,GAAuB,GACvBC,EAAU,MAmB6D/M,OAAQA,Q,WC5BrFgN,GAAiBhQ,EAAAA,MAAW,kBAAM,kCAcxC,IAAMiQ,GAAW,CACbC,GAAI,UACJ,UAAW,uCACX,QAAS,wCAGPC,GAAY,WACd,OAAoB1Q,EAAAA,EAAAA,KAAZD,EAAR,EAAQA,EAAG4Q,EAAX,EAAWA,KAELhG,GAAWvK,EAAAA,EAAAA,KAAe,SAAAmK,GAAK,OAAIA,EAAM7H,MAAMpB,SAC/CoB,GAAQtC,EAAAA,EAAAA,KAAe,SAAAmK,GAAK,OAAIA,EAAM7H,SAE5C,GAAgDkI,EAAAA,EAAAA,WAAS,GAAzD,eAAOgG,EAAP,KAAyBC,EAAzB,KACA,GAAoDjG,EAAAA,EAAAA,WAAS,GAA7D,eAAOkG,EAAP,KAA2BC,EAA3B,KACA,GAAkDnG,EAAAA,EAAAA,WAAS,GAA3D,eAAOoG,EAAP,KAA0BC,EAA1B,KACA,GAAgDrG,EAAAA,EAAAA,WAAS,GAAzD,eAAOsG,EAAP,KAAyBC,EAAzB,KAEMC,EAAS,mCAAG,qFACVpJ,EAAOlF,SAASmF,cAAc,MAC7BE,KAAO,uCAAyCR,mBAAmBpF,KAAKe,UAAUZ,IACvFsF,EAAKE,SAAW,cAAe,IAAImJ,MAAOC,cAAgB,QAC1DtJ,EAAKM,QAJS,2CAAH,qDA+Bf,OACI,4BACI,UAACiJ,EAAA,EAAD,YACI,UAACxC,EAAA,EAAD,CAAMjO,UAAU,MAAhB,WACI,UAACF,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS,kBAAMwL,GAAoB,IAApD,WACI,SAAC7P,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,0BAEJ,SAACC,EAAA,EAAD,CAAcC,QAASpB,EAAE,yBAE7B,SAACD,EAAD,KACA,UAACc,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS+L,EAA1B,WACI,SAACpQ,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,sBAEJ,SAACC,EAAA,EAAD,CAAcC,QAASpB,EAAE,mBAE7B,UAACa,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS,kBAAM0L,GAAsB,IAAtD,WACI,SAAC/P,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,gCAEJ,SAACC,EAAA,EAAD,CAAcC,QAASpB,EAAE,+BAGjC,SAACuP,EAAA,EAAD,KACA,UAACP,EAAA,EAAD,CAAMjO,UAAU,MAAhB,WACI,UAACF,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS,kBAAM4L,GAAqB,IAArD,WACI,SAACjQ,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,uBAEJ,SAACC,EAAA,EAAD,CAAcC,QAASpB,EAAE,qBAAsByR,UAAWzR,EAAE,cAAgB4K,SAEhF,UAAC/J,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS,kBAAM8L,GAAoB,IAApD,WACI,SAACnQ,EAAA,EAAD,WACI,SAACC,EAAA,EAAD,2BAEJ,SAACC,EAAA,EAAD,CACIC,QAASpB,EAAE,oBACXyR,WAAWC,EAAAA,EAAAA,IAAcjB,GAAUG,EAAKe,uBAMxD,SAAC,WAAD,CAAgBC,UAAU,SAACC,EAAA,EAAD,IAA1B,UACI,SAACrB,GAAD,CAAgB/P,KAAMoQ,EAAkBhO,QAAS,kBAAMiO,GAAoB,SAG/E,SAAC,EAAD,CAAcrQ,KAAMsQ,EAAoBlO,QAxEtB,SAACC,GACvBkO,GAAsB,OAyElB,SAACc,GAAD,CAAarR,KAAMwQ,EAAmBpO,QAtErB,SAACC,GACP,UAAXA,GAAsBA,IAAW8H,GAKjCxH,OAAO2O,KAAK,QAAS,MAAO,CACxBC,eAAgB,QAChBC,YAAanP,IAIrBoO,GAAqB,OA2DjB,SAACgB,GAAD,CAAYzR,KAAM0Q,EAAkBtO,QAAS,kBAAMuO,GAAoB,UAUnF,SAASU,GAAY7N,GACjB,IAAQjE,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWqK,EAAAA,EAAAA,MAEXkE,EAAc,SAACzC,GAAD,OAAmB,WACnC9L,GAASiS,EAAAA,EAAAA,IAASnG,IAClB/H,EAAMpB,QAAQmJ,KAGlB,OACI,UAAC9H,EAAA,EAAD,CAAQrB,QAAS,kBAAMoB,EAAMpB,QAAQ,UAAUpC,KAAMwD,EAAMxD,KAA3D,WACI,SAAC0D,EAAA,EAAD,UAAcnE,EAAE,uBAChB,SAACoE,EAAA,EAAD,CAAeC,UAAQ,EAAvB,UACI,SAAC2K,EAAA,EAAD,UACKxK,OAAO4N,OAAOlF,EAAAA,IAAUrI,KAAI,SAAAmH,GAAG,OAC5B,SAAC,MAAD,CAAMqG,GAAI,IAAMrG,EAAezK,MAAO,CAAE+Q,eAAgB,OAAQ/M,MAAO,SAAvE,UACI,SAAC1E,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAASmJ,EAAYzC,GAAtC,UACI,SAAC7K,EAAA,EAAD,CAAcC,QAASpB,EAAE,cAAgBgM,QAFvBA,aAiBlD,SAASkG,GAAWjO,GAChB,OAAoBhE,EAAAA,EAAAA,KAAZD,EAAR,EAAQA,EAAG4Q,EAAX,EAAWA,KAiBX,OACI,UAAC1M,EAAA,EAAD,CAAQrB,QAASoB,EAAMpB,QAASpC,KAAMwD,EAAMxD,KAA5C,WACI,SAAC0D,EAAA,EAAD,UAAcnE,EAAE,sBAChB,SAACoE,EAAA,EAAD,CAAeC,UAAQ,EAAvB,UACI,SAAC2K,EAAA,EAAD,UACMxK,OAAOC,KAAKgM,IAAwC5L,KAAI,SAAAmH,GAAG,OACzD,SAACnL,EAAA,EAAD,CAAUC,QAAM,EAACwE,QAAS,kBArBzBiN,EAqB2CvG,KApB/C4E,EAAK4B,WAGd5B,EAAK6B,eAAeF,GAAMjQ,MAAK,SAAAtC,GAAC,OAAK+C,SAAS2P,MAAQ1S,EAAE,YAExDoD,OAAO2O,KAAK,QAAS,MAAO,CACxBC,eAAgB,WAChBC,YAAaM,IAEjBxP,SAAS4P,gBAAgBtM,aAAa,OAAQkM,SAR9CtO,EAAMpB,UAFM,IAAC0P,GAqBD,UACI,SAACpR,EAAA,EAAD,CAAcC,QAASqP,GAASzE,MADmBA,aCzM/E,ODwBe,WACX,IAAI4G,GAAsBC,EAAAA,EAAAA,IAAAA,CAAkBlC,IAE5C,OACI,SAACmC,EAAA,EAAD,CAAMC,WAAS,EAAC/J,QAAS,EAAGkB,eAAe,SAAS8I,WAAW,SAA/D,UACI,SAACF,EAAA,EAAD,CAAMG,MAAI,EAACC,GAAI,GAAIC,GAAI,EAAGC,GAAI,EAAGC,GAAI,EAArC,UACI,SAACT,EAAD","sources":["panels/save/upload-item.tsx","panels/save/export-diag/utils.ts","panels/save/export-diag/preview-diag.tsx","panels/save/export-diag/index.ts","panels/save/export-diag/dialog.tsx","panels/save/panel.tsx","panels/save/index.ts"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    DialogContentText,\n    DialogActions,\n    Button,\n} from '@material-ui/core';\nimport { useDispatch } from 'react-redux';\nimport { RMGParam, canvasConfig, AllCanvas } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\nimport { selectCanvas } from '../../redux/app/action';\nimport { updateParam } from '../../utils';\nimport { reRenderApp } from '../../index';\n\nexport default function UploadLi() {\n    const { t } = useTranslation();\n    const dispatch = useDispatch();\n\n    const { canvasToShow } = useAppSelector(state => state.app);\n\n    const [open, setOpen] = React.useState(false);\n    const [importedParam, setImportedParam] = React.useState({} as RMGParam);\n\n    const handleUpload = (event: React.ChangeEvent<HTMLInputElement>) => {\n        console.log(event.target.files![0]);\n        let filePromise = new Promise((resolve: (event: ProgressEvent<FileReader>) => void) => {\n            let reader = new FileReader();\n            reader.onloadend = resolve;\n            reader.readAsText(event.target.files![0]);\n        });\n        filePromise\n            .then(e => JSON.parse(e.target!.result as string))\n            .then(param => {\n                setImportedParam(param);\n                setOpen(true);\n            });\n    };\n\n    const handleClose = (action: string) => async () => {\n        if (action === 'close') {\n            (document.getElementById('upload-param') as HTMLInputElement).value = '';\n            setOpen(false);\n            return;\n        }\n        if (action === 'accept') {\n            try {\n                const updatedParam = updateParam(importedParam) as RMGParam;\n                await window.rmgStorage.writeFile('rmgParam', JSON.stringify(updatedParam));\n\n                // reset to AllCanvas if current canvas is not supported in the new style\n                const canvas = canvasConfig[importedParam.style].some(c => c === canvasToShow)\n                    ? canvasToShow\n                    : AllCanvas;\n                dispatch(selectCanvas(canvas));\n                reRenderApp(updatedParam);\n            } catch (err) {\n                console.error(err);\n            }\n        }\n    };\n\n    return (\n        <>\n            <ListItem button component=\"label\" htmlFor=\"upload-param\">\n                <ListItemIcon>\n                    <Icon>folder_open</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('file.open.button')} />\n            </ListItem>\n            <input\n                type=\"file\"\n                accept=\"application/json\"\n                style={{ display: 'none' }}\n                id=\"upload-param\"\n                onChange={handleUpload}\n            />\n            <ImportDialog open={open} onClose={handleClose} content={importedParam} />\n        </>\n    );\n}\n\ninterface ImportDialogProps {\n    onClose: (action: string) => () => void;\n    open: boolean;\n    content: {} | RMGParam;\n}\n\nfunction ImportDialog(props: ImportDialogProps) {\n    const { t } = useTranslation();\n\n    const describeParams = (param: RMGParam) => {\n        return `Number of stations: ${Object.keys(param.stn_list).length - 2}\n                ${Object.entries(param.stn_list)\n                    .map(x => (['linestart', 'lineend'].includes(x[0]) ? '' : x[1].name.join(' - ')))\n                    .join('\\r\\n')\n                    .trim()\n                    .replace(/\\\\/, ' ')}`;\n    };\n\n    return (\n        <Dialog onClose={props.onClose('close')} open={props.open}>\n            <DialogTitle>Your Configuration</DialogTitle>\n            <DialogContent dividers>\n                <DialogContentText style={{ whiteSpace: 'pre-line' }}>\n                    {Object.keys(props.content).length === 0 ? 'empty' : describeParams(props.content as RMGParam)}\n                </DialogContentText>\n            </DialogContent>\n            <DialogActions>\n                <Button onClick={props.onClose('close')} color=\"primary\">\n                    {t('dialog.cancel')}\n                </Button>\n                <Button onClick={props.onClose('accept')} color=\"primary\" autoFocus>\n                    Import\n                </Button>\n            </DialogActions>\n        </Dialog>\n    );\n}\n","export async function test(svgEl: SVGSVGElement, scale: number): Promise<string> {\n    let svgW = svgEl.viewBox.baseVal.width;\n    let svgH = svgEl.viewBox.baseVal.height;\n\n    // svgEl.removeAttribute('height');\n\n    let canvas = document.querySelectorAll('canvas')[0];\n    canvas.width = Number(svgW) * window.devicePixelRatio * scale;\n    canvas.height = Number(svgH) * window.devicePixelRatio * scale;\n\n    svgEl.setAttribute('width', canvas.width.toString());\n    svgEl.setAttribute('height', canvas.height.toString());\n\n    let ctx = canvas.getContext('2d') as CanvasRenderingContext2D;\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // bypass Chrome min font size (to be improved)\n\n    svgEl.querySelectorAll('.rmg-name__en.rmg-name__mtr--station').forEach(el => el.setAttribute('font-size', '11px'));\n\n    svgEl.querySelectorAll('.rmg-name__zh.IntName').forEach(el => el.setAttribute('font-size', '10px'));\n\n    svgEl.querySelectorAll('.rmg-name__en.rmg-name__mtr--osi').forEach(el => el.setAttribute('font-size', '9px'));\n\n    svgEl\n        .querySelectorAll('.rmg-name__en.rmg-name__gzmtr--next2-dest')\n        .forEach(el => el.setAttribute('font-size', '8.5px'));\n\n    svgEl.querySelectorAll('.rmg-name__en.IntName').forEach(el => el.setAttribute('font-size', '7px'));\n\n    // svgEl\n    //     .querySelectorAll('text:not([font-size]), tspan:not([font-size])')\n    //     .forEach((el) => el.setAttribute('font-size', window.getComputedStyle(el).fontSize));\n\n    svgEl.querySelectorAll('text, tspan').forEach(el => {\n        let elStyle = window.getComputedStyle(el);\n        el.setAttribute('font-family', elStyle.fontFamily);\n        el.setAttribute('fill', elStyle.fill);\n        el.setAttribute('dominant-baseline', elStyle.dominantBaseline);\n        el.setAttribute('text-anchor', elStyle.textAnchor || '');\n        // el.removeAttribute('class');\n    });\n\n    // https://stackoverflow.com/questions/46399223/async-await-in-image-loading/52851789\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => {\n            ctx.drawImage(img, 0, 0, canvas.width, canvas.height);\n            return resolve(canvas.toDataURL('image/png'));\n        };\n        img.onerror = reject;\n        img.src = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(svgEl.outerHTML)));\n    });\n}\n\nexport function saveAs(uri: string, filename: string) {\n    var link = document.createElement('a');\n\n    if (typeof link.download === 'string') {\n        link.href = uri;\n        link.download = filename;\n        //Firefox requires the link to be in the body\n        document.body.appendChild(link);\n        //simulate click\n        link.click();\n        //remove the link when done\n        document.body.removeChild(link);\n    } else {\n        window.open(uri);\n    }\n}\n","import React, { useEffect, useMemo, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport JSZip from 'jszip';\nimport {\n    Button,\n    Checkbox,\n    createStyles,\n    Dialog,\n    DialogActions,\n    DialogContent,\n    DialogTitle,\n    Divider,\n    List,\n    ListItem,\n    ListItemSecondaryAction,\n    ListItemText,\n    makeStyles,\n    Select,\n    Switch,\n    Typography,\n} from '@material-ui/core';\n\nimport { test, saveAs } from './utils';\nimport { useAppDispatch, useAppSelector } from '../../../redux';\nimport { RmgStyle } from '../../../constants/constants';\nimport { setCurrentStation } from '../../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        contentWrapper: {\n            display: 'flex',\n            overflow: 'hidden',\n            paddingTop: theme.spacing(1),\n            paddingBottom: theme.spacing(1),\n            paddingLeft: theme.spacing(3),\n            paddingRight: theme.spacing(3),\n            [theme.breakpoints.down('xs')]: {\n                flexDirection: 'column',\n            },\n        },\n        contentCanvas: {\n            flex: 1,\n        },\n        contentControl: {\n            flexGrow: 0,\n            flexShrink: 0,\n            display: 'flex',\n            flexDirection: 'column',\n            minWidth: 250,\n        },\n        contentAction: {\n            display: 'flex',\n            alignSelf: 'end',\n        },\n        contentRoot: {\n            padding: 'unset',\n            '&:first-child': {\n                paddingTop: 'unset',\n            },\n        },\n        contentControlContent: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'space-between',\n        },\n        formControlRoot: {\n            margin: 0,\n        },\n    })\n);\n\ninterface Props {\n    onClose: (action: string) => void;\n    open: boolean;\n    canvas: string;\n}\n\nexport default function PreviewDialog(props: Props) {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const stn_list = useAppSelector(store => store.param.stn_list);\n    const line_name = useAppSelector(store => store.param.line_name);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const rmgStyle = useAppSelector(store => store.param.style);\n\n    const [svgEl, setSvgEl] = useState(document.createElement('svg') as Element as SVGSVGElement);\n    const [isLoaded, setIsLoaded] = useState(false);\n\n    const [showBorder, setShowBorder] = useState(false);\n    const [isTransparent, setIsTransparent] = useState(false);\n    const [scale, setScale] = useState(1);\n    const [format, setFormat] = useState('png');\n\n    const [isAccept, setIsAccept] = useState(false);\n    const [isTermsDialogOpen, setIsTermsDialogOpen] = useState(false);\n\n    const handleShowBorder = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        svgEl.querySelector('rect#canvas-border')?.setAttribute('stroke', checked ? 'black' : 'none');\n        setShowBorder(checked);\n    };\n\n    const handleTransparent = (_: React.ChangeEvent<HTMLInputElement>, checked: boolean) => {\n        svgEl.querySelector('rect#canvas-bg')?.setAttribute('fill', checked ? 'none' : 'white');\n        setIsTransparent(checked);\n    };\n\n    const handleScaleChange = (event: React.ChangeEvent<{ name?: string | undefined; value: unknown }>) => {\n        let nextScale = event.target.value as number;\n        svgEl.setAttribute('height', ((Number(svgEl.getAttribute('height')) / scale) * nextScale).toString());\n        setScale(nextScale);\n    };\n\n    const contentEl = React.useRef<HTMLDivElement | null>(null);\n\n    // wait for svg canvas and fonts to be fully loaded\n    useEffect(\n        () => {\n            if (props.canvas === '') {\n                setSvgEl(document.createElement('svg') as Element as SVGSVGElement);\n                setIsLoaded(false);\n                return;\n            }\n\n            cloneSvgNode().then(elem => {\n                setSvgEl(elem);\n                setIsLoaded(true);\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.canvas]\n    );\n\n    /**\n     * Clone the svg canvas and adjust its properties like heights and border.\n     *\n     * @returns The cloned svg canvas\n     */\n    const cloneSvgNode = async (): Promise<SVGSVGElement> => {\n        let [, thisSVGHeight] = ['--rmg-svg-width', '--rmg-svg-height']\n            .map(\n                key =>\n                    (document.querySelector(`svg#${props.canvas}`) as SVGSVGElement).style\n                        .getPropertyValue(key)\n                        .match(/\\d+/g)![0]\n            )\n            .map(Number);\n\n        // let MAX_WIDTH = Math.min(window.innerWidth, 1412) - 64 - 24 * 2;\n        // let MAX_HEIGHT = window.innerHeight - 64 - 64 - 52 - 8 * 2;\n        // let scaleFactor = Math.min(MAX_WIDTH / thisSVGWidth, MAX_HEIGHT / thisSVGHeight);\n\n        const elem = document.querySelector(`svg#${props.canvas}`)!.cloneNode(true) as SVGSVGElement;\n        // elem.setAttribute('width', (thisSVGWidth * scaleFactor).toString());\n        elem.setAttribute('height', (thisSVGHeight * scale).toString());\n        elem.style.setProperty('all', 'initial');\n\n        ['share', props.canvas]\n            .map(tag =>\n                [\n                    ...(\n                        [...document.querySelectorAll('link')].filter(l => l.id === 'css_' + tag)[0]\n                            ?.sheet as CSSStyleSheet\n                    ).cssRules,\n                ]\n                    .map(rule => rule.cssText)\n                    .join(' ')\n            )\n            .forEach(txt => {\n                let s = document.createElement('style');\n                s.textContent = txt;\n                elem.prepend(s);\n            });\n\n        elem.querySelector('rect#canvas-border')?.setAttribute('stroke', showBorder ? 'black' : 'none');\n        elem.querySelector('rect#canvas-bg')?.setAttribute('fill', isTransparent ? 'none' : 'white');\n\n        if (rmgStyle === RmgStyle.MTR) {\n            try {\n                const { getBase64FontFace } = await import(/* webpackChunkName: \"panelPreviewMTR\" */ './mtr-helper');\n                const uris = await getBase64FontFace(elem);\n                const s = document.createElement('style');\n                s.textContent = uris.join('\\n');\n                elem.prepend(s);\n            } catch (err) {\n                alert('Failed to fonts. Fonts in the exported PNG will be missing.');\n                console.error(err);\n            }\n        }\n\n        return elem;\n    };\n\n    /**\n     * Download svg here.\n     *\n     * @param stn_list_keys Stations that need to be download\n     * @returns Nothing\n     */\n    const downloadSvg = async (stn_list_keys: string[]) => {\n        const zip = new JSZip();\n\n        for (const stnId of stn_list_keys) {\n            // wait for svg elements updated for station A before we dispatch the current station to B.\n            await dispatch(setCurrentStation(stnId));\n\n            const elem = await cloneSvgNode();\n\n            // append svg to the document so the bbox will be loaded correctly\n            // (but not for gzmtr and have no idea why)\n            document.body.appendChild(elem);\n\n            const filename = `rmg.${stnId}.${stn_list[stnId].name[0]}.${stn_list[stnId].name[1]}`.replaceAll(' ', '_');\n            if (format === 'png') {\n                const data = await test(elem, scale);\n                if (navigator.userAgent.includes('Safari') && !navigator.userAgent.includes('Chrome')) {\n                    await new Promise<void>(resolve => {\n                        setTimeout(() => {\n                            console.log('Sleep 1 second for Safari');\n                            resolve();\n                        }, 1000);\n                    });\n                }\n\n                if (stn_list_keys.length > 1) {\n                    // batch download and split base64 for this\n                    // https://stackoverflow.com/questions/31305485/export-resized-image-in-canvas-to-new-jszip-package\n                    zip.file(`${filename}.png`, data.split('base64,')[1], { base64: true });\n                } else {\n                    saveAs(data, `${filename}.png`);\n                }\n            } else if (format === 'svg') {\n                elem.removeAttribute('height');\n                const data = 'data:image/svg+xml;base64,' + btoa(unescape(encodeURIComponent(elem.outerHTML)));\n\n                if (stn_list_keys.length > 1) {\n                    zip.file(`${filename}.svg`, data.split('base64,')[1], { base64: true });\n                } else {\n                    saveAs(data, `${filename}.svg`);\n                }\n            }\n\n            // don't forget to release it after use\n            document.body.removeChild(elem);\n        }\n\n        // generate the zip for batch download\n        if (stn_list_keys.length > 1) {\n            const zipData = await zip.generateAsync({ type: 'blob' });\n            const filename = `rmg.${line_name[0]}.${line_name[1]}.zip`.replaceAll(' ', '_');\n            saveAs(URL.createObjectURL(zipData), filename);\n        }\n\n        // revert to original station\n        await dispatch(setCurrentStation(currentStationIndex));\n    };\n\n    const handleClose = (action: 'close' | 'downloadCurrentStation' | 'downloadAllStation') => () => {\n        if (action === 'downloadCurrentStation') {\n            const stn_list_keys = [currentStationIndex];\n            downloadSvg(stn_list_keys);\n        } else if (action === 'downloadAllStation') {\n            const stn_list_keys = Object.keys(stn_list).filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            downloadSvg(stn_list_keys);\n        }\n\n        props.onClose('close');\n    };\n\n    return (\n        <Dialog onClose={handleClose('close')} open={props.open} maxWidth={false}>\n            <DialogTitle>{t('file.preview.title')}</DialogTitle>\n            <div className={classes.contentWrapper}>\n                <DialogContent\n                    dangerouslySetInnerHTML={{ __html: svgEl.outerHTML }}\n                    ref={contentEl}\n                    className={classes.contentCanvas}\n                    classes={{ root: classes.contentRoot }}\n                />\n                <div className={classes.contentControl}>\n                    <DialogContent classes={{ root: classes.contentRoot }} className={classes.contentControlContent}>\n                        <List component=\"div\" disablePadding>\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.transparent')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        color=\"primary\"\n                                        checked={isTransparent}\n                                        onChange={handleTransparent}\n                                        disabled={!isLoaded}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.border')} />\n                                <ListItemSecondaryAction>\n                                    <Switch\n                                        color=\"primary\"\n                                        checked={showBorder}\n                                        onChange={handleShowBorder}\n                                        disabled={!isLoaded}\n                                    />\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.scale')} />\n                                <ListItemSecondaryAction>\n                                    <Select native value={scale} onChange={handleScaleChange} disabled={!isLoaded}>\n                                        {[\n                                            0.25, 0.33, 0.5, 0.67, 0.75, 0.8, 0.9, 1, 1.1, 1.25, 1.5, 1.75, 2, 2.5, 3,\n                                            4, 5,\n                                        ].map(ratio => (\n                                            <option key={ratio} value={ratio}>\n                                                {(ratio * 100).toFixed(0) + '%'}\n                                            </option>\n                                        ))}\n                                    </Select>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                            <Divider variant=\"middle\" />\n                            <ListItem>\n                                <ListItemText primary={t('file.preview.format')} />\n                                <ListItemSecondaryAction>\n                                    <Select\n                                        native\n                                        value={format}\n                                        onChange={e => setFormat(e.target.value as string)}\n                                        style={{ width: 65 }}\n                                        disabled={!isLoaded}\n                                    >\n                                        <option value=\"png\">PNG</option>\n                                        <option value=\"svg\">SVG (Web Use)</option>\n                                    </Select>\n                                </ListItemSecondaryAction>\n                            </ListItem>\n                        </List>\n                        <ListItem style={{ padding: 0 }}>\n                            <Checkbox\n                                color=\"primary\"\n                                size=\"small\"\n                                checked={isAccept}\n                                onChange={(_, checked) => setIsAccept(checked)}\n                            />\n                            <Typography variant=\"body2\">\n                                {t('file.preview.terms.accept')}\n                                <Typography\n                                    component=\"a\"\n                                    color=\"primary\"\n                                    variant=\"body2\"\n                                    style={{ cursor: 'pointer' }}\n                                    onClick={() => setIsTermsDialogOpen(true)}\n                                >\n                                    {t('file.preview.terms.tandc')}\n                                </Typography>\n                            </Typography>\n\n                            <TermsDialog open={isTermsDialogOpen} onClose={() => setIsTermsDialogOpen(false)} />\n                        </ListItem>\n                    </DialogContent>\n                </div>\n            </div>\n            <div className={classes.contentAction}>\n                <DialogActions>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleClose('downloadCurrentStation')}\n                        color=\"primary\"\n                        disabled={!isLoaded || !isAccept}\n                    >\n                        {t('file.preview.downloadCurrentStation')}\n                    </Button>\n                    <Button\n                        variant=\"contained\"\n                        onClick={handleClose('downloadAllStation')}\n                        color=\"primary\"\n                        disabled={!isLoaded || !isAccept || rmgStyle === RmgStyle.GZMTR}\n                    >\n                        {t('file.preview.downloadAllStations')}\n                    </Button>\n                    <Button variant=\"outlined\" onClick={handleClose('close')} color=\"primary\" autoFocus>\n                        {t('dialog.cancel')}\n                    </Button>\n                </DialogActions>\n            </div>\n        </Dialog>\n    );\n}\n\nconst TermsDialog = (props: { open: boolean; onClose: () => void }) => {\n    const { t } = useTranslation();\n    return useMemo(\n        () => (\n            <Dialog open={props.open} onClose={props.onClose}>\n                <DialogTitle>{t('file.preview.terms.tandc')}</DialogTitle>\n                <DialogContent dividers>\n                    <Typography component=\"p\">\n                        The downloaded image may be modified, published, or used for other purposes, under the following\n                        conditions.\n                    </Typography>\n                    <Typography component=\"ol\">\n                        <Typography component=\"li\">\n                            The layout of the elements on the sign or rail map, is designed by{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.gzmtr.com\" target=\"_blank\">\n                                Guangzhou Metro Corporation\n                            </Typography>\n                            ,{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.mtr.com.hk\" target=\"_blank\">\n                                MTR Corporation\n                            </Typography>{' '}\n                            or{' '}\n                            <Typography component=\"a\" color=\"primary\" href=\"http://www.shmetro.com\" target=\"_blank\">\n                                Shanghai Shentong Metro Group\n                            </Typography>\n                            , depending on your selection. You shall grant appropriate permit or license from the\n                            relevant company above before using the downloaded image for commercial purposes, if it is\n                            required to do so.\n                        </Typography>\n                        <Typography component=\"li\">\n                            The elements including shapes and lines on the image are drawn by{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://github.com/wongchito\"\n                                target=\"_blank\"\n                            >\n                                Chito Wong\n                            </Typography>{' '}\n                            and{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://github.com/thekingofcity\"\n                                target=\"_blank\"\n                            >\n                                thekingofcity\n                            </Typography>\n                            , based on the design standards or rules of the companies listed above. You may use them for\n                            any purposes, but it is recommended to state the name and the link of software alongside.\n                        </Typography>\n                        <Typography component=\"li\">\n                            The fonts of the Chinese characters in MTR style are provided by{' '}\n                            <Typography\n                                component=\"a\"\n                                color=\"primary\"\n                                href=\"https://github.com/ButTaiwan/genyo-font\"\n                                target=\"_blank\"\n                            >\n                                ButTaiwan\n                            </Typography>{' '}\n                            while all others fonts are rendered from local files. You shall grant appropriate permit or\n                            license from the manufacturers before using the downloaded image for commercial purposes.\n                        </Typography>\n                    </Typography>\n                    <Typography component=\"p\">\n                        We reserve the rights, without notice, to modify, add, or remove these terms.\n                    </Typography>\n                    <Typography component=\"p\">本條款及細則暫只提供英文版，敬請原諒。</Typography>\n                    <Typography component=\"p\" variant=\"body2\">\n                        Last modified: 30 Nov 2021, 18:30 UTC\n                    </Typography>\n                </DialogContent>\n                <DialogActions>\n                    <Button variant=\"outlined\" color=\"primary\" onClick={props.onClose}>\n                        {t('dialog.close')}\n                    </Button>\n                </DialogActions>\n            </Dialog>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.open]\n    );\n};\n","import ExportDialog from './dialog';\n\nexport default ExportDialog;\n","import * as React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { Dialog, DialogContent, DialogTitle, List, ListItem, ListItemText } from '@material-ui/core';\n\nimport PreviewDialog from './preview-diag';\nimport { useAppSelector } from '../../../redux';\nimport { AllCanvas, canvasConfig } from '../../../constants/constants';\n\ninterface Props {\n    onClose: (action: string) => void;\n    open: boolean;\n}\n\nexport default function ExportDialog(props: Props) {\n    const { t } = useTranslation();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const canvasToShow = useAppSelector(store => store.app.canvasToShow);\n\n    const [previewDialogOpened, setPreviewDialogOpened] = React.useState(false);\n    const [canvas, setCanvas] = React.useState('');\n\n    const handleClose = (action: string) => () => {\n        if (action !== 'close') {\n            setPreviewDialogOpened(true);\n            setCanvas(action);\n        }\n        props.onClose('close');\n    };\n\n    const previewDialogClose = (action: string) => {\n        if (action === 'close') {\n            setPreviewDialogOpened(false);\n            setCanvas('');\n        }\n    };\n\n    return (\n        <>\n            <Dialog onClose={handleClose('close')} open={props.open}>\n                <DialogTitle>{t('file.export.title')}</DialogTitle>\n                <DialogContent dividers>\n                    <List>\n                        {(canvasToShow === AllCanvas ? canvasConfig[rmgStyle] : [canvasToShow]).map(c => (\n                            <ListItem button key={c} onClick={handleClose(c)}>\n                                <ListItemText primary={t('file.export.' + c)} />\n                            </ListItem>\n                        ))}\n                    </List>\n                </DialogContent>\n            </Dialog>\n\n            <PreviewDialog open={previewDialogOpened} onClose={previewDialogClose} canvas={canvas} />\n        </>\n    );\n}\n","import React, { useState } from 'react';\nimport { useTranslation, withTranslation } from 'react-i18next';\nimport {\n    Grid,\n    Card,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    Divider,\n    Dialog,\n    DialogTitle,\n    DialogContent,\n    LinearProgress,\n} from '@material-ui/core';\nimport { getTransText2 } from '../../utils';\nimport UploadListItem from './upload-item';\nimport ExportDialog from './export-diag';\nimport { Link } from 'react-router-dom';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { LanguageCode, RmgStyle } from '../../constants/constants';\nimport { setStyle } from '../../redux/param/action';\n\nconst TemplateDialog = React.lazy(() => import(/* webpackChunkName: \"panelSaveTemplateDialog\" */ './template-diag'));\n\nexport default function PanelSave() {\n    let TranslatedSaveLists = withTranslation()(SaveLists);\n\n    return (\n        <Grid container spacing={3} justifyContent=\"center\" alignItems=\"center\">\n            <Grid item xs={12} sm={8} md={6} lg={4}>\n                <TranslatedSaveLists />\n            </Grid>\n        </Grid>\n    );\n}\n\nconst allLangs = {\n    en: 'English',\n    'zh-Hans': '中文（简体）',\n    'zh-HK': '中文（香港）',\n};\n\nconst SaveLists = () => {\n    const { t, i18n } = useTranslation();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const param = useAppSelector(store => store.param);\n\n    const [isTempDialogOpen, setIsTempDialogOpen] = useState(false);\n    const [isExportDialogOpen, setIsExportDialogOpen] = useState(false);\n    const [isStyleDialogOpen, setIsStyleDialogOpen] = useState(false);\n    const [isLangDialogOpen, setIsLangDialogOpen] = useState(false);\n\n    const saveClick = async () => {\n        let link = document.createElement('a');\n        link.href = 'data:application/json;charset=utf-8,' + encodeURIComponent(JSON.stringify(param));\n        link.download = 'rmg.param.' + new Date().toISOString() + '.json';\n        link.click();\n    };\n\n    const exportDialogClose = (action: string) => {\n        setIsExportDialogOpen(false);\n    };\n\n    const styleDialogClose = (action: 'close' | RmgStyle) => {\n        if (action === 'close' || action === rmgStyle) {\n        } else {\n            // setStyle(action);\n            // setIsStyleDialogOpen(false);\n\n            window.gtag('event', 'set', {\n                event_category: 'style',\n                event_label: action,\n            });\n            // window.location.href = process.env.PUBLIC_URL + '/' + action;\n        }\n        setIsStyleDialogOpen(false);\n\n        // TODO: how about integrity check?\n        // e.g. when user switch from guangzhou mtr to shanghai metro\n        // the info_panel_type will be invaild\n        // do we need to set info_panel_type to default or prompt up a dialog\n    };\n\n    return (\n        <div>\n            <Card>\n                <List component=\"nav\">\n                    <ListItem button onClick={() => setIsTempDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>note_add</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.new.button')} />\n                    </ListItem>\n                    <UploadListItem />\n                    <ListItem button onClick={saveClick}>\n                        <ListItemIcon>\n                            <Icon>save</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.save')} />\n                    </ListItem>\n                    <ListItem button onClick={() => setIsExportDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>cloud_download</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.export.button')} />\n                    </ListItem>\n                </List>\n                <Divider />\n                <List component=\"nav\">\n                    <ListItem button onClick={() => setIsStyleDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>style</Icon>\n                        </ListItemIcon>\n                        <ListItemText primary={t('file.style.button')} secondary={t('file.style.' + rmgStyle)} />\n                    </ListItem>\n                    <ListItem button onClick={() => setIsLangDialogOpen(true)}>\n                        <ListItemIcon>\n                            <Icon>translate</Icon>\n                        </ListItemIcon>\n                        <ListItemText\n                            primary={t('file.lang.button')}\n                            secondary={getTransText2(allLangs, i18n.languages as LanguageCode[])}\n                        />\n                    </ListItem>\n                </List>\n            </Card>\n\n            <React.Suspense fallback={<LinearProgress />}>\n                <TemplateDialog open={isTempDialogOpen} onClose={() => setIsTempDialogOpen(false)} />\n            </React.Suspense>\n\n            <ExportDialog open={isExportDialogOpen} onClose={exportDialogClose} />\n\n            <StyleDialog open={isStyleDialogOpen} onClose={styleDialogClose} />\n            <LangDialog open={isLangDialogOpen} onClose={() => setIsLangDialogOpen(false)} />\n        </div>\n    );\n};\n\ninterface StyleDialogProps {\n    onClose: (style: 'close' | RmgStyle) => void;\n    open: boolean;\n}\n\nfunction StyleDialog(props: StyleDialogProps) {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const handleClose = (key: RmgStyle) => () => {\n        dispatch(setStyle(key));\n        props.onClose(key);\n    };\n\n    return (\n        <Dialog onClose={() => props.onClose('close')} open={props.open}>\n            <DialogTitle>{t('file.style.title')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    {Object.values(RmgStyle).map(key => (\n                        <Link to={'/' + key} key={key} style={{ textDecoration: 'none', color: 'unset' }}>\n                            <ListItem button onClick={handleClose(key)}>\n                                <ListItemText primary={t('file.style.' + key)} />\n                            </ListItem>\n                        </Link>\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    );\n}\n\ninterface LangDialogProps {\n    onClose: () => void;\n    open: boolean;\n}\n\nfunction LangDialog(props: LangDialogProps) {\n    const { t, i18n } = useTranslation();\n\n    const handleClick = (lang: string) => {\n        if (lang === i18n.language) {\n            props.onClose();\n        } else {\n            i18n.changeLanguage(lang).then(t => (document.title = t('title')));\n            // history.pushState({url:window.location.href}, null, '?' + window.urlParams.toString());\n            window.gtag('event', 'set', {\n                event_category: 'language',\n                event_label: lang,\n            });\n            document.documentElement.setAttribute('lang', lang);\n            props.onClose();\n        }\n    };\n\n    return (\n        <Dialog onClose={props.onClose} open={props.open}>\n            <DialogTitle>{t('file.lang.title')}</DialogTitle>\n            <DialogContent dividers>\n                <List>\n                    {(Object.keys(allLangs) as (keyof typeof allLangs)[]).map(key => (\n                        <ListItem button onClick={() => handleClick(key)} key={key}>\n                            <ListItemText primary={allLangs[key]} />\n                        </ListItem>\n                    ))}\n                </List>\n            </DialogContent>\n        </Dialog>\n    );\n}\n","import Panel from './panel';\n\nexport default Panel;\n"],"names":["UploadLi","t","useTranslation","dispatch","useDispatch","canvasToShow","useAppSelector","state","app","React","open","setOpen","importedParam","setImportedParam","ListItem","button","component","htmlFor","ListItemIcon","Icon","ListItemText","primary","type","accept","style","display","id","onChange","event","console","log","target","files","Promise","resolve","reader","FileReader","onloadend","readAsText","then","e","JSON","parse","result","param","ImportDialog","onClose","action","document","getElementById","value","updatedParam","updateParam","window","rmgStorage","writeFile","stringify","canvas","canvasConfig","some","c","AllCanvas","selectCanvas","reRenderApp","error","content","props","Dialog","DialogTitle","DialogContent","dividers","DialogContentText","whiteSpace","Object","keys","length","stn_list","entries","map","x","includes","name","join","trim","replace","DialogActions","Button","onClick","color","autoFocus","test","svgEl","scale","svgW","viewBox","baseVal","width","svgH","height","querySelectorAll","Number","devicePixelRatio","setAttribute","toString","ctx","getContext","clearRect","forEach","el","elStyle","getComputedStyle","fontFamily","fill","dominantBaseline","textAnchor","reject","img","Image","onload","drawImage","toDataURL","onerror","src","btoa","unescape","encodeURIComponent","outerHTML","saveAs","uri","filename","link","createElement","download","href","body","appendChild","click","removeChild","useStyles","makeStyles","theme","createStyles","contentWrapper","overflow","paddingTop","spacing","paddingBottom","paddingLeft","paddingRight","breakpoints","down","flexDirection","contentCanvas","flex","contentControl","flexGrow","flexShrink","minWidth","contentAction","alignSelf","contentRoot","padding","contentControlContent","justifyContent","formControlRoot","margin","PreviewDialog","classes","useAppDispatch","store","line_name","currentStationIndex","current_stn_idx","rmgStyle","useState","setSvgEl","isLoaded","setIsLoaded","showBorder","setShowBorder","isTransparent","setIsTransparent","setScale","format","setFormat","isAccept","setIsAccept","isTermsDialogOpen","setIsTermsDialogOpen","contentEl","useEffect","cloneSvgNode","elem","key","querySelector","getPropertyValue","match","thisSVGHeight","cloneNode","setProperty","tag","filter","l","sheet","cssRules","rule","cssText","txt","s","textContent","prepend","RmgStyle","getBase64FontFace","uris","alert","downloadSvg","stn_list_keys","zip","JSZip","stnId","setCurrentStation","replaceAll","data","navigator","userAgent","setTimeout","file","split","base64","removeAttribute","generateAsync","zipData","URL","createObjectURL","handleClose","maxWidth","className","dangerouslySetInnerHTML","__html","ref","root","List","disablePadding","ListItemSecondaryAction","Switch","checked","_","disabled","Divider","variant","Select","native","nextScale","getAttribute","ratio","toFixed","Checkbox","size","Typography","cursor","TermsDialog","useMemo","previewDialogOpened","setPreviewDialogOpened","setCanvas","TemplateDialog","allLangs","en","SaveLists","i18n","isTempDialogOpen","setIsTempDialogOpen","isExportDialogOpen","setIsExportDialogOpen","isStyleDialogOpen","setIsStyleDialogOpen","isLangDialogOpen","setIsLangDialogOpen","saveClick","Date","toISOString","Card","secondary","getTransText2","languages","fallback","LinearProgress","StyleDialog","gtag","event_category","event_label","LangDialog","setStyle","values","to","textDecoration","lang","language","changeLanguage","title","documentElement","TranslatedSaveLists","withTranslation","Grid","container","alignItems","item","xs","sm","md","lg"],"sourceRoot":""}