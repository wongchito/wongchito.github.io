{"version":3,"file":"static/js/railmapGZMTR.07fef885.chunk.js","mappings":"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","sources":["svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx","svgs/railmap/methods/share.ts","svgs/gzmtr/line-icon/line-icon-type2.tsx","svgs/gzmtr/line-icon/interchange-box.tsx","svgs/gzmtr/line-icon/line-icon.tsx","svgs/gzmtr/station-name/station-name.tsx","svgs/gzmtr/station-name/station-secondary-name.tsx","svgs/gzmtr/station-name/express-tag.tsx","svgs/gzmtr/station-name/station-name-wrapper.tsx","svgs/railmap/main/station/station-gzmtr.tsx","svgs/railmap/main/main-gzmtr.tsx","svgs/railmap/railmap-gzmtr.tsx","svgs/gzmtr/psd-number.tsx","svgs/strip/strip-gzmtr.tsx"],"sourcesContent":["import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\nimport { MAX_WIDTH } from './line-icon';\n\ninterface LineIconType2Props {\n    lineName: Name;\n    commonPart: string;\n}\n\nexport default memo(\n    function LineIconType2(props: LineIconType2Props) {\n        const { lineName, commonPart } = props;\n\n        const wrapperEl = useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = useState({ x: 0, height: 0, width: 0 } as DOMRect);\n        useEffect(() => {\n            wrapperEl.current && setBBox(wrapperEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const scale = MAX_WIDTH / Math.max(MAX_WIDTH, bBox.width);\n        const dx = (-bBox.x - bBox.width / 2) * scale;\n        const dy = (bBox.height * (1 - scale) * 1.2) / 2;\n\n        return (\n            <g ref={wrapperEl} transform={`translate(${dx},${dy})scale(${scale})`}>\n                <text className=\"rmg-name__zh\" fontSize={14} y={12} textAnchor=\"end\">\n                    {commonPart}\n                    <tspan className=\"rmg-name__zh\" fontSize={8} x={0} dy={-2} textAnchor=\"start\">\n                        {lineName[0].slice(commonPart.length).trim()}\n                    </tspan>\n                    <tspan className=\"rmg-name__en\" fontSize={4} x={0} dy={6} textAnchor=\"start\">\n                        {lineName[1].slice(commonPart.length).trim()}\n                    </tspan>\n                </text>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.lineName.toString() === nextProps.lineName.toString()\n);\n","import React, { SVGProps } from 'react';\n\nexport default function InterchangeBox(props: SVGProps<SVGRectElement>) {\n    return <rect x={-22.5} height={24} width={45} rx={4.5} {...props} />;\n}\n","import React, { memo, useEffect, useRef, useState } from 'react';\nimport { ColourHex, MonoColour, Name } from '../../../constants/constants';\nimport LineIconType2 from './line-icon-type2';\nimport InterchangeBox from './interchange-box';\n\nexport const MAX_WIDTH = 42;\n\ninterface LineIconProps {\n    lineName: Name;\n    foregroundColour: MonoColour;\n    backgroundColour: ColourHex;\n    passed?: boolean;\n}\n\nexport default memo(\n    function LineIcon(props: LineIconProps) {\n        const { lineName, foregroundColour, backgroundColour, passed } = props;\n\n        const [type, commonPart] = getType(lineName);\n\n        const nameZhEl = useRef<SVGTextElement | null>(null);\n        const nameEnEl = useRef<SVGTextElement | null>(null);\n\n        const [nameZhBBox, setNameZhBBox] = useState({ width: 0 } as DOMRect);\n        const [nameEnBBox, setNameEnBBox] = useState({ width: 0 } as DOMRect);\n\n        useEffect(() => {\n            nameZhEl.current && setNameZhBBox(nameZhEl.current.getBBox());\n            nameEnEl.current && setNameEnBBox(nameEnEl.current.getBBox());\n        }, [lineName.toString()]);\n\n        const nameZhScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameZhBBox.width);\n        const nameEnScale = MAX_WIDTH / Math.max(MAX_WIDTH, nameEnBBox.width);\n\n        return (\n            <g textAnchor=\"middle\" fill={passed ? MonoColour.white : foregroundColour}>\n                <InterchangeBox fill={passed ? '#aaa' : backgroundColour} />\n                {type === 2 ? (\n                    <LineIconType2 lineName={lineName} commonPart={commonPart} />\n                ) : (\n                    <>\n                        <text\n                            ref={nameZhEl}\n                            y={getYByType(type, 'zh', nameZhScale)}\n                            className=\"rmg-name__zh\"\n                            fontSize={12}\n                            transform={`scale(${nameZhScale})`}\n                        >\n                            {type === 1 ? (\n                                <>\n                                    <tspan fontSize={16} dy={0.7} className=\"rmg-name__zh\">\n                                        {commonPart}\n                                    </tspan>\n                                    <tspan dy={-0.7} className=\"rmg-name__zh\">\n                                        {lineName[0].slice(commonPart.length)}\n                                    </tspan>\n                                </>\n                            ) : (\n                                lineName[0]\n                            )}\n                        </text>\n                        <text\n                            ref={nameEnEl}\n                            y={getYByType(type, 'en', nameEnScale)}\n                            className=\"rmg-name__en\"\n                            fontSize={8}\n                            transform={`scale(${nameEnScale})`}\n                        >\n                            {lineName[1]}\n                        </text>\n                    </>\n                )}\n            </g>\n        );\n    },\n    (prevProps, nextProps) =>\n        prevProps.lineName.toString() === nextProps.lineName.toString() &&\n        prevProps.foregroundColour === nextProps.foregroundColour &&\n        prevProps.backgroundColour === nextProps.backgroundColour &&\n        prevProps.passed === nextProps.passed\n);\n\n/**\n * type 1: 2号线\n * type 2: APM线\n * type 3: 佛山2号线\n */\nconst getType = (name: Name): [1 | 2 | 3, string] => {\n    const matchResultForType1 = name[0].match(/^(\\d+)\\D+$/);\n    if (matchResultForType1) return [1, matchResultForType1[1]];\n\n    const matchResultForType2 = name.map(text => text.match(/^([\\w\\d]+).+$/));\n    if (matchResultForType2[0] && matchResultForType2[1] && matchResultForType2[0][1] === matchResultForType2[1][1]) {\n        return [2, matchResultForType2[0][1]];\n    }\n\n    return [3, ''];\n};\n\nconst getYByType = (type: ReturnType<typeof getType>[0], field: 'zh' | 'en', scale: number) => {\n    switch (type) {\n        case 1:\n            return (field === 'zh' ? 7.3 : 19.5) * (1 + 1 - scale);\n        case 2:\n            return 0;\n        case 3:\n            if (field === 'zh') {\n                return 8 * (2 - scale);\n            } else {\n                return 19.5 + 19.5 * (19.5 / 8) * (1 - scale) - (scale === 1 ? 0 : 5.5);\n            }\n    }\n};\n","import React, { memo, useEffect, useRef } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationNameProps {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n}\n\nexport default memo(\n    function StationName(props: StationNameProps) {\n        const { stnName, onUpdate } = props;\n\n        const nameEl = useRef<SVGGElement | null>(null);\n\n        useEffect(() => {\n            onUpdate && onUpdate(nameEl.current!.getBBox());\n        }, [stnName.toString()]);\n\n        return (\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {stnName[0]}\n                </text>\n                <g fontSize={10.5}>\n                    {stnName[1].split('\\\\').map((txt, i) => (\n                        <text key={i} className=\"rmg-name__en\" dy={16 + i * 11}>\n                            {txt}\n                        </text>\n                    ))}\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.stnName.toString() === nextProps.stnName.toString()\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport { Name } from '../../../constants/constants';\n\ninterface StationSecondaryNameProps extends SVGProps<SVGGElement> {\n    stnName: Name;\n    onUpdate?: (bBox: SVGRect) => void;\n    passed?: boolean;\n}\n\nexport default function StationSecondaryName(props: StationSecondaryNameProps) {\n    const { stnName, onUpdate, passed, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as SVGRect);\n\n    useEffect(() => {\n        const nextBBox = nameEl.current!.getBBox();\n        setBBox(nextBBox);\n        onUpdate && onUpdate(nextBBox);\n    }, [stnName.toString()]);\n\n    return (\n        <g fill={passed ? '#aaa' : '#000'} {...others}>\n            <g transform=\"translate(0,3)\" fontSize={18}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={13}>\n                    {stnName[0]}\n                </text>\n                <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                    {stnName[1]}\n                </text>\n            </g>\n        </g>\n    );\n}\n","import React, { SVGProps } from 'react';\n\ninterface ExpressTagProps extends SVGProps<SVGGElement> {\n    passed?: boolean;\n}\n\nexport default function ExpressTag(props: ExpressTagProps) {\n    const { passed, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={passed ? '#aaa' : 'var(--rmg-theme-colour)'} {...others}>\n            <text className=\"rmg-name__zh\" fontSize={13}>\n                快车停靠站\n            </text>\n            <text dy={10} className=\"rmg-name__en\" fontSize={6.5}>\n                Express Station\n            </text>\n        </g>\n    );\n}\n","import React, { useState } from 'react';\nimport { Name, StationState } from '../../../constants/constants';\nimport StationName from './station-name';\nimport StationSecondaryName from './station-secondary-name';\nimport ExpressTag from './express-tag';\n\ninterface StationNameWrapperProps {\n    primaryName: Name;\n    secondaryName?: Name;\n    stationState: StationState;\n    flipped?: boolean;\n    express?: boolean;\n}\n\nexport default function StationNameWrapper(props: StationNameWrapperProps) {\n    const { primaryName, secondaryName, stationState, flipped, express } = props;\n\n    const [primaryBBox, setPrimaryBBox] = useState({ width: 0 } as SVGRect);\n    const [secondaryBBox, setSecondaryBBox] = useState({ x: 0, width: -20 } as SVGRect);\n\n    const getFill = (state: StationState) => {\n        switch (state) {\n            case StationState.PASSED:\n                return '#aaa';\n            case StationState.CURRENT:\n                return '#f00';\n            case StationState.FUTURE:\n                return '#000';\n        }\n    };\n\n    const primaryNameEnRows = primaryName[1].split('\\\\').length;\n    const transforms = {\n        g: {\n            x: 0,\n            y: flipped ? 17.5 : -20 - primaryNameEnRows * 14 * Math.cos(-45),\n        },\n        StationSecondaryName: {\n            x: (primaryBBox.width + secondaryBBox.width / 2 + 10) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n        ExpressTag: {\n            x: (primaryBBox.width + secondaryBBox.width + 20 + 35) * (flipped ? -1 : 1),\n            y: 2 + 5 * (primaryNameEnRows - 1),\n        },\n    };\n\n    return (\n        <g\n            textAnchor={flipped ? 'end' : 'start'}\n            fill={getFill(stationState)}\n            transform={`translate(${transforms.g.x},${transforms.g.y})rotate(-45)`}\n        >\n            <StationName stnName={primaryName} onUpdate={setPrimaryBBox} />\n\n            {secondaryName && (\n                <StationSecondaryName\n                    stnName={secondaryName}\n                    onUpdate={setSecondaryBBox}\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.StationSecondaryName.x},${transforms.StationSecondaryName.y})`}\n                />\n            )}\n\n            {express && (\n                <ExpressTag\n                    passed={stationState === StationState.PASSED}\n                    transform={`translate(${transforms.ExpressTag.x},${transforms.ExpressTag.y})`}\n                />\n            )}\n        </g>\n    );\n}\n","import React from 'react';\nimport StationNumber from '../../../gzmtr/station-icon/station-number';\nimport { InterchangeInfo, Services } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\nimport LineIcon from '../../../gzmtr/line-icon/line-icon';\nimport StationNameWrapper from '../../../gzmtr/station-name/station-name-wrapper';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    stnY: number;\n}\n\nconst StationGZMTR = (props: Props) => {\n    const { stnId, stnState, stnY } = props;\n\n    const theme = useAppSelector(store => store.param.theme);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const lineNumber = useAppSelector(store => store.param.line_num);\n    const stnInfo = useAppSelector(store => store.param.stn_list[stnId]);\n\n    const isNameShift = stnInfo.parents.length === 2 || stnInfo.children.length === 2;\n    const tickRotation =\n        stnY > 0\n            ? 180\n            : stnInfo.parents.indexOf(stnInfo.branch.left[1] || '') === 1 ||\n              stnInfo.children.indexOf(stnInfo.branch.right[1] || '') === 1\n            ? 180\n            : 0;\n    const nameENLns = stnInfo.name[1].split('\\\\').length;\n    const nameDX = isNameShift\n        ? tickRotation === 180\n            ? 16 + (nameENLns - 1) * 12 * Math.cos(-45)\n            : -9\n        : tickRotation === 180\n        ? -6\n        : (25 + (nameENLns - 1) * 15) * Math.cos(-45);\n\n    return (\n        <>\n            <IntGroup\n                intInfos={\n                    isNameShift\n                        ? (\n                              [\n                                  [theme[0], theme[1], 'var(--rmg-theme-colour)', 'var(--rmg-theme-fg)', ...lineName],\n                              ] as any[] as InterchangeInfo[]\n                          ).concat(stnInfo.transfer.info[0])\n                        : stnInfo.transfer.info[0]\n                }\n                stnState={stnState}\n                tickRotation={tickRotation}\n            />\n            <StationNumber lineNum={lineNumber} stnNum={stnInfo.num} passed={stnState === -1} />\n            <g transform={`translate(${-nameDX},0)`}>\n                <StationNameWrapper\n                    primaryName={stnInfo.name}\n                    secondaryName={stnInfo.secondaryName || undefined}\n                    stationState={stnState}\n                    flipped={tickRotation === 180}\n                    express={stnInfo.services.includes(Services.express)}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationGZMTR;\n\ninterface IntGroupProps {\n    intInfos: InterchangeInfo[];\n    stnState: -1 | 0 | 1;\n    tickRotation: 0 | 180;\n}\n\nconst IntGroup = (props: IntGroupProps) => (\n    <>\n        <IntTicks strokeWidth={4} {...props} />\n        <IntBoxs transform={`translate(0,${props.tickRotation === 180 ? -47 : 23})`} {...props} />\n    </>\n);\n\nconst IntTicks = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, stnState, tickRotation, ...others } = props;\n\n    return (\n        <g {...others}>\n            {intInfos.map((info, i) => (\n                <use\n                    key={i}\n                    xlinkHref=\"#inttick\"\n                    stroke={stnState === -1 ? '#aaa' : info[2]}\n                    transform={`translate(${-2 * (intInfos.length - 1) + 4 * i},0)rotate(${\n                        tickRotation === 180 ? 180 : 0\n                    })`}\n                />\n            ))}\n        </g>\n    );\n};\n\nconst IntBoxs = (props: IntGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, tickRotation, stnState, ...other } = props;\n\n    return (\n        <g {...other}>\n            {intInfos.map((info, i) => (\n                <g key={i} transform={`translate(0,${i * 28 * (tickRotation === 180 ? -1 : 1)})`}>\n                    <LineIcon\n                        lineName={[info[4], info[5]]}\n                        foregroundColour={info[3]}\n                        backgroundColour={info[2]}\n                        passed={stnState === -1}\n                    />\n                </g>\n            ))}\n        </g>\n    );\n};\n","import React, { useMemo } from 'react';\nimport StationGZMTR from './station/station-gzmtr';\nimport { adjacencyList, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport { CanvasType, ColourHex, MonoColour, ShortDirection, StationDict } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\nimport LineIcon from '../../gzmtr/line-icon/line-icon';\n\nconst wideFactor = (stnList: StationDict, stnId: string) =>\n    stnList[stnId].parents.length === 2 || stnList[stnId].children.length === 2 ? 0.25 : 0;\n\nconst getXShare = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]): number => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        if (branchOfStn.toString() === branches[0].toString()) {\n            // station on main line, expand to fit\n            let lens = [];\n            if (!leftOpenJaw && !rightOpenJaw) {\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else if (leftOpenJaw) {\n                lens[0] = 0;\n                lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n                lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n            } else {\n                // right open jaw\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n            }\n            return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n        } else {\n            if (!leftOpenJaw && !rightOpenJaw) {\n                let lens = [];\n                lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n                lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n                lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n                lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n                return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n            } else if (leftOpenJaw) {\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len -\n                    criticalPathMethod(stnId, partSink, adjMat).len\n                );\n            } else {\n                // right open jaw\n                return (\n                    criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len +\n                    criticalPathMethod(partSource, stnId, adjMat).len\n                );\n            }\n        }\n    }\n};\n\nconst MainGZMTR = () => {\n    const { branches, routes, depsStr: deps } = useAppSelector(store => store.helper);\n\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const yPercentage = useAppSelector(store => store.param.y_pc);\n    const paddingPercentage = useAppSelector(store => store.param.padding);\n    const branchSpacing = useAppSelector(store => store.param.branch_spacing);\n    const direction = useAppSelector(store => store.param.direction);\n    const lineName = useAppSelector(store => store.param.line_name);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const adjMat = adjacencyList(stationList, wideFactor, wideFactor);\n\n    const xShares = useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(stationList).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShare(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const lineXs: [number, number] =\n        direction === ShortDirection.right\n            ? [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100 + 65,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 20,\n              ]\n            : [\n                  (svgWidths[CanvasType.RailMap] * paddingPercentage) / 100,\n                  svgWidths[CanvasType.RailMap] * (1 - paddingPercentage / 100) - 65,\n              ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(stationList).reduce((acc, cur) => {\n                if (branches[0].includes(cur)) {\n                    return { ...acc, [cur]: 0 };\n                } else {\n                    let branchOfStn = branches.slice(1).filter(branch => branch.includes(cur))[0];\n                    return { ...acc, [cur]: stationList[branchOfStn[0]].children.indexOf(branchOfStn[1]) ? -2 : 2 };\n                }\n            }, {} as { [stnId: string]: number });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * branchSpacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = useMemo(\n        () => getStnState(currentStationIndex, routes, direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const linePaths = drawLine(branches, stnStates);\n    const paths = (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: linePaths[cur].map(stns => _linePath(stns, xs, ys)),\n        }),\n        {} as { [key in keyof ReturnType<typeof drawLine>]: string[] }\n    );\n\n    return (\n        <g\n            id=\"main\"\n            style={{\n                ['--y-percentage' as any]: yPercentage,\n                transform: 'translateY(calc(var(--y-percentage) * var(--rmg-svg-height) / 100))',\n            }}\n        >\n            <Line paths={paths} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <g\n                id=\"line_name\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.right ? `${lineXs[0] - 65}px` : `${lineXs[1] + 65}px`,\n                }}\n            >\n                <LineIcon\n                    lineName={lineName}\n                    foregroundColour={'var(--rmg-theme-fg)' as MonoColour}\n                    backgroundColour={'var(--rmg-theme-colour)' as ColourHex}\n                />\n            </g>\n        </g>\n    );\n};\n\nexport default MainGZMTR;\n\nconst Line = React.memo(\n    (props: { paths: { main: string[]; pass: string[] } }) => (\n        <g fill=\"none\" strokeWidth={4}>\n            <g stroke=\"#aaa\" strokeDasharray={4}>\n                {props.paths.pass.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n            <g stroke=\"var(--rmg-theme-colour)\">\n                {props.paths.main.map((path, i) => (\n                    <path key={i} d={path} />\n                ))}\n            </g>\n        </g>\n    ),\n    (prevProps, nextProps) => JSON.stringify(prevProps.paths) === JSON.stringify(nextProps.paths)\n);\n\nconst _linePath = (stnIds: string[], realXs: { [stnId: string]: number }, realYs: { [stnId: string]: number }) => {\n    let prevY: number;\n    var path = [] as string[];\n\n    stnIds.forEach(stnId => {\n        let x = realXs[stnId];\n        let y = realYs[stnId];\n        if (!prevY && prevY !== 0) {\n            prevY = y;\n            path.push(`M ${x},${y}`);\n            return;\n        }\n        if (y === 0) {\n            if (y < prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,0 40,-40', `V ${y}`);\n            if (y > prevY) path.push(`H ${x - 40}`, 'a 40,40 0 0,1 40,40', `V ${y}`);\n        } else {\n            if (y < prevY) path.push(`V ${y + 40}`, 'a 40,40 0 0,1 40,-40', `H ${x}`);\n            if (y > prevY) path.push(`V ${y - 40}`, 'a 40,40 0 0,0 40,40', `H ${x}`);\n        }\n        path.push(`H ${x}`);\n        prevY = y;\n    });\n\n    // simplify path\n    return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { xs, ys, stnStates } = props;\n\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    return (\n        <g id=\"stn_icons\">\n            {Object.keys(stationList)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .map(stnId => (\n                    <g\n                        key={stnId}\n                        style={{\n                            transform: `translate(${xs[stnId]}px,${ys[stnId]}px)`,\n                        }}\n                    >\n                        <StationGZMTR stnId={stnId} stnState={stnStates[stnId]} stnY={ys[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n","import React, { memo, useMemo } from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport MainGZMTR from './main/main-gzmtr';\nimport { CanvasType, Note, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst RailMapGZMTR = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const psdNumber = useAppSelector(store => store.param.psd_num);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const notes = useAppSelector(store => store.param.notesGZMTR);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useAppSelector(store => store.param.stn_list[currentStationIndex]);\n\n    return (\n        <>\n            <DefsGZMTR />\n\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType === PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType === PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            {(direction === ShortDirection.left && curStnInfo.parents.includes('linestart')) ||\n            (direction === ShortDirection.right && curStnInfo.children.includes('lineend')) ? (\n                <TerminusFlag />\n            ) : (\n                <>\n                    <MainGZMTR />\n                    <DirectionIndicator />\n                    {notes.map((note, i) => (\n                        <NoteBox key={i} note={note} />\n                    ))}\n                </>\n            )}\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && (\n                <line x2={svgWidths[CanvasType.RailMap]} transform=\"translate(0,90)\" strokeWidth={3} stroke=\"black\" />\n            )}\n        </>\n    );\n};\n\nexport default RailMapGZMTR;\n\nconst DefsGZMTR = memo(() => (\n    <defs>\n        <path id=\"arrow_direction\" d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\" fill=\"black\" />\n        <path id=\"inttick\" d=\"M 0,0 v 18\" strokeLinecap=\"square\" />\n    </defs>\n));\n\nconst DirectionIndicator = () => {\n    const { routes } = useAppSelector(store => store.helper);\n    const {\n        direction,\n        direction_gz_x: directionIndicatorX,\n        direction_gz_y: directionIndicatorY,\n        current_stn_idx: currentStationIndex,\n    } = useAppSelector(store => store.param);\n\n    const validDests = useMemo(\n        () => [\n            ...new Set(\n                routes\n                    .reduce(\n                        (acc, cur) =>\n                            cur.includes(currentStationIndex)\n                                ? acc.concat(\n                                      cur\n                                          .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                          .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                                  )\n                                : acc,\n                        []\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ],\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [currentStationIndex, direction, routes.toString()]\n    );\n\n    const textGroupProps: TextGroupProps = {\n        textAnchor: direction === ShortDirection.left ? 'start' : 'end',\n        transform: `translate(${direction === ShortDirection.left ? 65 : -65},-5)`,\n        destIds: validDests,\n    };\n\n    return (\n        <g\n            id=\"direction_gz\"\n            style={{ ['--x-percentage' as any]: directionIndicatorX, ['--y-percentage' as any]: directionIndicatorY }}\n        >\n            <use\n                xlinkHref=\"#arrow_direction\"\n                style={{ ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg' }}\n            />\n\n            {validDests.length !== 2 ? (\n                <DirectionIndicatorTextGroup {...textGroupProps} />\n            ) : (\n                <DirectionIndicatorTextGroup2 {...textGroupProps} />\n            )}\n        </g>\n    );\n};\n\ntype TextGroupProps = {\n    destIds: string[];\n} & React.SVGProps<SVGGElement>;\n\nconst DirectionIndicatorTextGroup = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n    const stationList = useAppSelector(store => store.param.stn_list);\n    return (\n        <g {...others}>\n            <text className=\"rmg-name__zh\" fontSize={28}>\n                {destIds.map(stnId => stationList[stnId].name[0]).join('/') + '方向'}\n            </text>\n            <text className=\"rmg-name__en\" fontSize={14} dy={22}>\n                {'Towards ' + destIds.map(stnId => stationList[stnId].name[1].replace('\\\\', ' ')).join('/')}\n            </text>\n        </g>\n    );\n};\n\nconst DirectionIndicatorTextGroup2 = (props: TextGroupProps) => {\n    const { destIds, ...others } = props;\n\n    const direction = useAppSelector(store => store.param.direction);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const charCounts = destIds.map(stnId => stationList[stnId].name[0].length);\n    const minCharCounts = Math.min(...charCounts);\n    const charSpacing =\n        minCharCounts > 1 && charCounts[0] !== charCounts[1]\n            ? Math.abs(charCounts[0] - charCounts[1]) / (minCharCounts - 1)\n            : 0;\n\n    return (\n        <g {...others}>\n            {destIds.map((id, i) => (\n                <React.Fragment key={id}>\n                    <text\n                        className=\"rmg-name__zh\"\n                        fontSize={25}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-21 + 42 * i}\n                        letterSpacing={charCounts[i] > charCounts[1 - i] ? '0em' : `${charSpacing}em`}\n                    >\n                        {stationList[id].name[0]}\n                    </text>\n                    <text\n                        className=\"rmg-name__en\"\n                        fontSize={11.5}\n                        x={direction === ShortDirection.left ? 0 : -75}\n                        y={-1 + 42 * i}\n                    >\n                        {'Towards ' + stationList[id].name[1].replace('\\\\', ' ')}\n                    </text>\n                </React.Fragment>\n            ))}\n            <text\n                className=\"rmg-name__zh\"\n                fontSize={28}\n                x={direction === ShortDirection.left ? 25 * (Math.max(...charCounts) + 1) : 0}\n                y={5}\n            >\n                方向\n            </text>\n        </g>\n    );\n};\n\nconst TerminusFlag = React.memo(() => (\n    <g id=\"terminus_gz\" textAnchor=\"middle\">\n        <text className=\"rmg-name__zh\" fontSize={90}>\n            终 点 站\n        </text>\n        <text dy={70} className=\"rmg-name__en\" fontSize={36}>\n            Terminal\n        </text>\n        <g strokeWidth={8} stroke=\"#000\">\n            <path d=\"M -160,68 h -160\" />\n            <path d=\"M 160,68 h 160\" />\n        </g>\n    </g>\n));\n\nconst NoteBox = React.memo(\n    (props: { note: Note }) => {\n        const noteTextEl = React.useRef<SVGGElement | null>(null);\n        const [bBox, setBBox] = React.useState({ width: 0, height: 0, y: 0 } as DOMRect);\n        React.useEffect(\n            () => setBBox(noteTextEl.current!.getBBox()),\n            // eslint-disable-next-line react-hooks/exhaustive-deps\n            [props.note[0], props.note[1]]\n        );\n\n        return (\n            <g\n                className=\"note-box\"\n                style={{ ['--x-percentage' as any]: props.note[2], ['--y-percentage' as any]: props.note[3] }}\n            >\n                {props.note[4] && (\n                    <rect\n                        height={bBox.height + 4}\n                        width={bBox.width + 4}\n                        x={-2}\n                        y={bBox.y - 2}\n                        fill=\"none\"\n                        stroke=\"black\"\n                        strokeWidth={0.5}\n                    />\n                )}\n                <g ref={noteTextEl}>\n                    <g fontSize={16} letterSpacing={1.2}>\n                        {props.note[0].split('\\n').map((txt, i) => (\n                            <text key={i} className=\"rmg-name__zh\" y={i * 18}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n\n                    <g\n                        fontSize={10}\n                        letterSpacing={0.33}\n                        transform={`translate(0,${18 * props.note[0].split('\\n').length})`}\n                    >\n                        {props.note[1].split('\\n').map((txt, i) => (\n                            <text\n                                key={i}\n                                className=\"rmg-name__en\"\n                                y={i * 11}\n                                textLength={\n                                    i < (props.note[1].match(/\\n/g)?.length || 0)\n                                        ? bBox.width\n                                        : navigator.userAgent.includes('Firefox')\n                                        ? -1\n                                        : 0\n                                }\n                                lengthAdjust=\"spacing\"\n                            >\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n            </g>\n        );\n    },\n    (prevProps, nextProps) => prevProps.note.toString() === nextProps.note.toString()\n);\n","import React, { SVGProps } from 'react';\nimport { MonoColour } from '../../constants/constants';\n\ninterface PsdNumberProps extends SVGProps<SVGGElement> {\n    num: string;\n    inStrip?: boolean;\n}\n\nexport default function PsdNumber(props: PsdNumberProps) {\n    const { num, inStrip, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={inStrip ? MonoColour.black : 'var(--rmg-theme-fg)'} {...others}>\n            <rect height={40} width={40} rx={4} x={-20} fill={inStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport { PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\nimport PsdNumber from '../gzmtr/psd-number';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <PsdNumber\n                num={props.isShowPSD as string}\n                inStrip={isInStrip}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n"],"names":["memo","props","passed","pathD","large","d","fill","strokeWidth","stroke","prevProps","nextProps","StationNumber","lineNum","stnNum","others","lineNumEl","useRef","stnNumEl","useState","width","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","getBBox","lineNumScale","Math","max","stnNumScale","length","textAnchor","fontSize","transform","ref","className","adjacencyList","stnList","leftW","rightW","Object","keys","reduce","acc","cur","children","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","indexOf","getXShareMTR","stnId","branches","criticalPath","includes","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","i","lineMainStns","linePassStns","_linePath","drawLine","lineName","commonPart","wrapperEl","height","bBox","setBBox","toString","scale","MAX_WIDTH","dx","dy","trim","InterchangeBox","rx","foregroundColour","backgroundColour","getType","type","nameZhEl","nameEnEl","nameZhBBox","setNameZhBBox","nameEnBBox","setNameEnBBox","nameZhScale","nameEnScale","MonoColour","getYByType","name","matchResultForType1","match","matchResultForType2","map","text","field","stnName","onUpdate","nameEl","split","txt","StationSecondaryName","nextBBox","ExpressTag","StationNameWrapper","primaryName","secondaryName","stationState","flipped","express","primaryBBox","setPrimaryBBox","secondaryBBox","setSecondaryBBox","primaryNameEnRows","transforms","g","cos","state","StationState","getFill","stnState","stnY","theme","useAppSelector","store","param","line_name","lineNumber","line_num","stnInfo","stn_list","isNameShift","tickRotation","left","right","nameENLns","nameDX","IntGroup","intInfos","transfer","info","num","undefined","services","Services","IntTicks","IntBoxs","xlinkHref","other","wideFactor","helper","deps","depsStr","svgWidths","svgWidth","yPercentage","y_pc","paddingPercentage","padding","branch_spacing","currentStationIndex","current_stn_idx","stationList","useMemo","rightOpenJaw","getXShare","JSON","stringify","realCP","CanvasType","paths","stns","id","style","Line","StationGroup","React","strokeDasharray","psdNumber","psd_num","infoPanelType","info_panel_type","notes","notesGZMTR","curStnInfo","DefsGZMTR","variant","isShowLight","PanelTypeGZMTR","isShowPSD","TerminusFlag","DirectionIndicator","note","NoteBox","x2","strokeLinecap","directionIndicatorX","direction_gz_x","directionIndicatorY","direction_gz_y","validDests","textGroupProps","destIds","DirectionIndicatorTextGroup","DirectionIndicatorTextGroup2","charCounts","minCharCounts","min","charSpacing","abs","letterSpacing","noteTextEl","textLength","navigator","userAgent","lengthAdjust","PsdNumber","inStrip","stripHeight","indicatorLight","cy","r","ry","PSD","isInStrip","psdDy"],"sourceRoot":""}