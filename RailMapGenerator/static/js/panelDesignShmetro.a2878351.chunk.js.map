{"version":3,"file":"static/js/panelDesignShmetro.a2878351.chunk.js","mappings":"6PA2BA,UApB0B,WACtB,OACI,iCAYI,SAAC,IAAD,KACA,SAACA,EAAD,QAOZ,IAAMA,EAAc,WAChB,IAAQC,GAAMC,EAAAA,EAAAA,KAAND,EACFE,GAAWC,EAAAA,EAAAA,MAEXC,GAAYC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,mBAEtD,OAAOC,EAAAA,EAAAA,UAAQ,WAIX,OACI,UAAC,IAAD,YACI,SAAC,IAAD,WACI,SAAC,IAAD,CAAMC,MAAO,CAAEC,UAAW,kBAA1B,4BAEJ,SAAC,IAAD,CAAcC,QAASZ,EAAE,8BACzB,SAAC,IAAD,CAAQa,QAAM,EAACC,MAAOV,EAAWW,SATpB,SAAC,GAA2E,IAA/DD,EAA8D,EAAxEE,OAAUF,MAC9BZ,GAASe,EAAAA,EAAAA,IAAaH,KAQuCJ,MAAO,CAAEQ,MAAO,KAAzE,SACKC,OAAOC,OAAOC,EAAAA,IAAkBC,KAAI,SAAAC,GAAI,OACrC,mBAAmBT,MAAOS,EAA1B,SACKvB,EAAE,oBAAsBuB,IADhBA,aAO9B,CAACnB,EAAWJ,EAAGE","sources":["panels/design/list-shmetro.tsx"],"sourcesContent":["import React, { ChangeEvent, useMemo } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport { ListItem, ListItemIcon, Icon, ListItemText, Divider, Select } from '@material-ui/core';\nimport { PanelTypeShmetro } from '../../constants/constants';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport { setPanelType } from '../../redux/param/action';\n\nconst DesignListShmetro = () => {\n    return (\n        <>\n            {/* TODO: Platform Door Number could be added\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>looks_one</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.psd')} />\n                <TextField\n                    value={param.psd_num}\n                    onChange={e => dispatch({ type: 'SET_PSD_NUM', num: e.target.value })}\n                />\n            </ListItem> */}\n            <Divider />\n            <PanelTypeLi />\n        </>\n    );\n};\n\nexport default DesignListShmetro;\n\nconst PanelTypeLi = () => {\n    const { t } = useTranslation();\n    const dispatch = useAppDispatch();\n\n    const panelType = useAppSelector(store => store.param.info_panel_type);\n\n    return useMemo(() => {\n        const handleChange = ({ target: { value } }: ChangeEvent<{ name?: string; value: unknown }>) => {\n            dispatch(setPanelType(value as PanelTypeShmetro));\n        };\n        return (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon style={{ transform: 'rotate(180deg)' }}>credit_card</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('design.panelType.button')} />\n                <Select native value={panelType} onChange={handleChange} style={{ width: 166 }}>\n                    {Object.values(PanelTypeShmetro).map(type => (\n                        <option key={type} value={type}>\n                            {t('design.panelType.' + type)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        );\n    }, [panelType, t, dispatch]);\n};\n"],"names":["PanelTypeLi","t","useTranslation","dispatch","useAppDispatch","panelType","useAppSelector","store","param","info_panel_type","useMemo","style","transform","primary","native","value","onChange","target","setPanelType","width","Object","values","PanelTypeShmetro","map","type"],"sourceRoot":""}