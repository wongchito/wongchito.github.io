{"version":3,"file":"static/js/destinationMTR.53c1e23c.chunk.js","mappings":"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","sources":["svgs/destination/destination-mtr.tsx","svgs/strip/strip-mtr.tsx"],"sourcesContent":["import React, { memo } from 'react';\nimport StripMTR from '../strip/strip-mtr';\nimport { CanvasType, Name, ShortDirection } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nexport default memo(function DestinationMTR() {\n    return (\n        <>\n            <DefsMTR />\n            <StripMTR stripPc={90} />\n            <InfoMTR />\n        </>\n    );\n});\n\nconst DefsMTR = memo(() => (\n    <defs>\n        <path id=\"arrow\" d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\" fill=\"var(--rmg-black,#000)\" />\n    </defs>\n));\n\nconst InfoMTR = () => {\n    const routes = useAppSelector(store => store.helper.routes);\n\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const customisedMTRDestination = useAppSelector(store => store.param.customiseMTRDest);\n    const platformNumber = useAppSelector(store => store.param.platform_num);\n    const lineName = useAppSelector(store => store.param.line_name);\n\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    let destNames: Name;\n    if (customisedMTRDestination.terminal !== false) {\n        destNames = customisedMTRDestination.terminal;\n    } else {\n        const validDests = [\n            ...new Set(\n                routes\n                    .filter(route => route.includes(currentStationIndex))\n                    .map(\n                        route =>\n                            route\n                                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                                .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                    )\n                    .filter(id => id !== currentStationIndex)\n            ),\n        ];\n        destNames = [\n            validDests.map(stnId => stationList[stnId].name[0]).join('/'),\n            validDests\n                .map(stnId => stationList[stnId].name[1])\n                .join('/')\n                .replace('\\\\', ' '),\n        ];\n    }\n\n    const destNameEl = React.useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(destNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [destNames.toString(), customisedMTRDestination.isLegacy]\n    );\n\n    const flagLength = 160 + 150 + bBox.width + 45 + 50;\n    const arrowX = (svgWidths[CanvasType.Destination] - (direction === ShortDirection.left ? 1 : -1) * flagLength) / 2;\n    const platformNumX = arrowX + (direction === ShortDirection.left ? 1 : -1) * (160 + 50 + 75);\n    const destNameX = platformNumX + (direction === ShortDirection.left ? 1 : -1) * (75 + 45);\n\n    return (\n        <g id=\"dest_name\" style={{ transform: 'translateY(calc(var(--rmg-svg-height) / 2 - 20px))' }}>\n            <use\n                xlinkHref=\"#arrow\"\n                transform={`translate(${arrowX},0)rotate(${direction === ShortDirection.left ? 0 : 180})`}\n            />\n            <PlatformNum num={platformNumber} transform={`translate(${platformNumX},0)`} />\n            <g\n                ref={destNameEl}\n                textAnchor={direction === ShortDirection.left ? 'start' : 'end'}\n                transform={`translate(${destNameX},-25)`}\n                fill=\"var(--rmg-black)\"\n            >\n                <text className=\"rmg-name__zh\" fontSize={90}>\n                    {(customisedMTRDestination.isLegacy ? lineName[0] : '') + 'å¾€' + destNames[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={45} dy={80}>\n                    {(customisedMTRDestination.isLegacy ? lineName[1] + ' ' : '') + 'to ' + destNames[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst PlatformNum = (props: { num: string | false } & React.SVGProps<SVGGElement>) => {\n    const { num, ...others } = props;\n\n    return (\n        <g id=\"platform\" {...others}>\n            {React.useMemo(\n                () => (\n                    <>\n                        <circle cx={0} cy={0} r={75} fill=\"var(--rmg-theme-colour)\" />\n                        <text className=\"rmg-name__zh\" dy={0} textAnchor=\"middle\" fontSize={135} fill=\"#fff\">\n                            {num}\n                        </text>\n                    </>\n                ),\n                [num]\n            )}\n        </g>\n    );\n};\n","import React, { memo } from 'react';\n\nexport default memo(function StripMTR(props: { stripPc: number }) {\n    return (\n        <rect\n            fill=\"var(--rmg-theme-colour)\"\n            height={20}\n            style={{\n                width: 'var(--rmg-svg-width)',\n                ['--strip-percentage' as any]: props.stripPc,\n                transform: `translateY(calc(var(--strip-percentage, 95) * var(--rmg-svg-height) / 100 - 10px))`,\n            }}\n        />\n    );\n});\n"],"names":["memo","DefsMTR","stripPc","InfoMTR","id","d","fill","destNames","routes","useAppSelector","store","helper","svgWidths","param","svgWidth","direction","customisedMTRDestination","customiseMTRDest","platformNumber","platform_num","lineName","line_name","currentStationIndex","current_stn_idx","stationList","stn_list","terminal","validDests","Set","filter","route","includes","map","stnId","slice","ShortDirection","name","join","replace","destNameEl","React","width","bBox","setBBox","current","getBBox","toString","isLegacy","flagLength","arrowX","CanvasType","platformNumX","destNameX","style","transform","xlinkHref","PlatformNum","num","ref","textAnchor","className","fontSize","dy","props","others","cx","cy","r","height"],"sourceRoot":""}