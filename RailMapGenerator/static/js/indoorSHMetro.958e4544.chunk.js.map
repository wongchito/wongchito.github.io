{"version":3,"file":"static/js/indoorSHMetro.958e4544.chunk.js","mappings":"6TA2CA,EAhCuB,SAACA,GACpB,IAAMC,GAAQC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMF,SACtCG,EAAUH,EAAMI,SAASL,EAAMM,OAEjCC,EAAmB,GAOvB,OANmCA,EAAH,IAA5BH,EAAQI,SAASC,OAAiC,mBACjB,IAA5BL,EAAQI,SAASC,OAAiC,oBAClD,kBAAIL,EAAQM,SAASC,KAAK,KAA1B,OAAkCP,EAAQM,SAASC,KAAK,IAAM,KAAKF,OAAS,EAC9D,iBACC,iBAGpB,iCACI,SAACG,EAAD,CACIC,KAAMT,EAAQS,KACdC,MAAOV,EAAQM,SAASC,KACxBI,SAAUf,EAAMe,SAChBC,UAAWf,EAAMe,UACjBC,cAAejB,EAAMiB,cACrBT,SAAUR,EAAMQ,YAEpB,gBAAKU,UAAS,WAAMX,GAAoBY,OAAO,4BAE9Cf,EAAQI,SAASC,OAAS,IACvB,iBAAMW,UAAU,eAAeC,YAAY,KAAKC,SAAS,MAAMC,GAAG,MAAlE,qCACWnB,EAAQI,SAASC,OAAS,EAAI,sBAAS,GADlD,sBAmBVG,EAAsB,SAACZ,GAAqC,IAAD,QAC7D,OACI,eAAGwB,UAAS,sBAAyC,WAAxBxB,EAAMiB,cAA6B,IAAM,GAA1D,KAAZ,WACI,iBACIQ,IAAK,GACLC,GAAI,GACJC,GAA4B,WAAxB3B,EAAMiB,eAA8B,IAAM,GAC9CW,GAA4B,WAAxB5B,EAAMiB,eAA8B,IAAM,GAC9CE,OAAO,WAEX,iBACIQ,GAA4B,WAAxB3B,EAAMiB,eAA8B,IAAM,GAC9CW,GAA4B,WAAxB5B,EAAMiB,eAA6B,GAAW,GAClDE,OAAO,UAGV,kBAAInB,EAAMc,MAAM,KAAhB,OAAwBd,EAAMc,MAAM,IAAM,KAAKL,OAAS,IACrD,SAACoB,EAAD,CACIC,SAAQ,kBAAM9B,EAAMc,MAAM,KAAlB,OAA0Bd,EAAMc,MAAM,IAAM,KACpDiB,eAAgB/B,EAAMiB,cACtBT,SAAUR,EAAMQ,YAIxB,SAACwB,EAAD,CAAaC,QAASjC,EAAMa,KAAMI,cAAejB,EAAMiB,cAAeiB,KAAK,WAE1E,UAAAlC,EAAMc,MAAM,UAAZ,eAAgBL,QAAS,IACtB,cAAGe,UAAS,sBAAyC,WAAxBxB,EAAMiB,eAA8B,IAAM,IAA3D,KAAZ,UACI,SAACkB,EAAD,CAASC,SAAUpC,EAAMc,MAAM,QAItC,UAAAd,EAAMc,MAAM,UAAZ,eAAgBL,QAAS,IACtB,cACIe,UAAS,sBACmB,WAAxBxB,EAAMiB,cACA,UAAAjB,EAAMc,MAAM,UAAZ,SAAgBL,QACX,IACDT,EAAMc,MAAM,GAAGL,QACd,KACA,KACJ,UAAAT,EAAMc,MAAM,UAAZ,SAAgBL,OAAS,IAAMT,EAAMc,MAAM,GAAGL,OAAS,IAAM,KACnC,IAA1BT,EAAMQ,SAASC,OAAe,GAAK,GARrC,KADb,UAYI,SAAC4B,EAAD,CAAWC,WAAYtC,EAAMc,MAAM,WAOjDkB,EAAcO,EAAAA,YAChB,SACIvC,EACAwC,GAEA,IAAQP,EAAsCjC,EAAtCiC,QAAShB,EAA6BjB,EAA7BiB,cAAkBwB,GAAnC,OAA8CzC,EAA9C,GACMa,EAAOoB,EAAQ,GAAGS,MAAM,MACxBC,EAAWV,EAAQ,GAAGS,MAAM,MAAMjC,OAExC,OACI,8BACI+B,IAAKA,GACDC,GAFR,IAGIG,WAAW,SACXpB,UAAS,sBAAmC,WAAlBP,GAA8B,GAAK,GAAK,IAAM0B,EAAW,GAA1E,KAJb,SAMKJ,EAAAA,SACG,kBACI,gCACK1B,EAAKgC,KAAI,SAACC,EAAKC,EAAGC,GAAT,OACN,iBAEI5B,UAAU,eACVG,GAAsB,WAAlBN,EAA6B,GAAK8B,GAA8B,IAAzBC,EAAMvC,OAAS,EAAIsC,GAHlE,SAKKD,GAJIC,OAOb,cAAGzB,SAAU,IAAb,SACKW,EAAQ,GAAGS,MAAM,MAAMG,KAAI,SAACC,EAAKC,GAAN,OACxB,iBAEI3B,UAAU,eACVG,GACI,IAAMwB,EAAI,IACS,WAAlB9B,GAA8BJ,EAAKJ,OAAS,EAAkB,IAAdI,EAAKJ,OAAoB,GALlF,SAQKqC,GAPIC,cAf5B,OA6BOd,UAalBJ,EAAc,SAAC7B,GACjB,IAAQ8B,EAAuC9B,EAAvC8B,SAAUC,EAA6B/B,EAA7B+B,eAAgBvB,EAAaR,EAAbQ,SAG5ByC,EAAYnB,EAASe,KAAI,SAAAK,GAAO,OAAIA,EAAQ,MAAIC,QAAO,SAACtC,EAAMuC,GAAP,OAAiBvC,EAAOuC,IAAO,IAGtFC,EAAY,CACdvB,EACKwB,QAAO,SAAAJ,GAAO,OAAIA,EAAQ,GAAGK,MAAM,cACnCV,KAAI,SAAAK,GAAO,OAAIA,EAAQ,GAAGM,QAAQ,cAAe,SACjDC,KAAK,UACLC,OAAO,gBACZ5B,EACKwB,QAAO,SAAAJ,GAAO,OAAKA,EAAQ,GAAGK,MAAM,cACpCV,KAAI,SAAAK,GAAO,OAAIA,EAAQ,MACvBO,KAAK,WAETH,QAAO,SAAAzC,GAAI,OAAIA,GAAiB,iBAATA,KACvB4C,KAAK,UACJE,EAAc,CAChB,QAAQD,OACJ5B,EACKwB,QAAO,SAAAJ,GAAO,OAAIA,EAAQ,GAAGK,MAAM,eACnCV,KAAI,SAAAK,GAAO,OAAIA,EAAQ,GAAGM,QAAQ,OAAQ,IAAIA,QAAQ,OAAQ,IAAII,UAClEH,KAAK,MAEd3B,EACKwB,QAAO,SAAAJ,GAAO,OAAKA,EAAQ,GAAGK,MAAM,eACpCV,KAAI,SAAAK,GAAO,OAAIA,EAAQ,MACvBO,KAAK,WAETH,QAAO,SAAAzC,GAAI,OAAIA,GAAiB,UAATA,KACvB4C,KAAK,KAKJI,EAAkC,IAApBrD,EAASC,OAAe,GAAK,GAC3CqD,EAAgC,WAAnB/B,GAA+B,IAAM,KAA2B,IAApBvB,EAASC,OAAe,GAAK,GAE5F,OACI,0BACI,iBACIsD,GAAG,sBACH5C,OAAO,mBACP6C,YAAa,EACbxC,UAAS,sBAAoC,WAAnBO,GAA+B,GAAK,GAArD,mBACc,WAAnBA,EAA8B,EAAI,IAD7B,KAGTG,KAA0B,IAApBJ,EAASrB,OAAeqB,EAAS,GAAG,GAApC,mBAAqDmB,EAArD,KACNgB,EAAC,sBAAiBJ,EAAjB,6CAAiEA,EAAjE,QAGJ/B,EAASrB,OAAS,IACf,+BACI,2BACIsD,GAAE,cAASd,GACXtB,GAAG,IACHC,GAAG,IACHH,GAAuB,WAAnBM,EAA8B,MAAQ,MAC1CL,GAAuB,WAAnBK,EAA8B,MAAQ,MAL9C,SAOKD,EAASe,KAAI,SAACK,EAASH,GAAV,OACV,UAAC,WAAD,YAEI,iBACImB,OAAM,UAAM,IAAMpC,EAASrB,QAAWsC,EAAI,GAApC,KACNoB,UAAWjB,EAAQ,MAEvB,iBACIgB,OAAM,UAAM,IAAMpC,EAASrB,QAAWsC,EAAI,GAApC,KACNoB,UAAWjB,EAAQ,OARNH,WAyBrC,eAAGvB,UAAS,sBAAiBsC,EAAjB,KAAgClB,WAAW,SAAvD,WACI,iBAAMxB,UAAU,eAAeG,IAAK,EAApC,+BACU8B,MAEV,iBAAMjC,UAAU,eAAeG,GAAI,EAAGD,SAAU,IAAhD,+BACoBqC,YAO9BxB,EAAU,SAACnC,GACb,OAAOuC,EAAAA,SACH,kBACI,eAAGK,WAAW,SAAStB,SAAS,MAAhC,WACI,iBAAMF,UAAU,eAAeG,IAAK,EAApC,+BACUvB,EAAMoC,SAASS,KAAI,SAAAlC,GAAI,OAAIA,EAAK,MAAI8C,KAAK,cAEnD,iBAAMrC,UAAU,eAAeG,GAAI,EAAnC,yDAGA,iBAAMH,UAAU,eAAeG,GAAI,KAAMD,SAAS,MAAlD,sDAMR,CAACtB,EAAMoC,SAASgC,cAIlB/B,EAAY,SAACrC,GACf,OAAOuC,EAAAA,SACH,kBACI,eAAGK,WAAW,SAAd,WACI,iBAAMxB,UAAU,eAAeG,IAAK,EAApC,+BACUvB,EAAMsC,WAAWO,KAAI,SAAAlC,GAAI,OAAIA,EAAK,MAAI8C,KAAK,cAErD,iBAAMrC,UAAU,eAAeG,GAAI,IAAKD,SAAU,IAAlD,sBACWtB,EAAMsC,WAAWO,KAAI,SAAAlC,GAAI,OAAIA,EAAK,MAAI8C,KAAK,cAK9D,CAACzD,EAAMsC,WAAW8B,c,mBCnS1B,GAAeC,EAAAA,EAAAA,OAAK,WAChB,OACI,iCACI,SAACC,EAAD,KACA,SAACC,EAAD,UAKCD,EAAc/B,EAAAA,MAAW,kBAClC,6BACI,mBACIwB,GAAG,gBACH7B,KAAK,mBACL8B,YAAa,EACb7C,OAAO,0BACPqD,EAAG,EACHhD,UAAU,gBAEd,iBACIuC,GAAG,iBACH7B,KAAK,mBACLf,OAAO,QACPK,UAAU,4BACVwC,YAAa,EACbC,EAAE,oDAEN,iBACIF,GAAG,oBACH7B,KAAK,mBACLf,OAAO,QACPK,UAAU,4BACVwC,YAAa,EACbC,EAAE,oDAEN,iBACIF,GAAG,mBACH7B,KAAK,mBACLf,OAAO,QACPK,UAAU,4BACVwC,YAAa,EACbC,EAAE,yDAKRQ,EAAiB,SAACC,EAAsBpE,GAC1C,IAAIqE,EAAM,EAGV,OAFsC,IAAlCD,EAAQpE,GAAOsE,QAAQnE,SAAckE,GAAO,GACW,IAAvDD,EAAQA,EAAQpE,GAAOsE,QAAQ,IAAIC,SAASpE,SAAckE,GAAO,GAC9DA,GAGLG,EAAkB,SAACJ,EAAsBpE,GAC3C,IAAIqE,EAAM,EAGV,OAFuC,IAAnCD,EAAQpE,GAAOuE,SAASpE,SAAckE,GAAO,GACU,IAAvDD,EAAQA,EAAQpE,GAAOuE,SAAS,IAAID,QAAQnE,SAAckE,GAAO,GAC9DA,GAGLJ,EAAgB,WAClB,OAA4CrE,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAM4E,UAAlEC,EAAR,EAAQA,OAAQC,EAAhB,EAAgBA,SAAmBC,EAAnC,EAA0BC,QACpBlF,GAAQC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMF,SAEtCmF,GAASC,EAAAA,EAAAA,IAAcpF,EAAMI,SAAUoE,EAAgBK,GAEvDQ,GAAeC,EAAAA,EAAAA,IAAmB,YAAa,UAAWH,GAC1DI,GAASD,EAAAA,EAAAA,IAAmBD,EAAaG,MAAM,GAAIH,EAAaG,MAAMC,OAAO,GAAG,GAAIN,GAEpFO,EAAUpD,EAAAA,SACZ,WAEI,OADAqD,QAAQC,IAAI,sBACLC,OAAOC,KAAK9F,EAAMI,UAAU8C,QAC/B,SAAC6C,EAAKC,GAAN,eAAC,UAAmBD,GAApB,cAA0BC,GAAMC,EAAAA,EAAAA,IAAaD,EAAKb,EAAQH,OAC1D,MAIR,CAACA,EAASb,WAAY+B,KAAKC,UAAUhB,KAEnCiB,EAA2B,CAC5BpG,EAAMqG,SAASC,OAAStG,EAAMuG,QAAW,IAC1CvG,EAAMqG,SAASC,QAAU,EAAItG,EAAMuG,QAAU,MAE3CC,EAAKX,OAAOC,KAAKJ,GAASxC,QAC5B,SAAC6C,EAAKC,GAAN,eAAC,UAAmBD,GAApB,cAA0BC,EAAMI,EAAO,GAAMV,EAAQM,GAAOT,EAAOkB,KAAQL,EAAO,GAAKA,EAAO,QAC9F,IAGEM,GAAUC,EAAAA,EAAAA,UACZ,kBAAMC,EAAAA,EAAAA,WAAuB5G,EAAMI,SAAU4E,KAE7C,CAACC,IAEC4B,EAAKhB,OAAOC,KAAKY,GAASxD,QAC5B,SAAC6C,EAAKC,GAAN,eAAC,UAAmBD,GAApB,cAA0BC,EAAMU,EAAQV,GAAOhG,EAAM8G,eAAiB,MACtE,IAGEC,EAAYzE,EAAAA,SACd,kBAAM0E,EAAAA,EAAAA,IAAYhH,EAAMiH,gBAAiBlC,EAAQ/E,EAAMe,aAEvD,CAACf,EAAMiH,gBAAiBjH,EAAMe,UAAWgE,EAAOZ,aAG9C+C,EAAcrB,OAAOsB,OAAOC,EAAAA,IAC5BC,EAAkBxB,OAAOsB,OAAOnH,EAAMI,UACvCwC,KAAI,SAAA0E,GAAW,OAAIA,EAAY/G,YAC/BgH,OACArE,QACG,SAAC6C,EAAKC,GAEF,OADAD,EAAImB,EAAYM,QAAQxB,KAAQ,EACzBD,IAEX,EAAC,GAAO,GAAO,IAElBnD,KAAI,SAAC6E,EAAM3E,GAAP,MAAa,CAACoE,EAAYpE,GAAI2E,MAClCpE,QAAO,SAAAqE,GAAC,OAAIA,EAAE,MACd9E,KAAI,SAAA8E,GAAC,OAAIA,EAAE,MAEVC,EAAYf,EAAAA,EAAAA,SACd5B,EACA+B,EACA/G,EAAMI,SACNgG,EACAI,EACAK,EACuB,EAAvB7G,EAAM8G,eACNzB,EACA,GAGJ,OACI,iCACI,eAAGvB,GAAG,OAAOvC,UAAS,sBAAiBvB,EAAM4H,WAAa,EAApC,KAAtB,WACI,SAACC,EAAD,CAAOC,MAAOH,EAAWpH,SAAU8G,KACnC,SAACU,EAAD,CAAcvB,GAAIA,EAAIK,GAAIA,EAAIE,UAAWA,EAAWxG,SAAU8G,QAElE,SAACW,EAAD,QAKNH,EAAQ,SAAC9H,GACX,OACI,cAAGkC,KAAK,OAAO8B,YAAa,GAAI7C,OAAO,0BAAvC,SACKnB,EAAMQ,SAASqC,KAAI,SAACqF,EAASnF,GAAV,OAChB,eAA4BvB,UAAS,uBAAsB,GAAJuB,EAAlB,KAArC,UACK/C,EAAM+H,MAAMI,KAAKtF,KAAI,SAACuF,EAAMrF,GAAP,OAClB,iBAAckB,EAAGmE,GAANrF,MAEd/C,EAAM+H,MAAMM,KAAKxF,KAAI,SAACuF,EAAMrF,GAAP,OAClB,iBAAckB,EAAGmE,GAANrF,QALnB,sBAAuBA,UAoBjCiF,EAAe,SAAChI,GAClB,IAAQiF,GAAa/E,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAM4E,UAA3CE,SACFhF,GAAQC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMF,SACpCwG,EAAgCzG,EAAhCyG,GAAIK,EAA4B9G,EAA5B8G,GAAIE,EAAwBhH,EAAxBgH,UAAWxG,EAAaR,EAAbQ,SAE3B,OACI,uBACKsF,OAAOC,KAAK9F,EAAMI,UACdiD,QAAO,SAAAhD,GAAK,OAAK,CAAC,YAAa,WAAWgI,SAAShI,MACnDgD,QAAO,SAAAhD,GAAK,OAA8C,IAA1CL,EAAMI,SAASC,GAAOE,SAASC,UAC/CoC,KAAI,SAAAvC,GAAK,OACN,cAAekB,UAAS,oBAAeiF,EAAGnG,GAAlB,YAA4BwG,EAAGxG,GAA/B,KAAxB,UACI,SAAC,EAAD,CACIA,MAAOA,EACPS,SAAUiG,EAAU1G,GACpBW,cACIgE,EACK3B,QAAO,SAAAiF,GAAM,OAAIA,EAAOD,SAAShI,MACjCuC,KAAI,SAAA0F,GAAM,OACPA,EAAOd,QAAQnH,GAAS,IAAM,GAAKE,EAASC,OAAS,EAAI,WAAa,YACxE,GAEVD,SAAUA,KAXVF,SAmBtB2H,EAAe,WACjB,IAAMhI,GAAQC,EAAAA,EAAAA,KAAe,SAAAC,GAAK,OAAIA,EAAMF,SAE5C,OAAOsC,EAAAA,SACH,kBACI,iCACI,cAAGf,UAAS,oBAAevB,EAAMqG,SAASC,OAAS,EAAvC,QAAZ,UACI,kBAAM3D,WAAW,SAAStB,SAAS,KAAKF,UAAU,eAAlD,qCACSnB,EAAMuI,UAAU,GADzB,mDAIJ,eAAGhH,UAAS,oBAAevB,EAAMqG,SAASC,OAAS,EAAvC,YAA4CtG,EAAM4H,WAAa,IAA/D,KAAZ,WACI,iBAAMjF,WAAW,SAAStB,SAAS,KAAKF,UAAU,eAAeqH,GAAG,MAAMlH,GAAG,MAA7E,qTAGA,iBAAMqB,WAAW,SAAStB,SAAS,KAAKF,UAAU,eAAeqH,GAAG,KAAKlH,GAAG,MAA5E,sKAIA,eAAGC,UAAU,sBAAb,WACI,iBAAMkH,EAAE,KAAKC,EAAE,MAAMC,MAAM,MAAMC,OAAO,KAAK3G,KAAK,OAAOf,OAAO,QAAQ2H,GAAG,OAC3E,iBAAMrH,GAAG,KAAKC,GAAG,KAAKC,GAAG,MAAMC,GAAG,KAAKT,OAAO,WAC9C,iBAAMC,UAAU,eAAeqH,GAAG,IAAInH,SAAS,KAA/C,qBAGA,iBAAMF,UAAU,eAAeqH,GAAG,IAAIlH,GAAG,KAAKD,SAAS,KAAvD,qBAGA,iBAAMF,UAAU,eAAeG,GAAG,KAAKD,SAAS,IAAhD,qBAGA,gBACIE,UAAU,mBACVN,UAAU,kBACVC,OAAO,6BAEX,iBAAMC,UAAU,eAAeqH,GAAG,KAAKlH,GAAG,KAAKD,SAAS,KAAxD,iCAGA,iBAAMF,UAAU,eAAeqH,GAAG,KAAKlH,GAAG,KAAKD,SAAS,IAAxD,0BAGA,iBAAMF,UAAU,eAAeqH,GAAG,KAAKlH,GAAG,KAAKD,SAAS,IAAxD,gCAQhB,CAACrB,EAAMqG,SAASC,OAAQtG,EAAM4H,WAAY5H,EAAMuI,c,gGC5P3C3B,EAAb,gMACcpC,eAAiB,SAACnE,GACxB,IAAIqE,EAAM,EACJjE,EAAa,EAAKgE,QAAQpE,GAA1BI,SACFqI,EAAKrI,EAASC,KAAKkC,KAAI,SAAAmG,GAAG,OAAIA,EAAIvI,UActC,MAb4B,MAAxBC,EAASuI,cAEJF,EAAG,IAAMA,EAAG,GAAK,IAAGpE,GAAO,KAE5BoE,EAAG,IAAiB,IAAVA,EAAG,IAAsB,IAAVA,EAAG,KAAWpE,GAAO,KAExC,IAAVoE,EAAG,IAAsB,IAAVA,EAAG,IAEqB,cAAnC,EAAKrE,QAAQpE,GAAOsE,QAAQ,IAA0D,YAApC,EAAKF,QAAQpE,GAAOuE,SAAS,KAC/EF,GAAO,IAE4B,IAAvC,EAAKD,QAAQpE,GAAOsE,QAAQnE,SAAckE,GAAO,IACgB,IAAjE,EAAKD,QAAQ,EAAKA,QAAQpE,GAAOsE,QAAQ,IAAIC,SAASpE,SAAckE,GAAO,IACxEA,GAlBf,EAqBcG,gBAAkB,SAACxE,GACzB,IAAIqE,EAAM,EACJjE,EAAa,EAAKgE,QAAQpE,GAA1BI,SACFqI,EAAKrI,EAASC,KAAKkC,KAAI,SAAAmG,GAAG,OAAIA,EAAIvI,UActC,MAb4B,MAAxBC,EAASuI,cAEJF,EAAG,IAAMA,EAAG,GAAK,IAAGpE,GAAO,KAE5BoE,EAAG,IAAiB,IAAVA,EAAG,IAAsB,IAAVA,EAAG,KAAWpE,GAAO,KAExC,IAAVoE,EAAG,IAAsB,IAAVA,EAAG,IAEqB,cAAnC,EAAKrE,QAAQpE,GAAOsE,QAAQ,IAA0D,YAApC,EAAKF,QAAQpE,GAAOuE,SAAS,KAC/EF,GAAO,IAE6B,IAAxC,EAAKD,QAAQpE,GAAOuE,SAASpE,SAAckE,GAAO,IACe,IAAjE,EAAKD,QAAQ,EAAKA,QAAQpE,GAAOuE,SAAS,IAAID,QAAQnE,SAAckE,GAAO,IACxEA,GAtCf,oB,QAAiCuE,K,iQCOpB7D,EAAgB,SACzBX,EACAyE,EACAC,GAEA,OAAOtD,OAAOC,KAAKrB,GAASvB,QACxB,SAAC6C,EAAKC,GAAN,eAAC,UACMD,GADP,cAEKC,EAAMvB,EAAQuB,GAAKpB,SAAS1B,QACzB,SAACkG,EAAGC,GAAJ,eAAC,UAAeD,GAAhB,cAAoBC,EAAI,EAAIH,EAAMzE,EAAS4E,GAAKF,EAAO1E,EAASuB,OAChE,QAGR,KAUKV,EAAqB,SAArBA,EAAsBgE,EAAcC,EAAYpE,GACzD,GAAImE,IAASC,EACT,MAAO,CAAE9C,IAAK,EAAGjB,MAAO,CAAC8D,IAE7B,IAAIE,EAAuB,GACvBC,EAA4B,GAChC5D,OAAOC,KAAKX,EAAOmE,IAAOI,SAAQ,SAAAC,GAC9B,IAAIC,EAAKtE,EAAmBqE,EAAOJ,EAAIpE,GACnCyE,EAAGnD,IAAM,IACb+C,EAAWK,KAAK1E,EAAOmE,GAAMK,GAASC,EAAGnD,KACzCmD,EAAGpE,MAAMsE,QAAQR,GACjBG,EAAcI,KAAKD,EAAGpE,WAE1B,IAAIuE,EAAYC,KAAKC,IAAL,MAAAD,KAAYR,GAC5B,MAAO,CACH/C,IAAKsD,EACLvE,MAAOiE,EAAcD,EAAWhC,QAAQuC,MAInC9D,EAAe,SAAC5F,EAAe8E,EAA0CH,GAClF,IAAIK,EAAeC,EAAmB,YAAa,UAAWH,GAC9D,GAAIE,EAAaG,MAAM6C,SAAShI,GAC5B,OAAOiF,EAAmBD,EAAaG,MAAM,GAAInF,EAAO8E,GAAQsB,IAMhE,IAHA,IAAIyD,EAAclF,EAAS3B,QAAO,SAAAiF,GAAM,OAAIA,EAAOD,SAAShI,MAAQ,GAEhE8J,EAAa9J,GACTgF,EAAaG,MAAM6C,SAAS8B,IAChCA,EAAaD,EAAYA,EAAY1C,QAAQ2C,GAAc,GAG/D,IADA,IAAIC,EAAW/J,GACPgF,EAAaG,MAAM6C,SAAS+B,IAChCA,EAAWF,EAAYA,EAAY1C,QAAQ4C,GAAY,GAG3D,IAAIC,EAA6B,cAAfF,EAIdG,EAAO,GAkBX,OAjBKD,GAJ2B,YAAbD,EASRC,GACPC,EAAK,GAAK,EACVA,EAAK,GAAKhF,EAAmBD,EAAaG,MAAM,GAAI4E,EAAUjF,GAAQsB,IACtE6D,EAAK,GAAKhF,EAAmB4E,EAAY,GAAI7J,EAAO8E,GAAQsB,IAC5D6D,EAAK,GAAKhF,EAAmBjF,EAAO+J,EAAUjF,GAAQsB,MAGtD6D,EAAK,GAAKhF,EAAmBD,EAAaG,MAAM,GAAI2E,EAAYhF,GAAQsB,IACxE6D,EAAK,GAAKhF,EAAmB6E,EAAY9E,EAAaG,MAAMC,OAAO,GAAG,GAAIN,GAAQsB,IAClF6D,EAAK,GAAKhF,EAAmB6E,EAAY9J,EAAO8E,GAAQsB,IACxD6D,EAAK,GAAKhF,EAAmBjF,EAAO6J,EAAYzE,OAAO,GAAG,GAAIN,GAAQsB,MAdtE6D,EAAK,GAAKhF,EAAmBD,EAAaG,MAAM,GAAI2E,EAAYhF,GAAQsB,IACxE6D,EAAK,GAAKhF,EAAmB6E,EAAYC,EAAUjF,GAAQsB,IAC3D6D,EAAK,GAAKhF,EAAmB6E,EAAY9J,EAAO8E,GAAQsB,IACxD6D,EAAK,GAAKhF,EAAmBjF,EAAO+J,EAAUjF,GAAQsB,KAanD6D,EAAK,GAAMA,EAAK,GAAKA,EAAK,IAAOA,EAAK,GAAKA,EAAK,KAiClDtD,EAAc,SACvBuD,EACAxF,EACAhE,GACmC,IAAD,EAElC,OADA4E,QAAQC,IAAI,+BACL,OAAI,IAAI4E,KAAK,MAAgB/G,OAAjB,gBAA2BsB,MAAU7B,QACpD,SAAC6C,EAAKC,GAAN,eAAC,UACMD,GADP,cAEKC,EACGA,IAAQuE,EACF,GAEIxJ,IAAc0J,EAAAA,GAAAA,MAtBnB,SAACC,EAAgBC,EAAgB5F,GAAwB,IAAD,YACvDA,GADuD,IACzE,2BAA0B,CAAC,IAAlB6F,EAAiB,QAClBC,EAAOD,EAAMpD,QAAQkD,GACrBI,EAAOF,EAAMpD,QAAQmD,GACzB,IAAc,IAAVE,GAAeA,EAAOC,EAAM,OAAO,GAJ8B,8BAMzE,OAAO,EAiBqBC,CAAaR,EAAWvE,EAAKjB,GAhCtC,SAAC2F,EAAgBC,EAAgB5F,GAAwB,IAAD,YACzDA,GADyD,IAC3E,2BAA0B,CAAC,IAAlB6F,EAAiB,QAClBC,EAAOD,EAAMpD,QAAQkD,GACrBI,EAAOF,EAAMpD,QAAQmD,GACzB,IAAc,IAAVG,GAAeA,EAAOD,EAAM,OAAO,GAJgC,8BAM3E,OAAO,EA2BqBG,CAAeT,EAAWvE,EAAKjB,IAEzC,GACC,MAEf,KAIKkE,EAAb,WAOI,WAAYgC,GAA8C,IAAD,4BANzDvE,QAAU,GAM+C,KALzDhB,QAAU,GAK+C,KAJzDwF,SAAW,GAI8C,KAHzDzG,QAAU,GAG+C,KAFzDY,aAAe,GAE0C,KAQ/Cb,eAAiB,SAACnE,GACxB,OAAO,GAT8C,KAe/CwE,gBAAkB,SAACxE,GACzB,OAAO,GAhB8C,KAsBlD8K,WAAa,SAACT,EAAgBC,GACjC,OAAK,EAAKlG,QAAQiG,GAAQ9F,SAASyD,SAASsC,GAGrC,EAAI,EAAK9F,gBAAgB6F,GAAU,EAAKlG,eAAemG,IAFlDS,EAAAA,GAxByC,KA6EjDC,eAAiB,SAACC,GACtB,IAEIC,EAFK,GACEC,KACYxB,KAAKyB,KAAK,GAC7BC,EAAOJ,EAAgB,EAAIC,EAE/B,MAAO,CAAEC,GALA,GAKIG,KAJFH,KAIQD,KAAAA,EAAMK,KADdF,EAAO1B,KAAKyB,KAAK,GACGC,KAAAA,IAnFsB,KAyFjDG,WAAa,SAACP,GAClB,MAAqC,EAAKD,eAAeC,GAAnDE,EAAN,EAAMA,GAAIG,EAAV,EAAUA,KAAMJ,EAAhB,EAAgBA,KAAMK,EAAtB,EAAsBA,KAAMF,EAA5B,EAA4BA,KAC5B,MAAM,KAAN,OAAYF,EAAZ,YAAkBA,EAAlB,kBAA8BG,EAA9B,YAAsCJ,EAAtC,cAAgDK,EAAhD,YAAwDF,EAAxD,cAAkEF,EAAlE,YAAwEA,EAAxE,kBAAoFG,EAApF,YAA4FJ,IA3FvC,KAiGjDO,WAAa,SAACR,GAClB,MAAqC,EAAKD,eAAeC,GAAnDE,EAAN,EAAMA,GAAIG,EAAV,EAAUA,KAAMJ,EAAhB,EAAgBA,KAAMK,EAAtB,EAAsBA,KAAMF,EAA5B,EAA4BA,KAC5B,MAAM,KAAN,OAAYF,EAAZ,YAAkBA,EAAlB,kBAA8BG,EAA9B,aAAuCJ,EAAvC,cAAiDK,EAAjD,aAA0DF,EAA1D,cAAoEF,EAApE,YAA0EA,EAA1E,kBAAsFG,EAAtF,aAA+FJ,IAlG/FQ,KAAKtH,QAAUwG,EAAKxG,QACpBsH,KAAK1G,aAAe4F,EAAK5F,aATjC,wCAoCI,SAAoBhF,EAAe2E,GAC/B,GAAI3E,KAAS0L,KAAKrF,QAAS,OAAOqF,KAAKrF,QAAQrG,GAE/C,GACI,CAAC,YAAa,WAAWgI,SAAShI,IAClC0L,KAAKtH,QAAQpE,GAAOsE,QAAQnE,OAAS,GACrCuL,KAAKtH,QAAQpE,GAAOuE,SAASpE,OAAS,EAGtC,OADAuL,KAAKrF,QAAQrG,GAAS,EACf,EAEX,IAAI2L,EAAUD,KAAKtH,QAAQpE,GAAOsE,QAAQ,GAC1C,GAAIqH,EAAS,CAET,GAA8C,IAA1CD,KAAKtH,QAAQuH,GAASpH,SAASpE,OAAc,CAE7C,IAAIkE,EAAMqH,KAAKE,UAAUD,GAEzB,OADAD,KAAKrF,QAAQrG,GAASqE,EACfA,EAGP,IAAIA,EAAgE,IAAlDqH,KAAKtH,QAAQuH,GAASpH,SAAS4C,QAAQnH,GAAe,GAAK,EAE7E,OADA0L,KAAKrF,QAAQrG,GAASqE,EACfA,EAKX,OADAqH,KAAKrF,QAAQrG,GAAS,EACf,IAhEnB,uBAgHI,SACI6L,EACA9F,EACApB,EACAmH,EACAC,EACAd,EACA1B,EACAyC,GACD,IAAD,OACE,UAA6B,GAA7B,GAAKC,EAAL,KAAaC,EAAb,KAAoBC,EAApB,KACIrE,EAAO,GAEX,EAAqB4D,KAAKV,eAAeC,GACrCmB,EADJ,EAAMd,KAAN,EAAYC,KACc,EACtBc,GAActG,EAAO,GAAKA,EAAO,IAAMwD,EAAGnD,IAAO,EACjDkG,IAAcvG,EAAO,GAAKA,EAAO,IAAMwD,EAAGnD,IAAM,EAAIgG,GAAS,EAiDjE,OAhDIE,EAAYD,EAAY,GACxB/G,QAAQiH,KAAR,+BAAqCD,EAAYD,IAGrDR,EAAOxC,SAAQ,SAAArJ,GACX,IAAIoI,EAAI0D,EAAO9L,GACXqI,EAAI0D,EAAO/L,GACf,IAAKkM,GAAmB,IAAVA,EAmBV,OAlBCD,EAAyBjM,EAAjBmM,EAAwB/D,EAAjB8D,EAAoB7D,OACd,IAAlBwD,EAAO1L,OACP2H,EAAK0B,KAAL,YAAepB,EAAf,YAAoBC,IACZ1D,EAAS,GAAGqD,SAAShI,GAGtB2E,EAAS,GAAGqD,SAAS6D,EAAO,IAEnC/D,EAAK0B,KAAL,YAAepB,EAAf,YAAoBC,KAGhByD,EAAOD,EAAO,IAAM,GACpB/D,EAAK0B,KAAL,YAAepB,EAAf,YAAoBC,EAAI2D,IAExBD,EAAOF,EAAO,IAAM,GACpB/D,EAAK0B,KAAL,YAAepB,EAAf,YAAoBC,EAAI2D,KAV5BlE,EAAK0B,KAAL,YAAepB,EAAf,YAAoBC,KAexBA,EAAI6D,GACJpE,EAAK0B,KACD,YAAM,IAANnB,EACWD,EAAI+D,EAAQE,EAAY,EAAKlI,eAAenE,GAASsM,EAAoB,EAARF,EACjEC,EAAY,EAAK7H,gBAAgByH,GAAUK,IAE1DxE,EAAK0B,KAAK,EAAKgC,WAAWP,KACnB5C,EAAI6D,IACXpE,EAAK0B,KACD,YAAM,IAANnB,EACWD,EAAI+D,EAAQE,EAAY,EAAKlI,eAAenE,GAASsM,EAAoB,EAARF,EACjEC,EAAY,EAAK7H,gBAAgByH,GAAUK,IAE1DxE,EAAK0B,KAAK,EAAKiC,WAAWR,KAE9BnD,EAAK0B,KAAL,YAAepB,IACd6D,EAAyBjM,EAAjBmM,EAAwB/D,EAAjB8D,EAAoB7D,KAIjCP,EAAK3E,KAAK,KAAKD,QAAQ,kBAAmB,YAjLzD,yBAoEI,SAAkBkB,EAAsBO,GACpCW,QAAQC,IAAI,sBACZ,IAAIiH,EAAW,IAAId,KAAK,CAAEtH,QAAAA,IAQ1B,OANAoB,OAAOC,KAAKrB,GAASiF,SAAQ,SAAArJ,GACrB,CAAC,YAAa,WAAWgI,SAAShI,IAClCA,KAASwM,EAASnG,SACtBmG,EAASZ,UAAU5L,EAAO2E,MAGvB6H,EAASnG,UA9ExB,sBAoLI,SACI1B,EACA+B,EACAtC,EACA2B,EACAI,EACAK,EACAyE,EACA1B,GAED,IAAD,OADEyC,EACF,uDADc,KAER1E,EAAY,CAAEO,KAAM,GAAgBE,KAAM,IAsD9C,OArDApD,EAAS0E,SAAQ,SAACpB,EAAQxF,GAEtB,IAAIgK,GADJxE,EAASA,EAAOjF,QAAO,SAAAhD,GAAK,OAAK,CAAC,YAAa,WAAWgI,SAAShI,OACzCgD,QAAO,SAAAhD,GAAK,OAAI0G,EAAU1G,IAAU,KAC1D0M,EAAezE,EAAOjF,QAAO,SAAAhD,GAAK,OAAI0G,EAAU1G,IAAU,KAElC,IAAxByM,EAAatM,SACbuM,EAAezE,GAG6D,IAA5EwE,EAAazJ,QAAO,SAAAhD,GAAK,OAAqC,IAAjC0M,EAAavF,QAAQnH,MAAeG,QAAgBsM,EAAatM,SAE1FuM,EAAa,KAAOzE,EAAO,GAE3ByE,EAAalD,KAAKiD,EAAa,IAE/BA,EAAa,KAAOxE,EAAO,IAC3BwE,EAAaA,EAAatM,OAAS,KAAO8H,EAAOA,EAAO9H,OAAS,IACjEuM,EAAavM,QAEbuM,EAAezE,EACfwE,EAAe,IAGfC,EAAajD,QAAQgD,EAAaA,EAAatM,OAAS,KAIhEmH,EAAUO,KAAK2B,KACX,IAAI,EAAK,CAAEpF,QAAAA,EAASY,aAAcuE,IAAMoD,UACpCF,EACA1G,EACApB,EACAwB,EACAK,EACAyE,EACA1B,EACAyC,IAGR1E,EAAUS,KAAKyB,KACX,IAAI,EAAK,CAAEpF,QAAAA,EAASY,aAAcuE,IAAMoD,UACpCD,EACA3G,EACApB,EACAwB,EACAK,EACAyE,EACA1B,EACAyC,OAKL1E,MArPf,KAyPasF,EAAW,SAACjI,EAAsB+B,GAC3C,IAAIY,EAAY,CAAEO,KAAM,GAAkBE,KAAM,IAgChD,OA/BApD,EAAS0E,SAAQ,SAAApB,GAEb,IAAIwE,GADJxE,EAASA,EAAOjF,QAAO,SAAAhD,GAAK,OAAK,CAAC,YAAa,WAAWgI,SAAShI,OACzCgD,QAAO,SAAAhD,GAAK,OAAI0G,EAAU1G,IAAU,KAC1D0M,EAAezE,EAAOjF,QAAO,SAAAhD,GAAK,OAAI0G,EAAU1G,IAAU,KAElC,IAAxByM,EAAatM,SACbuM,EAAezE,GAG6D,IAA5EwE,EAAazJ,QAAO,SAAAhD,GAAK,OAAqC,IAAjC0M,EAAavF,QAAQnH,MAAeG,QAAgBsM,EAAatM,SAE1FuM,EAAa,KAAOzE,EAAO,GAE3ByE,EAAalD,KAAKiD,EAAa,IAE/BA,EAAa,KAAOxE,EAAO,IAC3BwE,EAAaA,EAAatM,OAAS,KAAO8H,EAAOA,EAAO9H,OAAS,IACjEuM,EAAavM,QAEbuM,EAAezE,EACfwE,EAAe,IAGfC,EAAajD,QAAQgD,EAAaA,EAAatM,OAAS,KAIhEmH,EAAUO,KAAK2B,KAAKiD,GACpBnF,EAAUS,KAAKyB,KAAKkD,MAGjBpF","sources":["svgs/indoor/station-shmetro.tsx","svgs/indoor/indoor-shmetro.tsx","svgs/railmap/methods/mtr.ts","svgs/railmap/methods/share.ts"],"sourcesContent":["import React from 'react';\nimport { InterchangeInfo, Name, Services } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n    nameDirection: 'upward' | 'downward';\n    services: Services[];\n}\n\nconst StationSHMetro = (props: Props) => {\n    const param = useAppSelector(store => store.param);\n    const stnInfo = param.stn_list[props.stnId];\n\n    let stationIconStyle = '';\n    if (stnInfo.services.length === 3) stationIconStyle = 'direct_indoor_sh';\n    else if (stnInfo.services.length === 2) stationIconStyle = 'express_indoor_sh';\n    else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n        stationIconStyle = 'int2_indoor_sh';\n    else stationIconStyle = 'stn_indoor_sh';\n\n    return (\n        <>\n            <StationNameGElement\n                name={stnInfo.name}\n                infos={stnInfo.transfer.info}\n                stnState={props.stnState}\n                direction={param.direction}\n                nameDirection={props.nameDirection}\n                services={props.services}\n            />\n            <use xlinkHref={`#${stationIconStyle}`} stroke=\"var(--rmg-theme-colour)\" />\n            {/* This should be in IntBoxGroupProps, put here because the station icon will cover this */}\n            {stnInfo.services.length > 1 && (\n                <text className=\"rmg-name__zh\" writingMode=\"tb\" fontSize=\"60%\" dy=\"-12\">\n                    {`大站车${stnInfo.services.length > 2 ? ' 直达车' : ''}停靠`}\n                </text>\n            )}\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    nameDirection: 'upward' | 'downward';\n    services: Services[];\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    return (\n        <g transform={`translate(0,${props.nameDirection === 'upward' ? 60 : -30})`}>\n            <line\n                x1={-30}\n                x2={30}\n                y1={props.nameDirection === 'upward' ? -23 : -10}\n                y2={props.nameDirection === 'upward' ? -23 : -10}\n                stroke=\"black\"\n            />\n            <line\n                y1={props.nameDirection === 'upward' ? -23 : -10}\n                y2={props.nameDirection === 'upward' ? -23 - 25 : 20}\n                stroke=\"black\"\n            />\n\n            {[...props.infos[0], ...(props.infos[1] || [])].length > 0 && (\n                <IntBoxGroup\n                    intInfos={[...props.infos[0], ...(props.infos[1] || [])]}\n                    arrowDirection={props.nameDirection}\n                    services={props.services}\n                />\n            )}\n\n            <StationName stnName={props.name} nameDirection={props.nameDirection} fill=\"black\" />\n\n            {props.infos[1]?.length > 0 && (\n                <g transform={`translate(0,${props.nameDirection === 'upward' ? -185 : 150})`}>\n                    <OSIText osiInfos={props.infos[1]} />\n                </g>\n            )}\n\n            {props.infos[2]?.length > 0 && (\n                <g\n                    transform={`translate(0,${\n                        props.nameDirection === 'upward'\n                            ? props.infos[1]?.length\n                                ? -210\n                                : props.infos[0].length\n                                ? -180\n                                : -100\n                            : (props.infos[1]?.length ? 190 : props.infos[0].length ? 160 : 75) +\n                              (props.services.length === 3 ? 40 : 0)\n                    })`}\n                >\n                    <OSysIText osysiInfos={props.infos[2]} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (\n        props: { stnName: Name; nameDirection: 'upward' | 'downward' } & React.SVGProps<SVGGElement>,\n        ref: React.Ref<SVGGElement>\n    ) => {\n        const { stnName, nameDirection, ...others } = props;\n        const name = stnName[0].split('\\\\');\n        const nameENLn = stnName[1].split('\\\\').length;\n\n        return (\n            <g\n                ref={ref}\n                {...others}\n                textAnchor=\"middle\"\n                transform={`translate(0,${nameDirection === 'upward' ? -2 : -30 - 12 * (nameENLn - 1)})`}\n            >\n                {React.useMemo(\n                    () => (\n                        <>\n                            {name.map((txt, i, array) => (\n                                <text\n                                    key={i}\n                                    className=\"rmg-name__zh\"\n                                    dy={nameDirection === 'upward' ? 16 * i : (array.length - 1 - i) * -16}\n                                >\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text\n                                        key={i}\n                                        className=\"rmg-name__en\"\n                                        dy={\n                                            12 * (i + 1) +\n                                            (nameDirection === 'upward' ? (name.length > 1 ? name.length * 7.5 : 0) : 0)\n                                        }\n                                    >\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\ninterface IntBoxGroupProps {\n    intInfos: InterchangeInfo[];\n    arrowDirection: 'upward' | 'downward';\n    services: Services[];\n}\n\nconst IntBoxGroup = (props: IntBoxGroupProps & React.SVGProps<SVGGElement>) => {\n    const { intInfos, arrowDirection, services } = props;\n\n    // name each different linearGradient that will fill the arrow\n    const intNameId = intInfos.map(intInfo => intInfo[2]).reduce((name, color) => name + color, '');\n\n    // get the interchange line names\n    const lineNames = [\n        intInfos\n            .filter(intInfo => intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4].replace(/^(\\d+)(.*)$/, '$1'))\n            .join('，')\n            .concat('号线'),\n        intInfos\n            .filter(intInfo => !intInfo[4].match(/^\\d+.*$/))\n            .map(intInfo => intInfo[4])\n            .join('，'),\n    ]\n        .filter(name => name && name !== '号线')\n        .join('，');\n    const lineNamesEn = [\n        'Line '.concat(\n            intInfos\n                .filter(intInfo => intInfo[5].match(/^L|line$/))\n                .map(intInfo => intInfo[5].replace('Line', '').replace('line', '').trim())\n                .join(',')\n        ),\n        intInfos\n            .filter(intInfo => !intInfo[5].match(/^L|line$/))\n            .map(intInfo => intInfo[5])\n            .join('，'),\n    ]\n        .filter(name => name && name !== 'Line ')\n        .join(',');\n\n    // for services contains three level (normal, express, direct)\n    // additional length is required on transfer arrow otherwise\n    // the station icon will be longer than the arrow itself\n    const arrowLength = services.length === 3 ? 80 : 45;\n    const transferDy = arrowDirection === 'upward' ? -145 : 125 + (services.length === 3 ? 40 : 0);\n\n    return (\n        <g>\n            <path\n                id=\"int_indoor_arrow_sh\"\n                stroke=\"var(--rmg-black)\"\n                strokeWidth={1}\n                transform={`translate(0,${arrowDirection === 'upward' ? -74 : 44})rotate(${\n                    arrowDirection === 'upward' ? 0 : 180\n                })`}\n                fill={intInfos.length === 1 ? intInfos[0][2] : `url(#grad${intNameId})`}\n                d={`M -7.5,0 v -${arrowLength} h -7.5 l 15,-15 l 15,15 h -7.5 v ${arrowLength} Z`}\n            />\n\n            {intInfos.length > 1 && (\n                <>\n                    <linearGradient\n                        id={`grad${intNameId}`}\n                        y1=\"0\"\n                        y2=\"0\"\n                        x1={arrowDirection === 'upward' ? '25%' : '75%'}\n                        x2={arrowDirection === 'upward' ? '75%' : '25%'}\n                    >\n                        {intInfos.map((intInfo, i) => (\n                            <React.Fragment key={i}>\n                                {/* more about React.Fragment on https://stackoverflow.com/a/59390967 */}\n                                <stop // start from\n                                    offset={`${(100 / intInfos.length) * (i + 0)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                                <stop // to\n                                    offset={`${(100 / intInfos.length) * (i + 1)}%`}\n                                    stopColor={intInfo[2]}\n                                />\n                            </React.Fragment>\n                        ))}\n                    </linearGradient>\n\n                    {/* a range inplementation [0, 1, 2 ... intInfos.length - 1] */}\n                    {/* {[...Array(intInfos.length - 1).keys()].map(i => (<line\n                x1={-7.5 + (15 / intInfos.length) * (i + 1)}\n                x2={-7.5 + (15 / intInfos.length) * (i + 1)}\n                y1=\"-74\"\n                y2={-104 - 7.5 - 7.5 / (intInfos.length - 1) * (i+1)}\n                stroke=\"black\"\n            />))} */}\n                </>\n            )}\n\n            <g transform={`translate(0,${transferDy})`} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" dy={-7}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={5} fontSize={9.6}>\n                    {`Interchange ${lineNamesEn}`}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${props.osiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osiInfos.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[] }) => {\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`转乘${props.osysiInfos.map(info => info[4]).join('，')}`}\n                </text>\n                <text className=\"rmg-name__en\" dy={7.5} fontSize={9.6}>\n                    {`To ${props.osysiInfos.map(info => info[5]).join(', ')}`}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString()]\n    );\n};\n","import React, { memo, useMemo } from 'react';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, getStnState } from '../railmap/methods/share';\nimport StationSHMetro from './station-shmetro';\nimport { StationsMTR } from '../railmap/methods/mtr';\nimport { StationDict, Services } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nexport default memo(function IndoorWrapperSHMetro() {\n    return (\n        <>\n            <DefsSHMetro />\n            <IndoorSHMetro />\n        </>\n    );\n});\n\nexport const DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle\n            id=\"stn_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={5}\n            stroke=\"var(--rmg-theme-colour)\"\n            r={8}\n            transform=\"scale(1.5)\"\n        />\n        <path\n            id=\"int2_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            stroke=\"black\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"express_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            stroke=\"black\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"direct_indoor_sh\"\n            fill=\"var(--rmg-white)\"\n            stroke=\"black\"\n            transform=\"translate(0, -10)scale(2)\"\n            strokeWidth={4}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V40 a 5,5 0 1 1 -10,0Z\"\n        />\n    </defs>\n));\n\nconst leftWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0;\n    if (stnList[stnId].parents.length === 2) res += 1;\n    if (stnList[stnList[stnId].parents[0]].children.length === 2) res += 1;\n    return res;\n};\n\nconst rightWideFactor = (stnList: StationDict, stnId: string) => {\n    let res = 0;\n    if (stnList[stnId].children.length === 2) res += 1;\n    if (stnList[stnList[stnId].children[0]].parents.length === 2) res += 1;\n    return res;\n};\n\nconst IndoorSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useAppSelector(store => store.helper);\n    const param = useAppSelector(store => store.param);\n\n    const adjMat = adjacencyList(param.stn_list, leftWideFactor, rightWideFactor);\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.indoor * param.padding) / 100,\n        param.svgWidth.indoor * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = useMemo(\n        () => StationsMTR.getYShares(param.stn_list, branches),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: yShares[cur] * param.branch_spacing * 2 }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const servicesAll = Object.values(Services);\n    const servicesPresent = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services in all stations\n        .reduce(\n            (acc, cur) => {\n                acc[servicesAll.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [servicesAll[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = StationsMTR.drawLine(\n        branches,\n        stnStates,\n        param.stn_list,\n        lineXs,\n        xs,\n        ys,\n        param.branch_spacing * 2,\n        criticalPath,\n        0\n    );\n\n    return (\n        <>\n            <g id=\"main\" transform={`translate(0,${param.svg_height / 2})`}>\n                <Lines paths={linePaths} services={servicesPresent} />\n                <StationGroup xs={xs} ys={ys} stnStates={stnStates} services={servicesPresent} />\n            </g>\n            <InfoElements />\n        </>\n    );\n};\n\nconst Lines = (props: { paths: { main: string[]; pass: string[] }; services: Services[] }) => {\n    return (\n        <g fill=\"none\" strokeWidth={12} stroke=\"var(--rmg-theme-colour)\">\n            {props.services.map((service, i) => (\n                <g key={`indoor_line_${i}`} transform={`translate(0, ${i * 30})`}>\n                    {props.paths.main.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                    {props.paths.pass.map((path, i) => (\n                        <path key={i} d={path} />\n                    ))}\n                </g>\n            ))}\n        </g>\n    );\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n    services: Services[]; // determine if all station text should be upward\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const { branches } = useAppSelector(store => store.helper);\n    const param = useAppSelector(store => store.param);\n    const { xs, ys, stnStates, services } = props;\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .filter(stnId => param.stn_list[stnId].services.length !== 0)\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${xs[stnId]},${ys[stnId]})`}>\n                        <StationSHMetro\n                            stnId={stnId}\n                            stnState={stnStates[stnId]}\n                            nameDirection={\n                                branches\n                                    .filter(branch => branch.includes(stnId))\n                                    .map(branch =>\n                                        branch.indexOf(stnId) % 2 === 0 || services.length > 1 ? 'downward' : 'upward'\n                                    )[0] as 'upward' | 'downward'\n                            }\n                            services={services}\n                        />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst InfoElements = () => {\n    const param = useAppSelector(store => store.param);\n\n    return React.useMemo(\n        () => (\n            <>\n                <g transform={`translate(${param.svgWidth.indoor / 2},50)`}>\n                    <text textAnchor=\"middle\" fontSize=\"30\" className=\"rmg-name__zh\">\n                        轨道交通{param.line_name[0]}运营线路示意图\n                    </text>\n                </g>\n                <g transform={`translate(${param.svgWidth.indoor / 2},${param.svg_height - 270})`}>\n                    <text textAnchor=\"middle\" fontSize=\"18\" className=\"rmg-name__zh\" dx=\"-30\" dy=\"230\">\n                        友情提示：请留意您需要换乘线路的首末班时间，以免耽误您的出行，末班车进站前三分钟停售该末班车车票。\n                    </text>\n                    <text textAnchor=\"middle\" fontSize=\"12\" className=\"rmg-name__en\" dx=\"10\" dy=\"250\">\n                        Please pay attention to the interchange schedule if you want to transfer to other lines. Stop\n                        selling tickets 3 minutes before the last train services.\n                    </text>\n                    <g transform=\"translate(-600,215)\">\n                        <rect x=\"-5\" y=\"-25\" width=\"100\" height=\"70\" fill=\"none\" stroke=\"black\" rx=\"5\"></rect>\n                        <line x1=\"28\" x2=\"28\" y1=\"-20\" y2=\"40\" stroke=\"black\"></line>\n                        <text className=\"rmg-name__zh\" dx=\"3\" fontSize=\"18\">\n                            图\n                        </text>\n                        <text className=\"rmg-name__zh\" dx=\"3\" dy=\"18\" fontSize=\"18\">\n                            例\n                        </text>\n                        <text className=\"rmg-name__en\" dy=\"35\" fontSize=\"8\">\n                            legend\n                        </text>\n                        <use\n                            transform=\"translate(45,10)\"\n                            xlinkHref=\"#int2_indoor_sh\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                        />\n                        <text className=\"rmg-name__zh\" dx=\"60\" dy=\"10\" fontSize=\"10\">\n                            换乘站\n                        </text>\n                        <text className=\"rmg-name__en\" dx=\"60\" dy=\"20\" fontSize=\"6\">\n                            Interchange\n                        </text>\n                        <text className=\"rmg-name__en\" dx=\"60\" dy=\"30\" fontSize=\"6\">\n                            Station\n                        </text>\n                    </g>\n                </g>\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.svgWidth.indoor, param.svg_height, param.line_name]\n    );\n};\n\n/* Some unused functions to split branches from the main line.\n * Note the branches here has a slightly different meaning.\n * It refers to all the line sections that have a parallel line\n * rather than the upper or the bottom branch section.\n *\n * Currently these functions only can be used on a line that\n * branches in the middle and ends at the linestart, which also\n * means that linestart has two children in the adjMat.\n */\n/*\nconst getPathLength = (adjMat: ReturnType<typeof adjacencyList>, from: string, to: string): number => {\n    let cnt = 0, cur = from\n    while (Object.keys(adjMat[cur]).length > 0) {\n        cnt += 1\n        // we choose the first for all the cases so that the length for different branches will end in the same node\n        cur = Object.keys(adjMat[cur])[0]\n    }\n    return cnt\n}\nconst getIntersectionStn = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n\n    let a = start[0], b = start[1]\n    const lenA = getPathLength(adjMat, a, 'lineend')\n    const lenB = getPathLength(adjMat, b, 'lineend')\n    if (lenA < lenB) {\n        for (let i = 0; i < lenB - lenA; i++) b = Object.keys(adjMat[b])[0]\n    } else {\n        for (let i = 0; i < lenA - lenB; i++) a = Object.keys(adjMat[a])[0]\n    }\n    while (a !== b) {\n        a = Object.keys(adjMat[a])[0]\n        b = Object.keys(adjMat[b])[0]\n    }\n    return a\n}\nconst getBranchesAndMainLine = (adjMat: ReturnType<typeof adjacencyList>) => {\n    const start = Object.keys(adjMat['linestart'])\n    const intersection = getIntersectionStn(adjMat)\n    return {\n        'branches': [\n            criticalPathMethod(start[0], intersection, adjMat).nodes,\n            criticalPathMethod(start[1], intersection, adjMat).nodes\n        ],\n        'main': criticalPathMethod(intersection, 'lineend', adjMat).nodes\n    }\n}\nconst getYShares = (adjMat: ReturnType<typeof adjacencyList>,\n    branchesAndMainLine: ReturnType<typeof getBranchesAndMainLine>,\n    stnId: string) => {\n    const branches = branchesAndMainLine.branches\n    const main = branchesAndMainLine.main\n\n    if (main.includes(stnId)) {\n        return 3\n    } else if (branches[0].includes(stnId)) {\n        return 0\n    } else {\n        return 6\n    }\n}\n*/\n","import { Stations } from './share';\n\nexport class StationsMTR extends Stations {\n    protected leftWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'l') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].parents.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].parents[0]].children.length === 2) res += 0.4;\n        return res;\n    };\n\n    protected rightWideFactor = (stnId: string) => {\n        var res = 0;\n        let { transfer } = this.stnList[stnId];\n        let ls = transfer.info.map(val => val.length);\n        if (transfer.tick_direc === 'r') {\n            // int3 or above\n            if (!ls[1] && ls[0] > 1) res += 0.8;\n            // osi except osi22\n            if (ls[1] && (ls[0] !== 1 || ls[1] !== 2)) res += 0.8;\n        }\n        if (ls[0] === 1 && ls[1] === 2) {\n            // osi22 not end\n            if (this.stnList[stnId].parents[0] !== 'linestart' && this.stnList[stnId].children[0] !== 'lineend')\n                res += 0.8;\n        }\n        if (this.stnList[stnId].children.length === 2) res += 0.4;\n        if (this.stnList[this.stnList[stnId].children[0]].parents.length === 2) res += 0.4;\n        return res;\n    };\n}\n","import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n"],"names":["props","param","useAppSelector","store","stnInfo","stn_list","stnId","stationIconStyle","services","length","transfer","info","StationNameGElement","name","infos","stnState","direction","nameDirection","xlinkHref","stroke","className","writingMode","fontSize","dy","transform","x1","x2","y1","y2","IntBoxGroup","intInfos","arrowDirection","StationName","stnName","fill","OSIText","osiInfos","OSysIText","osysiInfos","React","ref","others","split","nameENLn","textAnchor","map","txt","i","array","intNameId","intInfo","reduce","color","lineNames","filter","match","replace","join","concat","lineNamesEn","trim","arrowLength","transferDy","id","strokeWidth","d","offset","stopColor","toString","memo","DefsSHMetro","IndoorSHMetro","r","leftWideFactor","stnList","res","parents","children","rightWideFactor","helper","routes","branches","deps","depsStr","adjMat","adjacencyList","criticalPath","criticalPathMethod","realCP","nodes","slice","xShares","console","log","Object","keys","acc","cur","getXShareMTR","JSON","stringify","lineXs","svgWidth","indoor","padding","xs","len","yShares","useMemo","StationsMTR","ys","branch_spacing","stnStates","getStnState","current_stn_idx","servicesAll","values","Services","servicesPresent","stationInfo","flat","indexOf","bool","s","linePaths","svg_height","Lines","paths","StationGroup","InfoElements","service","main","path","pass","includes","branch","line_name","dx","x","y","width","height","rx","ls","val","tick_direc","Stations","leftW","rightW","a","c","from","to","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","branchOfStn","partSource","partSink","leftOpenJaw","lens","currentId","Set","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","data","namePoss","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","stnPred","getYShare","stnIds","realXs","realYs","e","prevId","prevY","prevX","stnDX","stnExtraH","stnSpareH","warn","stations","lineMainStns","linePassStns","_linePath","drawLine"],"sourceRoot":""}