{"version":3,"file":"static/js/panelStationsBranch.ff7c2f0f.chunk.js","mappings":"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","sources":["panels/stations/edit-diag/branch-tab.tsx"],"sourcesContent":["import React from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    createStyles,\n    Divider,\n    Icon,\n    List,\n    ListItem,\n    ListItemIcon,\n    ListItemText,\n    makeStyles,\n    Select,\n} from '@material-ui/core';\nimport { formatStnName } from '../../../utils';\nimport { useAppDispatch, useAppSelector } from '../../../redux';\nimport { BranchStyle, Direction, RmgStyle } from '../../../constants/constants';\nimport {\n    flipStationBranchPosition,\n    updateStationBranchFirstStation,\n    UpdateStationBranchFirstStationArgType,\n    updateStationBranchType,\n} from '../../../redux/param/action';\n\nconst useStyles = makeStyles(() =>\n    createStyles({\n        select: {\n            width: 166,\n        },\n    })\n);\n\nexport default function StationEditBranchTab(props: { stnId: string }) {\n    const { stnId } = props;\n    const { t } = useTranslation();\n\n    return (\n        <List>\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.left')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={stnId} direction={Direction.left} />\n            <Divider />\n            <ListItem>\n                <ListItemText>\n                    <h3 style={{ margin: 0 }}>{t('stations.edit.branch.right')}</h3>\n                </ListItemText>\n            </ListItem>\n            <BranchSelectSet stnId={stnId} direction={Direction.right} />\n        </List>\n    );\n}\n\ninterface BranchSelectSetProps {\n    stnId: string;\n    direction: Direction;\n}\n\nconst BranchSelectSet = (props: BranchSelectSetProps) => {\n    const { stnId, direction } = props;\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const branchEntry = useAppSelector(store => store.param.stn_list[stnId].branch[direction]);\n\n    return React.useMemo(\n        () => (\n            <>\n                <BranchTypeItem {...props} />\n                {branchEntry[0] && (\n                    <>\n                        <BranchFirstItem {...props} />\n                        {rmgStyle !== RmgStyle.SHMetro && <BranchPosItem {...props} />}\n                    </>\n                )}\n            </>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, direction, branchEntry[0]]\n    );\n};\n\ninterface ItemProps {\n    stnId: string;\n    direction: Direction;\n}\n\nconst BranchTypeItem = (props: ItemProps) => {\n    const { stnId, direction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const branchEntry = useAppSelector(store => store.param.stn_list[stnId].branch[direction]);\n\n    const handleChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchType = value as 'na' | BranchStyle;\n        if (branchType === 'na') {\n            // no changes\n            return;\n        } else if (branchType === branchEntry[0]) {\n            // no changes\n            return;\n        } else {\n            dispatch(updateStationBranchType(stnId, direction, branchType));\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>merge_type</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.type.title')} />\n                <Select native onChange={handleChange} value={branchEntry[0] || 'na'} className={classes.select}>\n                    <option value=\"na\" disabled={branchEntry.length !== 0}>\n                        {t('stations.edit.branch.type.na')}\n                    </option>\n                    <option value={BranchStyle.through} disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.through')}\n                    </option>\n                    <option value={BranchStyle.nonThrough} disabled={branchEntry.length === 0}>\n                        {t('stations.edit.branch.type.nonThrough')}\n                    </option>\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, branchEntry[0]]\n    );\n};\n\nconst BranchFirstItem = (props: ItemProps) => {\n    const { stnId, direction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const rmgStyle = useAppSelector(store => store.param.style);\n    const stnList = useAppSelector(store => store.param.stn_list);\n    const stnInfo = stnList[stnId];\n    const branchEntry = stnInfo.branch[direction];\n    const neighbours = direction === Direction.left ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchFirst = value as string;\n        if (branchEntry[1] === branchFirst) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchFirst;\n            let branchEndFirst: string;\n            if (direction === Direction.right) {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                branchEndFirst = stnList[branchEndId].parents[neighbours.indexOf(branchFirst)];\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                branchEndFirst = stnList[branchEndId].children[neighbours.indexOf(branchFirst)];\n            }\n            const branchesArg: [UpdateStationBranchFirstStationArgType, UpdateStationBranchFirstStationArgType] = [\n                { stnId, direction, first: branchFirst },\n                {\n                    stnId: branchEndId,\n                    direction: direction === Direction.left ? Direction.right : Direction.left,\n                    first: branchEndFirst,\n                },\n            ];\n            dispatch(updateStationBranchFirstStation(branchesArg));\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon style={{ transform: direction === Direction.left ? 'scale(-1)' : 'scale(1)' }}>share</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.first')} />\n                <Select\n                    native\n                    onChange={handleChange}\n                    value={branchEntry[1] || neighbours[0]}\n                    className={classes.select}\n                >\n                    {neighbours.map(id => (\n                        <option key={id} value={id}>\n                            {formatStnName(stnList[id], rmgStyle)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n\nconst BranchPosItem = (props: ItemProps) => {\n    const { stnId, direction } = props;\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const stnList = useAppSelector(store => store.param.stn_list);\n    const stnInfo = stnList[stnId];\n    const branchEntry = stnInfo.branch[direction] as [BranchStyle, string]; // mount only if branchEntry[0] is not undefined\n    const neighbours = direction === Direction.left ? stnInfo.parents : stnInfo.children;\n\n    const handleChange = ({ target: { value } }: React.ChangeEvent<{ name?: string; value: unknown }>) => {\n        let branchPos: 0 | 1 = value === 'lower' ? 1 : 0;\n        if (neighbours.indexOf(branchEntry[1]) === branchPos) {\n            // no changes\n            return;\n        } else {\n            let branchEndId = branchEntry[1];\n            if (direction === Direction.right) {\n                while (stnList[branchEndId].parents.length === 1) {\n                    branchEndId = stnList[branchEndId].children[0];\n                }\n                dispatch(flipStationBranchPosition(branchEndId, stnId));\n            } else {\n                while (stnList[branchEndId].children.length === 1) {\n                    branchEndId = stnList[branchEndId].parents[0];\n                }\n                dispatch(flipStationBranchPosition(stnId, branchEndId));\n            }\n        }\n    };\n\n    return React.useMemo(\n        () => (\n            <ListItem>\n                <ListItemIcon>\n                    <Icon>swap_vert</Icon>\n                </ListItemIcon>\n                <ListItemText primary={t('stations.edit.branch.pos.title')} />\n                <Select\n                    native\n                    onChange={handleChange}\n                    value={neighbours.indexOf(branchEntry[1]) === 1 ? 'lower' : 'upper'}\n                    className={classes.select}\n                >\n                    {['upper', 'lower'].map(p => (\n                        <option key={p} value={p}>\n                            {t('stations.edit.branch.pos.' + p)}\n                        </option>\n                    ))}\n                </Select>\n            </ListItem>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [stnId, branchEntry[1], neighbours.toString()]\n    );\n};\n"],"names":["useStyles","makeStyles","createStyles","select","width","StationEditBranchTab","props","stnId","t","useTranslation","style","margin","BranchSelectSet","direction","Direction","rmgStyle","useAppSelector","store","param","branchEntry","stn_list","branch","React","BranchTypeItem","BranchFirstItem","RmgStyle","BranchPosItem","classes","dispatch","useAppDispatch","handleChange","branchType","target","value","updateStationBranchType","primary","native","onChange","className","disabled","length","BranchStyle","stnList","stnInfo","neighbours","parents","children","branchFirst","branchEndFirst","branchEndId","indexOf","branchesArg","first","updateStationBranchFirstStation","transform","map","id","formatStnName","toString","branchPos","flipStationBranchPosition","p"],"sourceRoot":""}