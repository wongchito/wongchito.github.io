{"version":3,"file":"static/js/railmapSHMetro.1dca71ca.chunk.js","mappings":"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","sources":["svgs/railmap/methods/share.ts","svgs/railmap/main/station/station-shmetro.tsx","svgs/railmap/main/main-shmetro.tsx","svgs/railmap/railmap-shmetro.tsx"],"sourcesContent":["import * as Global from '../../../methods';\nimport { RMGParam, ShortDirection, StationDict, StationInfo } from '../../../constants/constants';\n\n/**\n * Compute the adjacency list of the graph.\n * @param stnList Key-value pairs of station info\n * @param leftW Callback of left wide factor\n * @param rightW Callback of right wide factor\n */\nexport const adjacencyList = (\n    stnList: { [stnId: string]: StationInfo },\n    leftW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number,\n    rightW: (stnList: { [stnId: string]: StationInfo }, stnId: string) => number\n) => {\n    return Object.keys(stnList).reduce(\n        (acc, cur) => ({\n            ...acc,\n            [cur]: stnList[cur].children.reduce(\n                (a, c) => ({ ...a, [c]: 1 + leftW(stnList, c) + rightW(stnList, cur) }),\n                {}\n            ),\n        }),\n        {} as { [from: string]: { [to: string]: number } }\n    );\n};\n\n/**\n * Compute critical path and its length from `from` node to `to` node with critical path method.\n * @param from ID of station on the left\n * @param to ID of station on the right\n * @param adjMat Adjacency matrix in the form of `Object` returned from `adjacencyList` method.\n */\nexport const criticalPathMethod = (from: string, to: string, adjMat: ReturnType<typeof adjacencyList>) => {\n    if (from === to) {\n        return { len: 0, nodes: [from] };\n    }\n    let allLengths: number[] = [];\n    let criticalPaths: string[][] = [];\n    Object.keys(adjMat[from]).forEach(child => {\n        let cp = criticalPathMethod(child, to, adjMat);\n        if (cp.len < 0) return;\n        allLengths.push(adjMat[from][child] + cp.len);\n        cp.nodes.unshift(from);\n        criticalPaths.push(cp.nodes);\n    });\n    let maxLength = Math.max(...allLengths);\n    return {\n        len: maxLength,\n        nodes: criticalPaths[allLengths.indexOf(maxLength)],\n    };\n};\n\nexport const getXShareMTR = (stnId: string, adjMat: ReturnType<typeof adjacencyList>, branches: string[][]) => {\n    let criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    if (criticalPath.nodes.includes(stnId)) {\n        return criticalPathMethod(criticalPath.nodes[1], stnId, adjMat).len;\n    } else {\n        // must has 1 parent and 1 child only\n        let branchOfStn = branches.filter(branch => branch.includes(stnId))[0];\n\n        let partSource = stnId;\n        while (!criticalPath.nodes.includes(partSource)) {\n            partSource = branchOfStn[branchOfStn.indexOf(partSource) - 1];\n        }\n        let partSink = stnId;\n        while (!criticalPath.nodes.includes(partSink)) {\n            partSink = branchOfStn[branchOfStn.indexOf(partSink) + 1];\n        }\n\n        let leftOpenJaw = partSource === 'linestart';\n        let rightOpenJaw = partSink === 'lineend';\n\n        // expand to fit\n        let lens = [];\n        if (!leftOpenJaw && !rightOpenJaw) {\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, partSink, adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else if (leftOpenJaw) {\n            lens[0] = 0;\n            lens[1] = criticalPathMethod(criticalPath.nodes[1], partSink, adjMat).len;\n            lens[2] = criticalPathMethod(branchOfStn[1], stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, partSink, adjMat).len;\n        } else {\n            // right open jaw\n            lens[0] = criticalPathMethod(criticalPath.nodes[1], partSource, adjMat).len;\n            lens[1] = criticalPathMethod(partSource, criticalPath.nodes.slice(-2)[0], adjMat).len;\n            lens[2] = criticalPathMethod(partSource, stnId, adjMat).len;\n            lens[3] = criticalPathMethod(stnId, branchOfStn.slice(-2)[0], adjMat).len;\n        }\n        return lens[0] + (lens[2] * lens[1]) / (lens[2] + lens[3]);\n    }\n};\n\nconst getYShare = (stnId: string, stnList: { [stnId: string]: StationInfo }) => {\n    return Global.getYShareMTR(stnId, stnList);\n};\n\n/**\n * Vertical position (in pixels) of station icon related to vertical position of line.\n */\nexport const getYReal = (stnId: string, param: RMGParam) => {\n    return -getYShare(stnId, param.stn_list) * param.branch_spacing;\n};\n\nconst _isPredecessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx2 !== -1 && idx2 < idx1) return true;\n    }\n    return false;\n};\n\nconst _isSuccessor = (stnId1: string, stnId2: string, routes: string[][]) => {\n    for (let route of routes) {\n        let idx1 = route.indexOf(stnId1);\n        let idx2 = route.indexOf(stnId2);\n        if (idx1 !== -1 && idx1 < idx2) return true;\n    }\n    return false;\n};\n\nexport const getStnState = (\n    currentId: string,\n    routes: string[][],\n    direction: 'l' | 'r'\n): { [stnId: string]: -1 | 0 | 1 } => {\n    console.log(\"computing stations' states\");\n    return [...new Set(([] as string[]).concat(...routes))].reduce(\n        (acc, cur: string) => ({\n            ...acc,\n            [cur]:\n                cur === currentId\n                    ? 0\n                    : (\n                          direction === ShortDirection.right\n                              ? _isSuccessor(currentId, cur, routes)\n                              : _isPredecessor(currentId, cur, routes)\n                      )\n                    ? 1\n                    : -1,\n        }),\n        {}\n    );\n};\n\nexport class Stations {\n    yShares = {} as { [stnId: string]: number };\n    xShares = {} as { [stnId: string]: number };\n    namePoss = {} as { [stnId: string]: boolean };\n    stnList = {} as StationDict;\n    criticalPath = {} as { len: number; nodes: string[] };\n\n    constructor(data: { stnList?: any; criticalPath?: any }) {\n        this.stnList = data.stnList;\n        this.criticalPath = data.criticalPath;\n    }\n\n    /**\n     * Increment of the weight of in-bound edge of a station, which increases the horizontal interval from its parents.\n     */\n    protected leftWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Increment of the weight of out-bound edge of a station, which increases the horizontal interval from its children.\n     */\n    protected rightWideFactor = (stnId: string) => {\n        return 0;\n    };\n\n    /**\n     * Path weight from station 1 to station 2 (station 2 must be a child of station 1, otherwise return `-Infinity`).\n     */\n    public pathWeight = (stnId1: string, stnId2: string) => {\n        if (!this.stnList[stnId1].children.includes(stnId2)) {\n            return -Infinity;\n        }\n        return 1 + this.rightWideFactor(stnId1) + this.leftWideFactor(stnId2);\n    };\n\n    protected getYShare(stnId: string, branches?: string[][]): number {\n        if (stnId in this.yShares) return this.yShares[stnId];\n\n        if (\n            ['linestart', 'lineend'].includes(stnId) ||\n            this.stnList[stnId].parents.length > 1 ||\n            this.stnList[stnId].children.length > 1\n        ) {\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n        var stnPred = this.stnList[stnId].parents[0];\n        if (stnPred) {\n            // parent exist\n            if (this.stnList[stnPred].children.length === 1) {\n                // no sibling, then y same as parent\n                let res = this.getYShare(stnPred);\n                this.yShares[stnId] = res;\n                return res;\n            } else {\n                // sibling exists, then y depends on its idx of being children\n                let res: 1 | -1 = this.stnList[stnPred].children.indexOf(stnId) === 0 ? 1 : -1;\n                this.yShares[stnId] = res;\n                return res;\n            }\n        } else {\n            // no parent, must be linestart\n            this.yShares[stnId] = 0;\n            return 0;\n        }\n    }\n\n    static getYShares(stnList: StationDict, branches?: string[][]) {\n        console.log('computing y shares');\n        let stations = new this({ stnList });\n\n        Object.keys(stnList).forEach(stnId => {\n            if (['linestart', 'lineend'].includes(stnId)) return;\n            if (stnId in stations.yShares) return;\n            stations.getYShare(stnId, branches);\n        });\n\n        return stations.yShares;\n    }\n\n    /**\n     * Parameters of the arcs involved in the `<path>` element.\n     */\n    private pathTurnParams = (branchSpacing: number) => {\n        let tr = 35; // turning radius\n        let dx_a = tr / 2; // dx of a\n        let dy_a = tr - dx_a * Math.sqrt(3); // dy of a\n        let dy_l = branchSpacing - 2 * dy_a; // dy of l\n        let dx_l = dy_l * Math.sqrt(3); // dx of l\n        return { tr, dx_a, dy_a, dx_l, dy_l };\n    };\n\n    /**\n     * Path segment from a station towards its southeast (lower-right).\n     */\n    private pathTurnSE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,1 ${dx_a},${dy_a} l ${dx_l},${dy_l} a ${tr},${tr} 0 0,0 ${dx_a},${dy_a}`;\n    };\n\n    /**\n     * Path segment from a station towards its northeast (upper-right).\n     */\n    private pathTurnNE = (branchSpacing: number) => {\n        let { tr, dx_a, dy_a, dx_l, dy_l } = this.pathTurnParams(branchSpacing);\n        return `a ${tr},${tr} 0 0,0 ${dx_a},${-dy_a} l ${dx_l},${-dy_l} a ${tr},${tr} 0 0,1 ${dx_a},${-dy_a}`;\n    };\n\n    /**\n     * Generate `d` attribute of `<path>` element through all stations input.\n     */\n    protected _linePath(\n        stnIds: string[],\n        lineXs: [number, number],\n        branches: string[][],\n        realXs: { [stnId: string]: number },\n        realYs: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number\n    ) {\n        var [prevId, prevY, prevX] = [] as unknown as [string, number, number];\n        var path = [] as string[];\n\n        let { dx_a, dx_l } = this.pathTurnParams(branchSpacing);\n        let stnDX = dx_a + dx_l / 2;\n        let stnExtraH = ((lineXs[1] - lineXs[0]) / cp.len) * 2;\n        let stnSpareH = ((lineXs[1] - lineXs[0]) / cp.len - 2 * stnDX) / 2;\n        if (stnSpareH + stnExtraH < 0) {\n            console.warn(`SVG width too small! ${stnSpareH + stnExtraH}`);\n        }\n\n        stnIds.forEach(stnId => {\n            let x = realXs[stnId];\n            let y = realYs[stnId];\n            if (!prevY && prevY !== 0) {\n                [prevId, prevX, prevY] = [stnId, x, y];\n                if (stnIds.length === 1) {\n                    path.push(`M ${x},${y}`);\n                } else if (!branches[0].includes(stnId)) {\n                    // started from branch\n                    path.push(`M ${x},${y}`);\n                } else if (branches[0].includes(stnIds[1])) {\n                    // started from branching station, this is main line\n                    path.push(`M ${x},${y}`);\n                } else {\n                    // started form branching station, this is branch line\n                    if (realXs[stnIds[1]] > 0) {\n                        path.push(`M ${x},${y + e}`);\n                    }\n                    if (realYs[stnIds[1]] < 0) {\n                        path.push(`M ${x},${y - e}`);\n                    }\n                }\n                return;\n            }\n            if (y > prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnSE(branchSpacing));\n            } else if (y < prevY) {\n                path.push(\n                    y === 0\n                        ? `h ${x - prevX - stnExtraH * this.leftWideFactor(stnId) - stnSpareH - stnDX * 2}`\n                        : `h ${stnExtraH * this.rightWideFactor(prevId) + stnSpareH}`\n                );\n                path.push(this.pathTurnNE(branchSpacing));\n            }\n            path.push(`H ${x}`);\n            [prevId, prevX, prevY] = [stnId, x, y];\n        });\n\n        // simplify path\n        return path.join(' ').replace(/( H ([\\d.]+))+/g, ' H $2');\n    }\n\n    static drawLine(\n        branches: string[][],\n        stnStates: { [stnId: string]: -1 | 0 | 1 },\n        stnList: { [stnId: string]: StationInfo },\n        lineXs: [number, number],\n        xs: { [stnId: string]: number },\n        ys: { [stnId: string]: number },\n        branchSpacing: number,\n        cp: { len: number; nodes: string[] },\n        e: number = 9.68\n    ) {\n        let linePaths = { main: [] as string[], pass: [] as string[] };\n        branches.forEach((branch, i) => {\n            branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n            var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n            var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n            if (lineMainStns.length === 1) {\n                linePassStns = branch;\n            }\n\n            if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n                // if two set disjoint\n                if (linePassStns[0] === branch[0]) {\n                    // -1 -1 1 1\n                    linePassStns.push(lineMainStns[0]);\n                } else if (\n                    lineMainStns[0] === branch[0] &&\n                    lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                    linePassStns.length\n                ) {\n                    linePassStns = branch;\n                    lineMainStns = [];\n                } else {\n                    // 1 1 -1 -1\n                    linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n                }\n            }\n\n            linePaths.main.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    lineMainStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n            linePaths.pass.push(\n                new this({ stnList, criticalPath: cp })._linePath(\n                    linePassStns,\n                    lineXs,\n                    branches,\n                    xs,\n                    ys,\n                    branchSpacing,\n                    cp,\n                    e\n                )\n            );\n        });\n\n        return linePaths;\n    }\n}\n\nexport const drawLine = (branches: string[][], stnStates: { [stnId: string]: -1 | 0 | 1 }) => {\n    let linePaths = { main: [] as string[][], pass: [] as string[][] };\n    branches.forEach(branch => {\n        branch = branch.filter(stnId => !['linestart', 'lineend'].includes(stnId));\n        var lineMainStns = branch.filter(stnId => stnStates[stnId] >= 0);\n        var linePassStns = branch.filter(stnId => stnStates[stnId] <= 0);\n\n        if (lineMainStns.length === 1) {\n            linePassStns = branch;\n        }\n\n        if (lineMainStns.filter(stnId => linePassStns.indexOf(stnId) !== -1).length === 0 && lineMainStns.length) {\n            // if two set disjoint\n            if (linePassStns[0] === branch[0]) {\n                // -1 -1 1 1\n                linePassStns.push(lineMainStns[0]);\n            } else if (\n                lineMainStns[0] === branch[0] &&\n                lineMainStns[lineMainStns.length - 1] === branch[branch.length - 1] &&\n                linePassStns.length\n            ) {\n                linePassStns = branch;\n                lineMainStns = [];\n            } else {\n                // 1 1 -1 -1\n                linePassStns.unshift(lineMainStns[lineMainStns.length - 1]);\n            }\n        }\n\n        linePaths.main.push(lineMainStns);\n        linePaths.pass.push(linePassStns);\n    });\n\n    return linePaths;\n};\n","import React, { useRef, memo } from 'react';\nimport { InterchangeInfo, Name, PanelTypeGZMTR, PanelTypeShmetro, Facilities } from '../../../../constants/constants';\nimport { useAppSelector } from '../../../../redux';\n\ninterface Props {\n    stnId: string;\n    stnState: -1 | 0 | 1;\n}\n\nconst StationSHMetro = (props: Props) => {\n    const param = useAppSelector(store => store.param);\n    const stnInfo = param.stn_list[props.stnId];\n\n    // shift station name if the line bifurcate here\n    const branchNameDX =\n        ([...stnInfo.branch.left, ...stnInfo.branch.right].length ? 8 + 12 * stnInfo.name[1].split('\\\\').length : 0) *\n        (param.direction === 'r' ? -1 : 1);\n\n    let stationIconStyle = '';\n    let stationIconColor: { [pos: string]: string } = {};\n    if (param.info_panel_type === 'sh2020') {\n        if (stnInfo.services.length === 3) stationIconStyle = 'stn_sh_2020_direct';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'stn_sh_2020_express';\n        else stationIconStyle = 'stn_sh_2020';\n        stationIconColor.fill = props.stnState === -1 ? 'gray' : 'var(--rmg-theme-colour)';\n    } else {\n        // param.info_panel_type === 'sh' or others (from other styles)\n        if (stnInfo.services.length === 3) stationIconStyle = 'direct_sh';\n        else if (stnInfo.services.length === 2) stationIconStyle = 'express_sh';\n        else if ([...stnInfo.transfer.info[0], ...(stnInfo.transfer.info[1] || [])].length > 0)\n            stationIconStyle = 'int2_sh';\n        else stationIconStyle = 'stn_sh';\n        stationIconColor.stroke = props.stnState === -1 ? 'gray' : 'var(--rmg-theme-colour)';\n    }\n\n    return (\n        <>\n            <use\n                xlinkHref={`#${stationIconStyle}`}\n                {...stationIconColor} // different styles use either `fill` or `stroke`\n            />\n            <g transform={`translate(${branchNameDX},0)`}>\n                <StationNameGElement\n                    name={stnInfo.name}\n                    infos={stnInfo.transfer.info}\n                    stnState={props.stnState}\n                    direction={param.direction}\n                    info_panel_type={param.info_panel_type}\n                    facility={stnInfo.facility}\n                />\n            </g>\n        </>\n    );\n};\n\nexport default StationSHMetro;\n\ninterface StationNameGElementProps {\n    name: Name;\n    infos: InterchangeInfo[][];\n    stnState: -1 | 0 | 1;\n    direction: 'l' | 'r';\n    info_panel_type: PanelTypeGZMTR | PanelTypeShmetro;\n    facility: Facilities;\n}\n\nconst StationNameGElement = (props: StationNameGElementProps) => {\n    const { name, infos, stnState, info_panel_type, direction, facility } = props;\n    const nameENLn = props.name[1].split('\\\\').length;\n\n    // get the exact station name width so that the\n    // interchange station icon can be right after the station name\n    const stnNameEl = useRef<SVGGElement | null>(null);\n    // the original name position\n    const [bBox, setBBox] = React.useState({ width: 0 } as DOMRect);\n    React.useEffect(\n        () => setBBox(stnNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [...name]\n    );\n    // the original name position's right x\n    const x = bBox.width + 5;\n\n    // rotate the station info now\n    // other wise the bcr will be inaccurate due to the rotation\n    // Chito: so, use BBox instead\n\n    // simplify the calculation times\n    const directionPolarity = direction === 'l' ? 1 : -1;\n\n    // main elements icon's dx will change if there is a facility icon or not\n    const mainDx = facility !== Facilities.none ? 30 : 0;\n\n    return (\n        <g\n            transform={`translate(${direction === 'l' ? 6 : -6},${info_panel_type === 'sh2020' ? -20 : -6})rotate(${\n                props.direction === 'l' ? -45 : 45\n            })`}\n        >\n            {infos.flat().length > 0 && (\n                <>\n                    <line\n                        x1={mainDx * directionPolarity}\n                        x2={(mainDx + x) * directionPolarity}\n                        stroke={stnState === -1 ? 'gray' : 'black'}\n                        strokeWidth={0.5}\n                    />\n                    <IntBoxGroup\n                        intInfos={infos}\n                        transform={`translate(${(mainDx + x) * directionPolarity},-10.75)`}\n                        direction={direction}\n                    />\n                </>\n            )}\n\n            {facility !== Facilities.none && <use xlinkHref={'#' + facility} x={10 * directionPolarity} y={-30} />}\n\n            <g\n                textAnchor={direction === 'l' ? 'start' : 'end'}\n                transform={`translate(${mainDx * directionPolarity},${-14.15625 - 2 - 12 * (nameENLn - 1)})`}\n            >\n                <StationName\n                    ref={stnNameEl}\n                    stnName={name}\n                    fill={stnState === -1 ? 'gray' : stnState === 0 ? 'red' : 'black'}\n                />\n\n                {/* deal out-of-station here as it is a y axis element. leave out-of-system in IntBoxGroup*/}\n                {infos[1]?.length > 0 && (\n                    <g\n                        transform={`translate(${\n                            (x + infos.reduce((sum, infos) => sum + infos.length, 0) * 15) * directionPolarity\n                        },-30)`}\n                    >\n                        <OSIText osiInfos={infos[1]} />\n                    </g>\n                )}\n            </g>\n        </g>\n    );\n};\n\nconst StationName = React.forwardRef(\n    (props: { stnName: Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { stnName, ...others } = props;\n\n        return (\n            <g ref={ref} {...others}>\n                {React.useMemo(\n                    () => (\n                        <>\n                            {stnName[0].split('\\\\').map((txt, i, array) => (\n                                <text key={i} className=\"rmg-name__zh\" dy={(array.length - 1 - i) * -15}>\n                                    {txt}\n                                </text>\n                            ))}\n                            <g fontSize={9.6}>\n                                {stnName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} className=\"rmg-name__en\" dy={12 * (i + 1)}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [...stnName]\n                )}\n            </g>\n        );\n    }\n);\n\nconst IntBoxGroup = (props: { intInfos: InterchangeInfo[][]; direction: 'l' | 'r' } & React.SVGProps<SVGGElement>) => {\n    const { intInfos, direction, ...others } = props;\n\n    // also known as non out-of-system transfers\n    const boxInfos = [\n        ...intInfos[0],\n        ...(intInfos[1] || []),\n        // some dirty tricks here as shmetro shows maglev icon even it is a out-of-system transfer\n        // and display a maglev icon is much easier in boxInfos than in OSysIText\n        ...(intInfos[2]?.filter(info => Boolean(info[4].match(/^磁(悬)*浮/))) || []),\n    ];\n\n    let dx = 0; // update in every boxInfos\n\n    return (\n        <g fontSize={14} textAnchor=\"middle\" {...others}>\n            {boxInfos.map((info, i) => {\n                const isLineNumber = Boolean(info[4].match(/^\\d.*$/));\n                const isMaglev = Boolean(info[4].match(/^磁(悬)*浮/));\n\n                if (props.direction === 'r') {\n                    dx -= (isLineNumber || isMaglev ? 20 : info[4].length * 14 + 12 + 0) + (i === 0 ? 0 : 5);\n                }\n\n                let el = <g />;\n                if (isMaglev) {\n                    el = (\n                        <g transform={`translate(${dx},-16)scale(0.1428571429)`} key={i}>\n                            <IntBoxMaglev info={info} />\n                        </g>\n                    );\n                } else if (isLineNumber) {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxNumber info={info} />\n                        </g>\n                    );\n                } else {\n                    el = (\n                        <g transform={`translate(${dx},0)`} key={i}>\n                            <IntBoxLetter info={info} />\n                        </g>\n                    );\n                }\n\n                if (props.direction === 'l') {\n                    dx += isLineNumber || isMaglev ? 20 + 5 : info[4].length * 14 + 12 + 5;\n                }\n                return el;\n            })}\n\n            {[...(intInfos[2] || [])].length > 0 && (\n                <g transform={`translate(${dx - (props.direction === 'r' ? 5 : 0)},0)`} key={boxInfos.length + 1}>\n                    <OSysIText osysiInfos={intInfos[2]} direction={props.direction} />\n                </g>\n            )}\n        </g>\n    );\n};\n\nconst IntBoxMaglev = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_maglev\" fill={props.info[2]} stroke={props.info[2]} />\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxNumber = memo(\n    (props: { info: InterchangeInfo }) => (\n        <>\n            <use xlinkHref=\"#intbox_number\" fill={props.info[2]} />\n            <text x={10} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                {/* // line starts with numbers */}\n                {props.info[4].match(/(\\d*)\\w+/)![0]}\n            </text>\n        </>\n    ),\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst IntBoxLetter = memo(\n    (props: { info: InterchangeInfo }) => {\n        // box width: 16 * number of characters + 12\n        const textCount = props.info[4].split('\\\\')[0].length;\n        return (\n            <>\n                <rect height={22} width={textCount * 14 + 12} y={-11} fill={props.info[2]} />\n                <text x={textCount * 7 + 6} className=\"rmg-name__zh\" fill={props.info[3]} dominantBaseline=\"central\">\n                    {props.info[4].split('\\\\')[0]}\n                </text>\n            </>\n        );\n    },\n    (prevProps, nextProps) => prevProps.info.toString() === nextProps.info.toString()\n);\n\nconst OSIText = (props: { osiInfos: InterchangeInfo[] }) => {\n    // get the all names from the out of station interchanges\n    const lineNames = props.osiInfos.map(info => info[4]).join('，');\n    return React.useMemo(\n        () => (\n            <g textAnchor=\"middle\" fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={-5}>\n                    {`换乘${lineNames}`}\n                </text>\n                <text className=\"rmg-name__zh\" dy={5}>\n                    仅限公共交通卡\n                </text>\n                <text className=\"rmg-name__en\" dy={12.5} fontSize=\"75%\">\n                    Only for Public Transportation Card\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [lineNames.toString()]\n    );\n};\n\nconst OSysIText = (props: { osysiInfos: InterchangeInfo[]; direction: 'l' | 'r' }) => {\n    // get the all names from out of system transfers\n    const lineNames = props.osysiInfos.map(info => info[4]).join('，');\n    const lineNamesEn = props.osysiInfos.map(info => info[5]).join(', ');\n\n    return React.useMemo(\n        () => (\n            <g textAnchor={props.direction === 'l' ? 'start' : 'end'} fontSize=\"50%\">\n                <text className=\"rmg-name__zh\" dy={3}>\n                    转乘{lineNames}\n                </text>\n                <text className=\"rmg-name__en\" dy={10} fontSize=\"75%\">\n                    To {lineNamesEn}\n                </text>\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.osysiInfos.toString(), props.direction]\n    );\n};\n","import React from 'react';\nimport { adjacencyList, getXShareMTR, criticalPathMethod, drawLine, getStnState } from '../methods/share';\nimport StationSHMetro from './station/station-shmetro';\nimport { Services } from '../../../constants/constants';\nimport { useAppSelector } from '../../../redux';\n\ninterface servicesPath {\n    main: string[];\n    pass: string[];\n    service: Services;\n}\n\nconst MainSHMetro = () => {\n    const { routes, branches, depsStr: deps } = useAppSelector(store => store.helper);\n    const param = useAppSelector(store => store.param);\n\n    const adjMat = adjacencyList(\n        param.stn_list,\n        () => 0,\n        () => 0\n    );\n\n    const criticalPath = criticalPathMethod('linestart', 'lineend', adjMat);\n    const realCP = criticalPathMethod(criticalPath.nodes[1], criticalPath.nodes.slice(-2)[0], adjMat);\n\n    const xShares = React.useMemo(\n        () => {\n            console.log('computing x shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: getXShareMTR(cur, adjMat, branches) }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [branches.toString(), JSON.stringify(adjMat)]\n    );\n    const lineXs: [number, number] = [\n        (param.svgWidth.railmap * param.padding) / 100,\n        param.svgWidth.railmap * (1 - param.padding / 100),\n    ];\n    const xs = Object.keys(xShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: lineXs[0] + (xShares[cur] / realCP.len) * (lineXs[1] - lineXs[0]) }),\n        {} as typeof xShares\n    );\n\n    const yShares = React.useMemo(\n        () => {\n            console.log('computing y shares');\n            return Object.keys(param.stn_list).reduce(\n                (acc, cur) => ({ ...acc, [cur]: branches[0].includes(cur) ? 0 : 3 }),\n                {} as { [stnId: string]: number }\n            );\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [deps]\n    );\n    const ys = Object.keys(yShares).reduce(\n        (acc, cur) => ({ ...acc, [cur]: -yShares[cur] * param.branch_spacing }),\n        {} as typeof yShares\n    );\n\n    const stnStates = React.useMemo(\n        () => getStnState(param.current_stn_idx, routes, param.direction),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.current_stn_idx, param.direction, routes.toString()]\n    );\n\n    const servicesAll = Object.values(Services);\n    const servicesPresent = Object.values(param.stn_list)\n        .map(stationInfo => stationInfo.services)\n        .flat() // all services in all stations\n        .reduce(\n            (acc, cur) => {\n                acc[servicesAll.indexOf(cur)] = true;\n                return acc;\n            },\n            [false, false, false] as [boolean, boolean, boolean]\n        ) // set the flag in order\n        .map((bool, i) => [servicesAll[i], bool] as [Services, boolean]) // zip\n        .filter(s => s[1]) // get the existing service\n        .map(s => s[0]); // maintain the services' order\n\n    const linePaths = drawLine(branches, stnStates);\n\n    // paths = {'local':{'main':..., 'pass':...}, 'express':...}\n    // const paths = servicesLevel.reduce((allServicesPath, services) => ({\n    //         ...allServicesPath,\n    //         [services]: (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n    //             (acc, cur) => ({\n    //                 ...acc,\n    //                 [cur]: linePaths[cur].map(stns => _linePath(stns, cur, xs, ys, param.direction, services)).filter(path => path !== ''),\n    //             }),\n    //             {} as { [key in keyof ReturnType<typeof drawLine>]: string[] })\n    //     }), {} as {[services in Services]: { main: string[]; pass: string[] }}\n    // );\n\n    // paths = [{'main':..., 'pass':..., 'service':'local'}, ...}]\n    const paths = servicesPresent.map(services =>\n        (Object.keys(linePaths) as (keyof ReturnType<typeof drawLine>)[]).reduce(\n            (acc, cur) => ({\n                ...acc,\n                [cur]: linePaths[cur]\n                    .map(stns => _linePath(stns, cur, xs, ys, param.direction, services, servicesPresent.length))\n                    .filter(path => path !== ''),\n                service: services,\n            }),\n            {} as servicesPath\n        )\n    );\n\n    return (\n        <g id=\"main\" transform={`translate(0,${param.svg_height - 63})`}>\n            <Line paths={paths} direction={param.direction} />\n            <StationGroup xs={xs} ys={ys} stnStates={stnStates} />\n            <ServicesElements\n                servicesLevel={servicesPresent}\n                dy={-param.svg_height + 100}\n                direction={param.direction}\n                lineXs={lineXs}\n            />\n            <DirectionElements />\n        </g>\n    );\n};\n\nexport default MainSHMetro;\n\nconst Line = (props: { paths: servicesPath[]; direction: 'l' | 'r' }) => {\n    const { theme } = useAppSelector(store => store.param);\n\n    return (\n        <>\n            {props.paths.map((servicePath, i) => (\n                <g\n                    key={`servicePath${i}`}\n                    transform={`translate(0,${i * 25})`}\n                    // the following line is a special case for pujiang line\n                    // where its pass line color should be white with outline\n                    // surrounding it, see #161 for details.\n                    filter={theme[2] === '#999999' ? 'url(#pujiang_outline_railmap)' : undefined}\n                >\n                    <g>\n                        {servicePath.pass.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"gray\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_gray)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_gray)' : undefined}\n                                strokeLinejoin=\"round\"\n                            />\n                        ))}\n                    </g>\n                    <g>\n                        {servicePath.main.map((path, j) => (\n                            <path\n                                key={j}\n                                stroke=\"var(--rmg-theme-colour)\"\n                                strokeWidth={12}\n                                fill=\"none\"\n                                d={path}\n                                markerStart={props.direction === 'l' ? 'url(#arrow_theme_left)' : undefined}\n                                markerEnd={props.direction === 'r' ? 'url(#arrow_theme_right)' : undefined}\n                                strokeLinejoin=\"round\"\n                                filter={\n                                    i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : undefined\n                                }\n                            />\n                        ))}\n                    </g>\n                </g>\n            ))}\n        </>\n    );\n};\n\nconst _linePath = (\n    stnIds: string[],\n    type: 'main' | 'pass',\n    xs: { [stnId: string]: number },\n    ys: { [stnId: string]: number },\n    direction: 'l' | 'r',\n    services: Services,\n    servicesMax: number,\n    e: number = 30 // extra short line on either end, will be 0 in `indoor`\n) => {\n    var [prevY, prevX] = [] as number[];\n    var path: { [key: string]: number[] } = {};\n\n    const servicesDelta = {\n        local: 0,\n        express: 20,\n        direct: 40,\n    }[services]; // Todo: enum Services could be a better idea?\n    const servicesPassDelta = servicesMax > 1 ? 50 : 0;\n\n    stnIds.forEach(stnId => {\n        var x = xs[stnId];\n        var y = ys[stnId];\n        if (!prevY && prevY !== 0) {\n            [prevX, prevY] = [x, y];\n            path['start'] = [x, y];\n            return;\n        }\n        if (y === 0) {\n            // merge back to main line\n            if (y !== prevY) {\n                path['bifurcate'] = [prevX, prevY];\n            }\n        } else {\n            // on the branch line\n            if (y !== prevY) {\n                path['bifurcate'] = [x, y];\n            }\n        }\n        path['end'] = [x, y];\n        [prevX, prevY] = [x, y];\n    });\n\n    // generate path\n    if (!path.hasOwnProperty('start')) {\n        // no line generated\n        // keys in path: none\n        return '';\n    } else if (!path.hasOwnProperty('end')) {\n        // little line (only beyond terminal station)\n        // keys in path: start\n        let [x, y] = path['start'];\n        if (type === 'main') {\n            // current at terminal(end) station, draw the litte main line\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${x}`;\n            } else {\n                return `M ${x},${y} H ${x + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            // current at terminal(start) station, draw the litte pass line\n            if (direction === 'l') {\n                return `M ${x},${y} L ${x + e + servicesPassDelta},${y}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} L ${x},${y}`;\n            }\n        }\n    } else if (!path.hasOwnProperty('bifurcate')) {\n        // general main line\n        // keys in path: start, end\n        let [x, y] = path['start'],\n            h = path['end'][0];\n        if (type === 'main') {\n            if (direction === 'l') {\n                return `M ${x - e - servicesDelta},${y} H ${h}`;\n            } else {\n                return `M ${x},${y} H ${h + e + servicesDelta}`;\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                return `M ${x - e},${y} H ${h + e + servicesPassDelta}`;\n            } else {\n                return `M ${x - e - servicesPassDelta},${y} H ${h + e}`;\n            }\n        }\n    } else {\n        // main line bifurcate here to become the branch line\n        // and path return here are only branch line\n        // keys in path: start, bifurcate, end\n\n        // Todo: disable lower branch\n        let [x, y] = path['start'];\n        // let xb = path['bifurcate'][0];\n        let [xm, ym] = path['end'];\n        if (type === 'main') {\n            if (direction === 'l') {\n                if (ym > y) {\n                    // main line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // main line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm}`; // wrong marker\n                }\n            } else {\n                if (ym > y) {\n                    // main line, right direction, upper to center\n                    return `M ${x},${y} H ${xm} V ${ym}`; // wrong marker\n                } else {\n                    // main line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        } else {\n            // type === 'pass'\n            if (direction === 'l') {\n                if (ym > y) {\n                    // pass line, left direction, center to upper\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, left direction, upper to center\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            } else {\n                if (ym > y) {\n                    // pass line, right direction, upper to center\n                    return `M ${x - e},${y} H ${xm} V ${ym}`;\n                } else {\n                    // pass line, right direction, center to upper\n                    return `M ${x},${y} V ${ym} H ${xm + e}`;\n                }\n            }\n        }\n    }\n};\n\ninterface StationGroupProps {\n    xs: { [stnId: string]: number };\n    ys: { [stnId: string]: number };\n    stnStates: { [stnId: string]: -1 | 0 | 1 };\n}\n\nconst StationGroup = (props: StationGroupProps) => {\n    const param = useAppSelector(store => store.param);\n\n    return (\n        <g>\n            {Object.keys(param.stn_list)\n                .filter(stnId => !['linestart', 'lineend'].includes(stnId))\n                .filter(stnId => param.stn_list[stnId].services.length !== 0)\n                .map(stnId => (\n                    <g key={stnId} transform={`translate(${props.xs[stnId]},${props.ys[stnId]})`}>\n                        <StationSHMetro stnId={stnId} stnState={props.stnStates[stnId]} />\n                    </g>\n                ))}\n        </g>\n    );\n};\n\nconst ServicesElements = (props: { servicesLevel: Services[]; direction: 'l' | 'r'; dy: number; lineXs: number[] }) => {\n    const param = useAppSelector(store => store.param);\n\n    if (props.servicesLevel.length === 1) return <></>;\n\n    const servicesLevel = props.servicesLevel.map(\n        service =>\n            ({\n                local: '普通车',\n                express: '大站车',\n                direct: '直达车',\n            }[service])\n    );\n\n    // let dx = props.direction === 'r' ? 5 : param.svgWidth.railmap - 55;\n    const labelX = props.direction === 'r' ? props.lineXs[0] - 42 : props.lineXs[1] + 42;\n\n    let dx_hint = props.servicesLevel.length === 2 ? 350 : 500;\n\n    return (\n        <g>\n            {servicesLevel.map((service, i) => (\n                <g key={service} transform={`translate(${labelX},${i * 25})`}>\n                    <rect x={-27.5} height={10} width={55} fill={'white'} stroke={'black'} y={-5}></rect>\n                    <text className=\"rmg-name__zh\" fontSize={9} y={3} textAnchor=\"middle\">{`${service}运行线`}</text>\n                </g>\n            ))}\n            <g transform={`translate(${props.direction === 'r' ? 30 : param.svgWidth.railmap - dx_hint},${props.dy})`}>\n                <text className=\"rmg-name__zh\">图例：</text>\n                {servicesLevel.map((serviceLevel, i) => (\n                    <g key={`serviceLevel${i}`} transform={`translate(${i * 150 + 50},0)`}>\n                        <line\n                            x1=\"0\"\n                            x2=\"35\"\n                            y1=\"-5\"\n                            y2=\"-5\"\n                            stroke=\"var(--rmg-theme-colour)\"\n                            strokeWidth=\"12\"\n                            filter={i === 2 ? 'url(#contrast-direct)' : i === 1 ? 'url(#contrast-express)' : ''}\n                        />\n                        <use x=\"17.5\" y=\"-5\" xlinkHref=\"#stn_sh\" fill=\"var(--rmg-theme-colour)\" />\n                        <text x=\"40\" className=\"rmg-name__zh\">{`${serviceLevel}停靠站`}</text>\n                    </g>\n                ))}\n            </g>\n        </g>\n    );\n};\n\nconst DirectionElements = () => {\n    const param = useAppSelector(store => store.param);\n\n    return React.useMemo(\n        () => (\n            <g\n                transform={`translate(${param.direction === 'l' ? 50 : param.svgWidth.railmap - 150},${\n                    -param.svg_height + 100\n                })`}\n            >\n                <text className=\"rmg-name__zh\">列车前进方向</text>\n                <path\n                    d=\"M60,60L0,0L60-60H100L55-15H160V15H55L100,60z\"\n                    fill=\"var(--rmg-theme-colour)\"\n                    transform={`translate(${param.direction === 'l' ? -30 : 125},-5)rotate(${\n                        param.direction === 'l' ? 0 : 180\n                    })scale(0.15)`}\n                />\n            </g>\n        ),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [param.direction, param.svgWidth.railmap, param.svg_height]\n    );\n};\n","import * as React from 'react';\nimport MainSHMetro from './main/main-shmetro';\n\nconst RailMapSHMetro = React.memo(() => (\n    <>\n        <DefsSHMetro />\n\n        <MainSHMetro />\n    </>\n));\n\nexport default RailMapSHMetro;\n\nconst DefsSHMetro = React.memo(() => (\n    <defs>\n        <circle id=\"stn_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} r={5} />\n        <path id=\"int2_sh\" fill=\"var(--rmg-white)\" strokeWidth={2} d=\"M -5,0 a 5,5 0 1 1 10,0 V10 a 5,5 0 1 1 -10,0Z\" />\n        <path\n            id=\"express_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V25 a 5,5 0 1 1 -10,0Z\"\n        />\n        <path\n            id=\"direct_sh\"\n            fill=\"var(--rmg-white)\"\n            strokeWidth={2}\n            d=\"M -5,0 a 5,5 0 1 1 10,0 V50 a 5,5 0 1 1 -10,0Z\"\n        />\n        <rect id=\"stn_sh_2020\" stroke=\"none\" height={24} width={10} y={-18} />\n        <rect id=\"stn_sh_2020_express\" stroke=\"none\" height={49} width={10} y={-18} />\n        <rect id=\"stn_sh_2020_direct\" stroke=\"none\" height={74} width={10} y={-18} />\n\n        <rect id=\"intbox_number\" height={22} width={20} y={-11} />\n\n        <g id=\"intbox_maglev\" transform=\"translate(-25,0)\">\n            <rect id=\"maglev_5\" height={144} width={130} y=\"40\" x=\"30\" strokeWidth={10} />\n            <path\n                id=\"maglev_3\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,55a40,5 0 0 0 -40,3a5,5 0 0 0 -5,5a5,60 0 0 0 -3,60a5,5 0 0 0 5,5l96,0a5,5 0 0 0 5,-5a5,60 0 0 0 -3,-60a5,5 0 0 0 -5,-5a40,5 0 0 0 -40,-3l-5,-10l-5,10\"\n            />\n            <path\n                id=\"maglev_4\"\n                fill=\"var(--rmg-white)\"\n                d=\"m90,140l-40,0a10,5 0 0 1 -10,-5l0,25a10,15 0 0 0 10,15l15,0l0,-10l-15,0l0,-15l90,0l0,15l-15,0l0,10l15,0a10,15 0 0 0 10,-15l0,-25a10,5 0 0 1 -10,5l-50,0\"\n            />\n            <rect id=\"maglev_1\" height=\"25\" width=\"40\" y=\"80\" x=\"50\" />\n            <rect id=\"maglev_2\" height=\"25\" width=\"40\" y=\"80\" x=\"100\" />\n        </g>\n\n        <g id=\"airport\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                id=\"airport\"\n                d=\"M28.9769,6.60134c1.711.013,3.111,2.53205,3.111,4.241v10.337s17.106,15.435,17.358,15.666a1.145,1.145,0,0,1,.488,1.152v2.833c0,.651-.451.61-.695.467-.334-.119-17.151-8.863-17.151-8.863-.004,1.458-.797,9.006-1.326,13.304,0,0,4.61,2.457,4.699,2.521.334.268.352.359.352.852v2.001c0,.477-.352.428-.51.324-.183-.062-5.693-1.921-5.693-1.921a2.56018,2.56018,0,0,0-.633-.127,2.31654,2.31654,0,0,0-.666.127s-5.477,1.859-5.672,1.921c-.185.104-.523.153-.523-.324v-2.001c0-.493.029-.584.367-.852.086-.064,4.678-2.521,4.678-2.521-.524-4.298-1.307-11.846-1.325-13.304,0,0-16.822,8.744-17.148,8.863-.217.143-.69.184-.69-.467v-2.833a1.16206,1.16206,0,0,1,.473-1.152c.276-.231,17.365-15.666,17.365-15.666v-10.337c0-1.709,1.403-4.228,3.14105-4.241\"\n                transform=\"translate(-28.9697,0.14347)\"\n                fill=\"var(--rmg-white)\"\n            />\n        </g>\n        <g id=\"disney\" transform=\"scale(0.5)\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M45.6152,7.85015a9.80248,9.80248,0,0,0-9.79907,9.801,9.70059,9.70059,0,0,0,.342,2.582c.002.026.002.055.002.093a.31815.31815,0,0,1-.31494.318.67741.67741,0,0,1-.12806-.02,15.71521,15.71521,0,0,0-13.498,0,.61.61,0,0,1-.122.02.31841.31841,0,0,1-.322-.318v-.067a9.62553,9.62553,0,0,0,.35608-2.608,9.803,9.803,0,1,0-9.797,9.8,10.10364,10.10364,0,0,0,2.308-.271h.05493a.31113.31113,0,0,1,.31409.318.32433.32433,0,0,1-.019.12,15.72588,15.72588,0,1,0,29.703,7.216,15.83676,15.83676,0,0,0-1.746-7.23.18417.18417,0,0,1-.0271-.106.31612.31612,0,0,1,.32007-.318h.057a10.15953,10.15953,0,0,0,2.316.271,9.80051,9.80051,0,0,0,0-19.601\"\n                transform=\"translate(-28.9697 0.13398)\"\n            />\n        </g>\n        {/* Special thanks to Wikimedia Commons, see https://commons.wikimedia.org/wiki/File:China_Railways.svg */}\n        <g id=\"railway\">\n            <circle cx=\"0\" cy=\"29.33899\" r=\"29.33899\" fill=\"var(--rmg-grey)\" transform=\"translate(0,-2)scale(0.5)\" />\n            <path\n                fill=\"var(--rmg-white)\"\n                d=\"M169,273.5c0-19,14.7-34.8,33.7-36.3c18.9-1.5,38.1-2.2,57.4-2.2c19.3,0,38.4,0.8,57.3,2.2  c19,1.5,33.7,17.3,33.7,36.3v47.3l-51.3,14.7c-11.2,3.2-18.9,13.4-18.9,25v147.8c0,17.4,12.2,32.3,29.3,35.7l110.6,22.1  c4.9,1,8.4,5.2,8.4,10.2V599H91v-22.7c0-5,3.5-9.2,8.4-10.2L209.9,544c17-3.4,29.3-18.3,29.3-35.7V360.5c0-11.6-7.7-21.8-18.9-25  L169,320.8V273.5z M309.4,31.7c0.2-1.2,0.3-2.4,0.3-3.6c0-14-11.1-25.4-24.9-26C276.6,1.4,268.3,1,260,1c-8.3,0-16.6,0.4-24.7,1.1  c-13.9,0.6-24.9,12-24.9,26c0,1.2,0.1,2.5,0.3,3.6C90.6,54.8,0,160.3,0,287c0,97.2,53.4,182,132.4,226.6l36.8-48.1  C104.3,432.4,59.8,364.9,59.8,287c0-110.6,89.6-200.2,200.2-200.2S460.2,176.4,460.2,287c0,77.9-44.5,145.4-109.4,178.5  c15,19.6,25.6,33.5,36.8,48.1C466.6,469,520,384.2,520,287C520,160.3,429.4,54.8,309.4,31.7z\"\n                transform=\"translate(-10,0)scale(0.04)\"\n            />\n        </g>\n\n        {/* An extension of the line/path. Remember to minus the stroke-width.  */}\n        <marker id=\"arrow_gray\" viewBox=\"-1.5 0 3 1.5\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-grey)\" />\n        </marker>\n        <marker id=\"arrow_theme_left\" refX={1} refY={0.5}>\n            <path d=\"M1,0L0,1H1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n        <marker id=\"arrow_theme_right\" refY={0.5}>\n            <path d=\"M0,0L1,1H-1z\" fill=\"var(--rmg-theme-colour)\" />\n        </marker>\n\n        {/* Contrast filters for lines. */}\n        <filter id=\"contrast-direct\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncG type=\"linear\" slope={0.5} intercept={0.25} />\n                <feFuncB type=\"linear\" slope={0.5} intercept={0.25} />\n            </feComponentTransfer>\n        </filter>\n        <filter id=\"contrast-express\" filterUnits=\"userSpaceOnUse\">\n            <feComponentTransfer>\n                <feFuncR type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncG type=\"linear\" slope={0.75} intercept={0.125} />\n                <feFuncB type=\"linear\" slope={0.75} intercept={0.125} />\n            </feComponentTransfer>\n        </filter>\n\n        <filter\n            id=\"pujiang_outline_railmap\"\n            colorInterpolationFilters=\"sRGB\"\n            // TODO: remove the absolute value while make the filter works correctly\n            filterUnits=\"userSpaceOnUse\"\n            x=\"0\"\n            y=\"-1000\"\n            width=\"5000\"\n            height=\"2000\"\n        >\n            {/* Replace pass gray color with white.\n                https://stackoverflow.com/questions/41639049/replace-one-color-using-svg-filters */}\n            <feComponentTransfer in=\"SourceGraphic\">\n                <feFuncR\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n                <feFuncG\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n                <feFuncB\n                    type=\"discrete\"\n                    tableValues=\"0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0\"\n                />\n            </feComponentTransfer>\n            <feColorMatrix\n                type=\"matrix\"\n                values=\"1 0 0 0 0\n                                                 0 1 0 0 0\n                                                 0 0 1 0 0\n                                                 1 1 1 1 -3\"\n                result=\"selectedColor1\"\n            />\n\n            {/* Draw an outline line around the pass line.\n                https://stackoverflow.com/questions/49693471/svg-border-outline-for-group-of-elements\n                Also see #181 why we do not simply outline the pass line element. */}\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"0\" result=\"e1\" />\n            <feMorphology operator=\"erode\" in=\"selectedColor1\" radius=\"1\" result=\"e2\" />\n            <feComposite in=\"e1\" in2=\"e2\" operator=\"xor\" result=\"uncoloredOutline\" />\n            {/* As the pass line is colored in white, we need to recolor the outline with black. */}\n            <feFlood floodColor=\"rgb(0,0,0)\" />\n            <feComposite operator=\"in\" in2=\"uncoloredOutline\" result=\"outline\" />\n            {/* Put the outline on the white not gray pass line. */}\n            <feComposite in=\"outline\" in2=\"selectedColor1\" operator=\"over\" result=\"result\" />\n            {/* Put the white pass line with outline on the original line. */}\n            <feComposite in=\"result\" in2=\"SourceGraphic\" operator=\"over\" />\n        </filter>\n    </defs>\n));\n"],"names":["adjacencyList","stnList","leftW","rightW","Object","keys","reduce","acc","cur","children","a","c","criticalPathMethod","from","to","adjMat","len","nodes","allLengths","criticalPaths","forEach","child","cp","push","unshift","maxLength","Math","max","indexOf","getXShareMTR","stnId","branches","criticalPath","includes","branchOfStn","filter","branch","partSource","partSink","leftOpenJaw","lens","slice","getStnState","currentId","routes","direction","console","log","Set","concat","ShortDirection","stnId1","stnId2","route","idx1","idx2","_isSuccessor","_isPredecessor","Stations","data","yShares","xShares","namePoss","leftWideFactor","rightWideFactor","pathWeight","Infinity","pathTurnParams","branchSpacing","dy_a","tr","sqrt","dy_l","dx_a","dx_l","pathTurnSE","pathTurnNE","this","parents","length","stnPred","res","getYShare","stnIds","lineXs","realXs","realYs","e","prevId","prevY","prevX","path","stnDX","stnExtraH","stnSpareH","warn","x","y","join","replace","stations","stnStates","xs","ys","linePaths","main","pass","i","lineMainStns","linePassStns","_linePath","drawLine","props","param","useAppSelector","store","stnInfo","stn_list","branchNameDX","left","right","name","split","stationIconStyle","stationIconColor","info_panel_type","services","fill","stnState","transfer","info","stroke","xlinkHref","transform","StationNameGElement","infos","facility","nameENLn","stnNameEl","useRef","React","width","bBox","setBBox","current","getBBox","directionPolarity","mainDx","Facilities","flat","x1","x2","strokeWidth","IntBoxGroup","intInfos","textAnchor","StationName","ref","stnName","sum","OSIText","osiInfos","others","map","txt","array","className","dy","fontSize","boxInfos","Boolean","match","dx","isLineNumber","isMaglev","el","IntBoxMaglev","IntBoxNumber","IntBoxLetter","OSysIText","osysiInfos","memo","prevProps","nextProps","toString","dominantBaseline","textCount","height","lineNames","lineNamesEn","helper","deps","depsStr","realCP","JSON","stringify","svgWidth","railmap","padding","branch_spacing","current_stn_idx","servicesAll","values","Services","servicesPresent","stationInfo","bool","s","paths","stns","id","svg_height","Line","StationGroup","ServicesElements","servicesLevel","DirectionElements","theme","servicePath","undefined","j","d","markerStart","markerEnd","strokeLinejoin","type","servicesMax","servicesDelta","local","express","direct","servicesPassDelta","hasOwnProperty","xm","ym","h","service","labelX","dx_hint","serviceLevel","y1","y2","DefsSHMetro","r","cx","cy","viewBox","refY","refX","filterUnits","slope","intercept","colorInterpolationFilters","in","tableValues","result","operator","radius","in2","floodColor"],"sourceRoot":""}