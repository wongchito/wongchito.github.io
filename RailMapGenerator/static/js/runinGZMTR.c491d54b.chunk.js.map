{"version":3,"file":"static/js/runinGZMTR.c491d54b.chunk.js","mappings":"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","sources":["svgs/gzmtr/station-icon/station-icon.tsx","svgs/gzmtr/station-icon/station-number.tsx","svgs/runin/info-gzmtr.tsx","svgs/gzmtr/platform-number.tsx","svgs/runin/runin-gzmtr.tsx","svgs/gzmtr/psd-number.tsx","svgs/strip/strip-gzmtr.tsx"],"sourcesContent":["import React, { memo } from 'react';\n\ninterface StationIconProps {\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default memo(\n    function StationIcon(props: StationIconProps) {\n        const { passed, large } = props;\n\n        const pathD = large\n            ? 'M0,12.95 V-12.95 H-12.95 a12.95,12.95 0 0,0 0,25.9 h25.9 a12.95,12.95 0 0,0 0,-25.9 H0'\n            : 'M0,9.25 V-9.25 H-9.25 a9.25,9.25 0 0,0 0,18.5 h18.5 a9.25,9.25 0 0,0 0,-18.5 H0';\n\n        return <path d={pathD} fill=\"#fff\" strokeWidth={2} stroke={passed ? '#aaa' : 'var(--rmg-theme-colour)'} />;\n    },\n    (prevProps, nextProps) => prevProps.passed === nextProps.passed && prevProps.large === nextProps.large\n);\n","import React, { SVGProps, useEffect, useRef, useState } from 'react';\nimport StationIcon from './station-icon';\n\nconst TEXT_MAX_WIDTH = 15;\n\ninterface StationNumberProps extends SVGProps<SVGGElement> {\n    lineNum: string;\n    stnNum: string;\n    passed?: boolean;\n    large?: boolean;\n}\n\nexport default function StationNumber(props: StationNumberProps) {\n    const { lineNum, stnNum, passed, large, ...others } = props;\n\n    const lineNumEl = useRef<SVGTextElement | null>(null);\n    const stnNumEl = useRef<SVGTextElement | null>(null);\n\n    const [lineNumBBox, setLineNumBBox] = useState({ width: 0 } as DOMRect);\n    const [stnNumBBox, setStnNumBBox] = useState({ width: 0 } as DOMRect);\n\n    useEffect(() => {\n        setLineNumBBox(lineNumEl.current!.getBBox());\n        setStnNumBBox(stnNumEl.current!.getBBox());\n    }, [lineNum, stnNum]);\n\n    const lineNumScale = TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, lineNumBBox.width);\n    const stnNumScale =\n        lineNum.length === 2 && stnNum.length === 2\n            ? lineNumScale\n            : TEXT_MAX_WIDTH / Math.max(TEXT_MAX_WIDTH, stnNumBBox.width);\n\n    return (\n        <g {...others}>\n            <StationIcon passed={passed} large={large} />\n            <g\n                textAnchor=\"middle\"\n                fontSize={13.5}\n                transform={large ? 'scale(1.4)' : ''}\n                fill={passed ? '#aaa' : '#000'}\n            >\n                <g transform={`translate(-9.25,0)scale(${lineNumScale})`}>\n                    <text ref={lineNumEl} className=\"rmg-name__zh\">\n                        {lineNum}\n                    </text>\n                </g>\n                <g transform={`translate(9.25,0)scale(${stnNumScale})`}>\n                    <text ref={stnNumEl} className=\"rmg-name__zh\">\n                        {stnNum}\n                    </text>\n                </g>\n            </g>\n        </g>\n    );\n}\n","import React, { useEffect, useRef, useState } from 'react';\nimport StationNumber from '../gzmtr/station-icon/station-number';\nimport { CanvasType, Name, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport { useAppSelector } from '../../redux';\n\nconst InfoGZMTR = () => {\n    const svgHeight = useAppSelector(store => store.param.svg_height);\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const lineNumber = useAppSelector(store => store.param.line_num);\n    const currentStationIndex = useAppSelector(store => store.param.current_stn_idx);\n    const curStnInfo = useAppSelector(store => store.param.stn_list[currentStationIndex]);\n\n    const curNameEl = React.useRef<SVGGElement | null>(null);\n    const [nameBBox, setNameBBox] = useState({ width: 0 } as DOMRect);\n    useEffect(\n        () => setNameBBox(curNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [curStnInfo.name[0], curStnInfo.name[1]]\n    );\n\n    const nextStnId = curStnInfo[direction === ShortDirection.left ? 'parents' : 'children'];\n\n    const otisTransforms = {\n        name: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 4},45)`,\n        next: `translate(${((direction === ShortDirection.left ? 1 : -1) * svgWidths[CanvasType.RunIn]) / 10},45)`,\n    };\n\n    return (\n        <g>\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.name : ''}>\n                <BigName\n                    ref={curNameEl}\n                    curName={curStnInfo.name}\n                    curSecName={curStnInfo.secondaryName}\n                    style={{\n                        ['--translate-y' as any]: `${\n                            0.5 * svgHeight -\n                            50 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                    }}\n                />\n\n                <StationNumber\n                    lineNum={lineNumber}\n                    stnNum={curStnInfo.num}\n                    style={{\n                        ['--translate-x' as any]: `${(svgWidths[CanvasType.RunIn] + nameBBox.width) / 2 + 55}px`,\n                        ['--translate-y' as any]: `${\n                            0.5 * svgHeight -\n                            30 -\n                            (curStnInfo.name[1].split('\\\\').length - 1) * 18 -\n                            (curStnInfo.secondaryName ? 58 / 2 : 0)\n                        }px`,\n                        transform: 'translate(var(--translate-x, 800px), var(--translate-y, 145px))',\n                    }}\n                    large\n                />\n            </g>\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.next : ''}>\n                {nextStnId.includes('linestart') || nextStnId.includes('lineend') ? (\n                    <></>\n                ) : nextStnId.length === 1 ? (\n                    <BigNext nextId={nextStnId[0]} nameBBox={nameBBox} />\n                ) : (\n                    <BigNext2 nextIds={nextStnId} nameBBox={nameBBox} />\n                )}\n            </g>\n        </g>\n    );\n};\n\nexport default InfoGZMTR;\n\nconst BigName = React.forwardRef(\n    (props: { curName: Name; curSecName: false | Name } & React.SVGProps<SVGGElement>, ref: React.Ref<SVGGElement>) => {\n        const { curName, curSecName, ...others } = props;\n\n        return (\n            <g id=\"big_name\" {...others}>\n                {React.useMemo(\n                    () => (\n                        <g ref={ref}>\n                            <text className=\"rmg-name__zh\" fontSize={90}>\n                                {curName[0]}\n                            </text>\n                            <g fontSize={36} className=\"rmg-name__en\">\n                                {curName[1].split('\\\\').map((txt, i) => (\n                                    <text key={i} dy={70 + i * 36}>\n                                        {txt}\n                                    </text>\n                                ))}\n                            </g>\n                        </g>\n                    ),\n                    // eslint-disable-next-line react-hooks/exhaustive-deps\n                    [curName]\n                )}\n\n                {curSecName && (\n                    <BigSecName\n                        secName={curSecName}\n                        transform={`translate(0,${70 + curName[1].split('\\\\').length * 36})`}\n                    />\n                )}\n            </g>\n        );\n    }\n);\n\nconst BigSecName = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,4.5)\" fontSize={36}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl} textAnchor=\"middle\">\n                <text className=\"rmg-name__zh\" fontSize={26}>\n                    {secName[0]}\n                </text>\n                <text dy={22} className=\"rmg-name__en\" fontSize={14}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext = (props: { nextId: string; nameBBox: DOMRect }) => {\n    const { nextId, nameBBox } = props;\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const nextInfo = useAppSelector(store => store.param.stn_list[nextId]);\n    const { name, secondaryName } = nextInfo;\n\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEl = React.useRef<SVGGElement | null>(null);\n    useEffect(\n        () => setNextBBox(nextNameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [name.toString()]\n    );\n\n    const nextNameZHCount = name[0].length;\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next\">\n                <g\n                    textAnchor=\"middle\"\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? '80px'\n                                : nextNameZHCount <= 2\n                                ? `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 70}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 35 * 1.5}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        下站\n                    </text>\n                    <text className=\"rmg-name__en\" fontSize={17} dy={30}>\n                        Next\n                    </text>\n                </g>\n                <g\n                    textAnchor=\"start\"\n                    ref={nextNameEl}\n                    style={{\n                        ['--translate-x' as any]:\n                            direction === ShortDirection.left\n                                ? nextNameZHCount <= 2\n                                    ? `${115 + 35}px`\n                                    : `${115 + 35 / 2}px`\n                                : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                    }}\n                >\n                    <text className=\"rmg-name__zh\" fontSize={35}>\n                        {name[0]}\n                    </text>\n                    <g fontSize={17}>\n                        {name[1].split('\\\\').map((txt: string, i: number) => (\n                            <text className=\"rmg-name__en\" dy={30 + i * 17} key={i}>\n                                {txt}\n                            </text>\n                        ))}\n                    </g>\n                </g>\n                {secondaryName && (\n                    <g\n                        textAnchor=\"middle\"\n                        style={{\n                            ['--translate-x' as any]:\n                                direction === ShortDirection.left\n                                    ? nextNameZHCount <= 2\n                                        ? `${115 + 35}px`\n                                        : `${115 + 35 / 2}px`\n                                    : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                        }}\n                    >\n                        <BigNextSec\n                            secName={secondaryName}\n                            transform={`translate(${nextBBox.width / 2},${30 + name[1].split('\\\\').length * 17 + 5})`}\n                        />\n                    </g>\n                )}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${\n                                  (115 + 35 * ((nextNameZHCount <= 2 ? 1 : 0.5) + nextNameZHCount) + nameBcrX) / 2 - 20\n                              }px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      (nextNameZHCount <= 2 ? 70 + 35 : 35 * 2.5) +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n\nconst BigNextSec = (props: { secName: Name } & React.SVGProps<SVGGElement>) => {\n    const { secName, ...others } = props;\n\n    const nameEl = useRef<SVGGElement | null>(null);\n    const [bBox, setBBox] = useState({ x: 0, width: 0 } as DOMRect);\n    useEffect(\n        () => setBBox(nameEl.current!.getBBox()),\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [props.secName.toString()]\n    );\n\n    return (\n        <g {...others}>\n            <g transform=\"translate(0,2.5)\" fontSize={25}>\n                <text textAnchor=\"end\" x={bBox.x - 3} className=\"rmg-name__zh\">\n                    {'('}\n                </text>\n                <text textAnchor=\"start\" x={bBox.width + bBox.x + 3} className=\"rmg-name__zh\">\n                    {')'}\n                </text>\n            </g>\n            <g ref={nameEl}>\n                <text className=\"rmg-name__zh\" fontSize={18}>\n                    {secName[0]}\n                </text>\n                <text className=\"rmg-name__en\" fontSize={10} dy={15}>\n                    {secName[1]}\n                </text>\n            </g>\n        </g>\n    );\n};\n\nconst BigNext2 = (props: { nextIds: string[]; nameBBox: DOMRect }) => {\n    const { nextIds, nameBBox } = props;\n    const { routes } = useAppSelector(store => store.helper);\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const stationList = useAppSelector(store => store.param.stn_list);\n\n    const nextNames = nextIds.map(id => stationList[id].name);\n    const [nextBBox, setNextBBox] = useState({ width: 0 } as DOMRect);\n    const nextNameEls = useRef<(SVGGElement | null)[]>([]);\n    useEffect(\n        () => {\n            setNextBBox(prevBBox => ({ ...prevBBox, width: 0 }));\n            nextNameEls.current.forEach(el => {\n                let nextBBox = el?.getBBox();\n                setNextBBox(prevBBox => {\n                    if (nextBBox) {\n                        return prevBBox.width > nextBBox.width ? prevBBox : nextBBox;\n                    } else {\n                        return prevBBox;\n                    }\n                });\n            });\n        },\n        // eslint-disable-next-line react-hooks/exhaustive-deps\n        [nextNames.toString()]\n    );\n\n    const validEnds = props.nextIds.map(stnId =>\n        routes.reduce(\n            (acc, route) =>\n                // filter routes not containing next station's id\n                route.includes(stnId)\n                    ? acc.concat(\n                          route\n                              .filter(s => !['linestart', 'lineend'].includes(s))\n                              // select first/last station's id\n                              .slice(direction === ShortDirection.left ? 0 : -1)[0]\n                      )\n                    : acc,\n            [] as string[]\n        )\n    );\n\n    const nextNameZHCount = Math.max(...nextNames.map(names => names[0].length));\n    const nameBcrX = (svgWidths[CanvasType.RunIn] - nameBBox.width) / 2;\n\n    return (\n        <>\n            <g id=\"big_next_2\">\n                {nextNames.map((name, i) => {\n                    return (\n                        <React.Fragment key={i}>\n                            <g\n                                textAnchor=\"middle\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '72px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width - 41}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">下站</text>\n                                <text className=\"rmg-name__en\" y={22}>\n                                    Next\n                                </text>\n                            </g>\n                            <g\n                                ref={el => (nextNameEls.current[i] = el)}\n                                textAnchor=\"start\"\n                                style={{\n                                    ['--translate-x' as any]:\n                                        direction === ShortDirection.left\n                                            ? '113px'\n                                            : `${svgWidths[CanvasType.RunIn] - 45 - nextBBox.width}px`,\n                                }}\n                            >\n                                <text className=\"rmg-name__zh\">{name[0]}</text>\n                                {name[1].split('\\\\').map((txt, j) => (\n                                    <text key={j} className=\"rmg-name__en\" y={22 + j * 13}>\n                                        {txt}\n                                    </text>\n                                ))}\n                                <text className=\"rmg-name__zh\" y={-35}>\n                                    {validEnds[i].map(s => stationList[s].name[0]).join('/') + '方向'}\n                                </text>\n                                <text className=\"rmg-name__en rmg-name__gzmtr--next2-dest\" y={-20}>\n                                    {'Towards ' +\n                                        validEnds[i]\n                                            .map(s => stationList[s].name[1])\n                                            .join('/')\n                                            .replace('\\\\', ' ')}\n                                </text>\n                            </g>\n                        </React.Fragment>\n                    );\n                })}\n            </g>\n            <path\n                id=\"arrow\"\n                d=\"M 60,60 L 0,0 L 60,-60 H 100 L 55,-15 H 160 V 15 H 55 L 100,60z\"\n                fill=\"black\"\n                style={{\n                    ['--translate-x' as any]:\n                        direction === ShortDirection.left\n                            ? `${(99 + 27 * (1 + nextNameZHCount) + nameBcrX) / 2 - 20}px`\n                            : `${\n                                  (svgWidths[CanvasType.RunIn] -\n                                      45 -\n                                      nextBBox.width -\n                                      41 -\n                                      27 +\n                                      nameBcrX +\n                                      props.nameBBox.width +\n                                      55 +\n                                      18.5 * 1.4) /\n                                      2 +\n                                  20\n                              }px`,\n                    ['--rotate' as any]: direction === ShortDirection.left ? '0deg' : '180deg',\n                }}\n            />\n        </>\n    );\n};\n","import React, { SVGProps } from 'react';\n\ninterface PlatformNumberProps extends SVGProps<SVGGElement> {\n    num: string | false;\n}\n\nexport default function PlatformNumber(props: PlatformNumberProps) {\n    const { num, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill=\"var(--rmg-theme-fg)\" {...others}>\n            <circle cx={0} cy={0} r={30} fill=\"var(--rmg-theme-colour)\" />\n            <text className=\"rmg-name__en\" fontSize={38} dy={-9.5}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={13} dy={10}>\n                站台\n            </text>\n            <text className=\"rmg-name__en\" fontSize={9} dy={21}>\n                Platform\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport StripGZMTR from '../strip/strip-gzmtr';\nimport InfoGZMTR from './info-gzmtr';\nimport { useAppSelector } from '../../redux';\nimport { CanvasType, PanelTypeGZMTR, ShortDirection } from '../../constants/constants';\nimport PlatformNumber from '../gzmtr/platform-number';\n\nconst RunInGZMTR = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const direction = useAppSelector(store => store.param.direction);\n    const infoPanelType = useAppSelector(store => store.param.info_panel_type);\n    const platformNumber = useAppSelector(store => store.param.platform_num);\n    const psdNumber = useAppSelector(store => store.param.psd_num);\n\n    const otisTransforms = {\n        platform: `translate(${direction === ShortDirection.left ? 50 : -50},45)`,\n    };\n    return (\n        <>\n            <StripGZMTR\n                variant={infoPanelType}\n                isShowLight={infoPanelType !== PanelTypeGZMTR.gz2otis}\n                isShowPSD={infoPanelType !== PanelTypeGZMTR.gz2otis && psdNumber}\n            />\n\n            <g transform={infoPanelType === PanelTypeGZMTR.gz2otis ? otisTransforms.platform : ''}>\n                <PlatformNumber\n                    num={platformNumber}\n                    style={{\n                        ['--translate-x' as any]: `${\n                            direction === ShortDirection.left ? svgWidths[CanvasType.RunIn] - 100 : 100\n                        }px`,\n                        ['--translate-y' as any]: 'calc(var(--rmg-svg-height) / 2 - 30px)',\n                        transform: 'translate(var(--translate-x, 100px), var(--translate-y))',\n                    }}\n                />\n            </g>\n\n            <InfoGZMTR />\n\n            {infoPanelType === PanelTypeGZMTR.gz2otis && <OtisFrame />}\n        </>\n    );\n};\n\nexport default RunInGZMTR;\n\nconst OtisFrame = () => {\n    const svgWidths = useAppSelector(store => store.param.svgWidth);\n    const svgHeight = useAppSelector(store => store.param.svg_height);\n    return (\n        <g id=\"otis_frame\" strokeWidth={3} stroke=\"black\">\n            <line y2={svgHeight} transform={`translate(${svgWidths[CanvasType.RunIn] / 2},0)`} />\n            <line x2={svgWidths[CanvasType.RunIn]} transform=\"translate(0,90)\" />\n        </g>\n    );\n};\n","import React, { SVGProps } from 'react';\nimport { MonoColour } from '../../constants/constants';\n\ninterface PsdNumberProps extends SVGProps<SVGGElement> {\n    num: string;\n    inStrip?: boolean;\n}\n\nexport default function PsdNumber(props: PsdNumberProps) {\n    const { num, inStrip, ...others } = props;\n\n    return (\n        <g textAnchor=\"middle\" fill={inStrip ? MonoColour.black : 'var(--rmg-theme-fg)'} {...others}>\n            <rect height={40} width={40} rx={4} x={-20} fill={inStrip ? '#fff' : 'var(--rmg-theme-colour)'} />\n            <text className=\"rmg-name__en\" fontSize={20} dy={12}>\n                {num}\n            </text>\n            <text className=\"rmg-name__zh\" fontSize={12} dy={26}>\n                屏蔽门\n            </text>\n            <text className=\"rmg-name__en\" fontSize={6.5} dy={36}>\n                Screen Door\n            </text>\n        </g>\n    );\n}\n","import React from 'react';\nimport { PanelTypeGZMTR, PanelTypeShmetro } from '../../constants/constants';\nimport PsdNumber from '../gzmtr/psd-number';\n\ninterface Props {\n    variant: PanelTypeGZMTR | PanelTypeShmetro;\n    isShowLight: boolean;\n    isShowPSD: false | string;\n}\n\nconst StripGZMTR = (props: Props) => {\n    const stripHeight = (variant => {\n        switch (variant) {\n            case 'gz28':\n            case 'gz2otis':\n            case 'gz6':\n            case 'gzgf':\n                return 60;\n            case 'gz1':\n            case 'gz3':\n                return 40;\n            case 'gz4':\n            case 'gz5':\n            case 'gz1421':\n                return 20;\n            default:\n                return 0;\n        }\n    })(props.variant);\n\n    const indicatorLight = React.useMemo(() => {\n        switch (props.variant) {\n            case 'gz1':\n                return <circle cy={-58} r={16} fill=\"red\" />;\n            case 'gz28':\n            case 'gz2otis':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz3':\n                return <rect x={-15} y={-55} height={30} width={30} fill=\"red\" />;\n            case 'gz6':\n                return <ellipse cy={-30} rx={24} ry={12} fill=\"white\" />;\n            case 'gz1421':\n                return <ellipse cy={-38} rx={24} ry={12} fill=\"orange\" />;\n            case 'gz5':\n                return <rect x={-30} y={-70} height={30} width={60} fill=\"orange\" />;\n            case 'gz4':\n                return <rect x={-50} y={-50} height={25} width={100} fill=\"whitesmoke\" />;\n            case 'gzgf':\n                return <rect x={-30} y={-58} height={30} width={60} fill=\"orange\" />;\n            default:\n                return <></>;\n        }\n    }, [props.variant]);\n\n    const stripDy = -20;\n\n    return (\n        <g transform={`translate(0,${props.variant === 'gz4' ? stripDy : 0})`}>\n            <rect\n                id=\"strip_gz\"\n                style={{\n                    ['--height' as any]: `${stripHeight}px`,\n                }}\n            />\n            <g\n                style={{\n                    transform: 'translate(calc(var(--rmg-svg-width) / 2),var(--rmg-svg-height))',\n                }}\n            >\n                {props.isShowLight && indicatorLight}\n            </g>\n            {props.isShowPSD !== false && <PSD {...props} />}\n        </g>\n    );\n};\n\nexport default StripGZMTR;\n\nconst PSD = React.memo(\n    (props: Props) => {\n        /**\n         * Flag of whether PSD number is stick within the strip area. If `true`, should fill with white, otherwise, fill with theme colour.\n         */\n        const isInStrip = ['gz28', 'gz2otis', 'gz6', 'gzgf'].includes(props.variant);\n        const psdDy = ((variant: PanelTypeGZMTR | PanelTypeShmetro) => {\n            switch (variant) {\n                case 'gz1':\n                case 'gz3':\n                    return '82px';\n                case 'gz4':\n                    return '65px';\n                case 'gz5':\n                    return '80px';\n                case 'gz1421':\n                    return '62px';\n                default:\n                    return '58px';\n            }\n        })(props.variant);\n\n        return (\n            <PsdNumber\n                num={props.isShowPSD as string}\n                inStrip={isInStrip}\n                style={{\n                    ['--psd-dy' as any]: psdDy,\n                    transform: 'translate(var(--translate-x), var(--translate-y))',\n                    ['--translate-x' as any]: 'calc(var(--rmg-svg-width) / 2 + 80px)',\n                    ['--translate-y' as any]: 'calc(var(--rmg-svg-height) - var(--psd-dy, 58px))',\n                }}\n            />\n        );\n    },\n    (prevProps, nextProps) => prevProps.variant === nextProps.variant && prevProps.isShowPSD === nextProps.isShowPSD\n);\n"],"names":["memo","props","passed","pathD","large","d","fill","strokeWidth","stroke","prevProps","nextProps","StationNumber","lineNum","stnNum","others","lineNumEl","useRef","stnNumEl","useState","width","lineNumBBox","setLineNumBBox","stnNumBBox","setStnNumBBox","useEffect","current","getBBox","lineNumScale","Math","max","stnNumScale","length","textAnchor","fontSize","transform","ref","className","svgHeight","useAppSelector","store","param","svg_height","svgWidths","svgWidth","direction","infoPanelType","info_panel_type","lineNumber","line_num","currentStationIndex","current_stn_idx","curStnInfo","stn_list","curNameEl","React","nameBBox","setNameBBox","name","nextStnId","ShortDirection","otisTransforms","CanvasType","next","PanelTypeGZMTR","BigName","curName","curSecName","secondaryName","style","split","num","includes","BigNext","nextId","BigNext2","nextIds","id","map","txt","i","dy","BigSecName","secName","nameEl","x","bBox","setBBox","toString","nextInfo","nextBBox","setNextBBox","nextNameEl","nextNameZHCount","nameBcrX","BigNextSec","routes","helper","stationList","nextNames","nextNameEls","prevBBox","forEach","el","validEnds","stnId","reduce","acc","route","concat","filter","s","slice","names","y","j","join","replace","PlatformNumber","cx","cy","r","platformNumber","platform_num","psdNumber","psd_num","platform","variant","isShowLight","isShowPSD","OtisFrame","y2","x2","PsdNumber","inStrip","MonoColour","height","rx","stripHeight","indicatorLight","ry","PSD","isInStrip","psdDy"],"sourceRoot":""}