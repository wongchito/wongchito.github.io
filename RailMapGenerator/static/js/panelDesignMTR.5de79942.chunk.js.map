{"version":3,"file":"static/js/panelDesignMTR.5de79942.chunk.js","mappings":"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","sources":["panels/design/list-mtr.tsx"],"sourcesContent":["import React, { memo, useMemo, ChangeEvent, useState } from 'react';\nimport { useTranslation } from 'react-i18next';\nimport {\n    Divider,\n    List,\n    ListItem,\n    ListItemIcon,\n    Icon,\n    ListItemText,\n    ListItemSecondaryAction,\n    Switch,\n    Collapse,\n    makeStyles,\n    createStyles,\n    TextField,\n    Grid,\n    Button,\n} from '@material-ui/core';\nimport { Name } from '../../constants/constants';\nimport { useAppDispatch, useAppSelector } from '../../redux';\nimport {\n    customiseDestinationName,\n    flipStationNames,\n    toggleLineNameBeforeDestination,\n    staggerStationNames,\n} from '../../redux/param/action';\n\nconst useStyles = makeStyles(theme =>\n    createStyles({\n        divider: {\n            margin: theme.spacing(0, 2),\n        },\n        nested: {\n            paddingLeft: theme.spacing(5),\n        },\n        grid: {\n            paddingLeft: theme.spacing(8),\n            paddingBottom: theme.spacing(1),\n            paddingRight: theme.spacing(2),\n            '& .MuiFormControl-root': {\n                width: '100%',\n            },\n        },\n    })\n);\n\nexport default memo(function DesignListMTR() {\n    return (\n        <>\n            <NamePosLi />\n            <Divider />\n            <CustomiseDest />\n        </>\n    );\n});\n\nconst NamePosLi = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const namePosition = useAppSelector(store => store.param.namePosMTR);\n\n    return useMemo(() => {\n        const handleStaggerChange = (_: ChangeEvent, checked: boolean) => {\n            dispatch(staggerStationNames(checked));\n        };\n\n        return (\n            <>\n                <ListItem>\n                    <ListItemIcon>\n                        <Icon>text_rotation_none</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.txtFlip.text')} />\n                    <ListItemSecondaryAction>\n                        <Switch\n                            edge=\"end\"\n                            color=\"primary\"\n                            checked={namePosition.isStagger}\n                            onChange={handleStaggerChange}\n                        />\n                    </ListItemSecondaryAction>\n                </ListItem>\n\n                <List component=\"div\" disablePadding>\n                    <ListItem className={classes.nested}>\n                        <ListItemText primary={t('design.txtFlip.flipText')} />\n                        <Divider orientation=\"vertical\" flexItem className={classes.divider} />\n                        <Button variant=\"outlined\" color=\"primary\" onClick={() => dispatch(flipStationNames())}>\n                            {t('design.txtFlip.flip')}\n                        </Button>\n                    </ListItem>\n                </List>\n            </>\n        );\n    }, [namePosition.isStagger, classes.nested, classes.divider, dispatch, t]);\n};\n\nconst CustomiseDest = () => {\n    const { t } = useTranslation();\n    const classes = useStyles();\n    const dispatch = useAppDispatch();\n\n    const customisedMtrDestination = useAppSelector(store => store.param.customiseMTRDest);\n    const [open, setOpen] = useState(customisedMtrDestination.isLegacy || customisedMtrDestination.terminal !== false);\n\n    return useMemo(() => {\n        const handleShowNameChange = (_: ChangeEvent, checked: boolean) => {\n            dispatch(toggleLineNameBeforeDestination(checked));\n        };\n\n        const handleIsCustomisedChange = (_: ChangeEvent, checked: boolean) => {\n            const customisedName = checked ? (['', ''] as Name) : false;\n            dispatch(customiseDestinationName(customisedName));\n        };\n\n        const handleNameChange =\n            (index: number) =>\n            ({ target: { value } }: ChangeEvent<HTMLInputElement>) => {\n                let terminal =\n                    customisedMtrDestination.terminal !== false\n                        ? (customisedMtrDestination.terminal.map((val, i) => (i === index ? value : val)) as Name)\n                        : false;\n                dispatch(customiseDestinationName(terminal));\n            };\n\n        return (\n            <>\n                <ListItem button onClick={() => setOpen(prevOpen => !prevOpen)}>\n                    <ListItemIcon>\n                        <Icon>text_fields</Icon>\n                    </ListItemIcon>\n                    <ListItemText primary={t('design.MTRDest.button')} />\n                    {open ? <Icon color=\"action\">expand_less</Icon> : <Icon color=\"action\">expand_more</Icon>}\n                </ListItem>\n                <Collapse in={open}>\n                    <List component=\"div\" disablePadding>\n                        <ListItem className={classes.nested}>\n                            <ListItemText primary={t('design.MTRDest.legacy')} />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    color=\"primary\"\n                                    edge=\"end\"\n                                    onChange={handleShowNameChange}\n                                    checked={customisedMtrDestination.isLegacy}\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <ListItem className={classes.nested}>\n                            <ListItemText primary={t('design.MTRDest.terminal')} />\n                            <ListItemSecondaryAction>\n                                <Switch\n                                    color=\"primary\"\n                                    edge=\"end\"\n                                    checked={customisedMtrDestination.terminal !== false}\n                                    onChange={handleIsCustomisedChange}\n                                />\n                            </ListItemSecondaryAction>\n                        </ListItem>\n                        <Collapse in={customisedMtrDestination.terminal !== false} unmountOnExit>\n                            <Grid\n                                container\n                                spacing={1}\n                                justifyContent=\"center\"\n                                alignItems=\"flex-start\"\n                                className={classes.grid}\n                            >\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        label={t('design.MTRDest.zh')}\n                                        value={\n                                            customisedMtrDestination.terminal\n                                                ? customisedMtrDestination.terminal[0]\n                                                : ''\n                                        }\n                                        onChange={handleNameChange(0)}\n                                    />\n                                </Grid>\n                                <Grid item xs={12} sm={6}>\n                                    <TextField\n                                        label={t('design.MTRDest.en')}\n                                        value={\n                                            customisedMtrDestination.terminal\n                                                ? customisedMtrDestination.terminal[1]\n                                                : ''\n                                        }\n                                        onChange={handleNameChange(1)}\n                                    />\n                                </Grid>\n                            </Grid>\n                        </Collapse>\n                    </List>\n                </Collapse>\n            </>\n        );\n    }, [\n        customisedMtrDestination.isLegacy,\n        customisedMtrDestination.terminal,\n        open,\n        classes.nested,\n        classes.grid,\n        t,\n        dispatch,\n    ]);\n};\n"],"names":["useStyles","makeStyles","theme","createStyles","divider","margin","spacing","nested","paddingLeft","grid","paddingBottom","paddingRight","width","memo","NamePosLi","CustomiseDest","t","useTranslation","classes","dispatch","useAppDispatch","namePosition","useAppSelector","store","param","namePosMTR","useMemo","primary","edge","color","checked","isStagger","onChange","_","staggerStationNames","component","disablePadding","className","orientation","flexItem","variant","onClick","flipStationNames","customisedMtrDestination","customiseMTRDest","useState","isLegacy","terminal","open","setOpen","handleNameChange","index","value","target","map","val","i","customiseDestinationName","button","prevOpen","in","toggleLineNameBeforeDestination","customisedName","unmountOnExit","container","justifyContent","alignItems","item","xs","sm","label"],"sourceRoot":""}